<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript + ava + nyc + gitlab CI/CD 实现代码覆盖率</title>
      <link href="/2019/02/06/test-cov/"/>
      <url>/2019/02/06/test-cov/</url>
      
        <content type="html"><![CDATA[<p><code>typescript</code> <code>ava</code> <code>nyc</code> <code>gitlab ci</code> 实现代码覆盖率自动化以及 badges 显示</p><a id="more"></a><h2 id="最终配置"><a href="#最终配置" class="headerlink" title="最终配置"></a>最终配置</h2><ul><li>在 <code>package.json</code> 添加以下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"coverage"</span>: <span class="string">"TS_NODE_FILES=true nyc ava --fail-fast -v"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ava"</span>: &#123;</span><br><span class="line">    <span class="attr">"compileEnhancements"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"extensions"</span>: [<span class="string">"ts"</span>],</span><br><span class="line">    <span class="attr">"require"</span>: [<span class="string">"ts-node/register"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"nyc"</span>: &#123;</span><br><span class="line">    <span class="attr">"include"</span>: [<span class="string">"src/**/*.ts"</span>],</span><br><span class="line">    <span class="attr">"exclude"</span>: [<span class="string">"**/*.d.ts"</span>],</span><br><span class="line">    <span class="attr">"extension"</span>: [<span class="string">".ts"</span>],</span><br><span class="line">    <span class="attr">"require"</span>: [<span class="string">"ts-node/register"</span>],</span><br><span class="line">    <span class="attr">"reporter"</span>: [<span class="string">"html"</span>, <span class="string">"text-summary"</span>],</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"instrument"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>需要安装<code>source-map-support</code>, 在 <code>package.json</code> 同目录下运行<code>yarn add -D source-map-support</code> 或者 <code>npm install --save-dev source-map-support</code></p></li><li><p>在 <code>gitlab-ci.yml</code> 添加一下内容</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test-coverage:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test-coverage</span></span><br><span class="line"><span class="attr">  coverage:</span> <span class="string">'/Lines\s*:\s*(\d+(?:\.\d+)?)%/'</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">yarn</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><h3 id="ava-配置"><a href="#ava-配置" class="headerlink" title="ava 配置"></a>ava 配置</h3><p><code>ava</code> 的配置 直接从官方文档 <a href="https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md" target="_blank" rel="noopener">typescript.md</a>  的  动态编译部分获取  配置</p><p><strong>注意!!</strong></p><blockquote><p>如果你写的 <code>typescript</code> 代码中 含有 <code>d.ts</code> 文件<br>需要加上环境变量 <code>TS_NODE_FILES=true</code></p></blockquote><h3 id="nyc-配置"><a href="#nyc-配置" class="headerlink" title="nyc 配置"></a>nyc 配置</h3><p>从官方文档 <a href="https://istanbul.js.org/docs/tutorials/typescript/" target="_blank" rel="noopener"><code>tutorials/typescript</code></a>部分得知需要配置 <code>extension</code> 为 <code>.ts</code>, 从 <a href="https://azimi.me/2016/09/30/nyc-mocha-typescript.1.html" target="_blank" rel="noopener">nyc-mocha-typescript</a>这篇文章得知, 需要 <code>source-map-support</code> 来映射 <code>ts</code> 和 <code>js</code>的代码关系<br>而 <code>reporter</code> 配置, 可以在 <a href="https://istanbul.js.org/docs/advanced/alternative-reporters/" target="_blank" rel="noopener">alternative-reporters</a> 选择自己需要的 <code>reporter</code>, 由于需要配合 <code>gitlab ci</code>, 这边需要选择 <code>text-summary</code> 方便 <code>glitlab</code> 分析</p><h3 id="gitlab-配置"><a href="#gitlab-配置" class="headerlink" title="gitlab 配置"></a>gitlab 配置</h3><p>从官方文档可知, 需要用正则表达式来截取最终的覆盖率, 由于用了 <code>text-summary</code> 的 <code>reporter</code>, 所以正则表达式为 <code>/Lines\s*:\s*(\d+(?:\.\d+)?)%/</code></p><p>最后, 通过 URL <code>https://gitlab.com/&lt;namespace&gt;/&lt;project&gt;/badges/&lt;branch&gt;/coverage.svg</code> 来显示一个小图标, 比如 <figure class="image-box">                <img src="https://gitlab.com/shang-music/music-api/badges/develop/coverage.svg" alt="" title="" class="">                <p></p>            </figure></p><h2 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h2><p><a href="https://gitlab.com/shang-music/music-api" target="_blank" rel="noopener">music-api</a><br>包含了 <code>ts</code> <code>ava</code> <code>nyc</code> <code>gitlab ci</code> <code>npm publish</code> 和 <code>badges</code>显示</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://azimi.me/2016/09/30/nyc-mocha-typescript.1.html" target="_blank" rel="noopener">Setting up test coverage using Mocha, Istanbul, NYC with TypeScript</a></li><li><a href="https://istanbul.js.org/docs/tutorials/ava/" target="_blank" rel="noopener">Using Istanbul With AVA</a></li><li><a href="https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing" target="_blank" rel="noopener">GitLab Docs test-coverage-parsing</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ava </tag>
            
            <tag> nyc </tag>
            
            <tag> typescript </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>headless Chrome 入门</title>
      <link href="/2019/01/01/headless-chrome-start/"/>
      <url>/2019/01/01/headless-chrome-start/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>puppeteer</code> <code>API</code> 入门 <code>headless Chrome</code></p><a id="more"></a><h2 id="headless-简介"><a href="#headless-简介" class="headerlink" title="headless 简介"></a><code>headless</code> 简介</h2><ul><li><p><code>Headless browser</code><br><code>Headless browser</code> 是没有图形界面的浏览器</p></li><li><p><a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md" target="_blank" rel="noopener"><code>Headless Chrome/Headless Chromium</code></a><br>允许 <code>Chrome/Chromium</code> 在 <code>headless/server</code> 的环境中使用</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode" target="_blank" rel="noopener"><code>Headless Firefox</code></a><br>允许 <code>Firefox</code> 在 <code>headless/server</code> 的环境中使用</p></li><li><p><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener"><code>GoogleChrome/puppeteer</code></a><br><code>Google</code> 开源的 <code>headless nodejs API</code></p></li></ul><h2 id="pptr-puppeteer-使用"><a href="#pptr-puppeteer-使用" class="headerlink" title="pptr(puppeteer) 使用"></a><code>pptr(puppeteer)</code> 使用</h2><ul><li>安装 &amp;&amp; 启动</li><li>pdf &amp;&amp; 截图</li><li>隐藏 headless chrome 特有的属性来屏蔽检测</li><li>自动化测试 (键入字符 &amp;&amp; 拦截请求)</li></ul><h3 id="安装-amp-amp-启动"><a href="#安装-amp-amp-启动" class="headerlink" title="安装 &amp;&amp; 启动"></a>安装 &amp;&amp; 启动</h3><p> 需要手动安装 chrome<br><code>npm i puppeteer-core</code><br>自动下载 chrome<br><code>npm i puppeteer</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">  <span class="comment">// Chromium 安装路径</span></span><br><span class="line">  executablePath: process.env.CHROME_BIN,</span><br><span class="line">  <span class="comment">// 是否以 headless 模式启动</span></span><br><span class="line">  headless: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否开启 devtools</span></span><br><span class="line">  devtools: <span class="literal">true</span>,</span><br><span class="line">  args: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-gpu'</span>, <span class="string">'--disable-setuid-sandbox'</span>, <span class="string">'--disable-dev-shm-usage'</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐身模式</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">await</span> browser.createIncognitoBrowserContext();</span><br><span class="line"><span class="comment">// 创建一个 标签页</span></span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> context.newPage();</span><br><span class="line"><span class="comment">// 转到哪个网址, 并且等待网页load</span></span><br><span class="line"><span class="keyword">await</span> page.goto(<span class="string">'https://www.jd.com'</span>, &#123; <span class="attr">waitUntil</span>: <span class="string">'load'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="pdf-amp-amp-截图"><a href="#pdf-amp-amp-截图" class="headerlink" title="pdf &amp;&amp; 截图"></a>pdf &amp;&amp; 截图</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.pdf(&#123;</span><br><span class="line">  path: pathResolve(__dirname, <span class="string">'../data/jd.pdf'</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.screenshot(&#123;</span><br><span class="line">  path: pathResolve(__dirname, <span class="string">'../data/jd.png'</span>),</span><br><span class="line">  fullPage: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="隐藏-headless-chrome-特有的属性来屏蔽检测"><a href="#隐藏-headless-chrome-特有的属性来屏蔽检测" class="headerlink" title="隐藏 headless chrome 特有的属性来屏蔽检测"></a><a href="https://intoli.com/blog/not-possible-to-block-chrome-headless/" target="_blank" rel="noopener">隐藏 headless chrome 特有的属性来屏蔽检测</a></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.setUserAgent(</span><br><span class="line">  <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.evaluateOnNewDocument(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// overwrite the `languages` property to use a custom getter</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(navigator, <span class="string">'languages'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'zh-CN'</span>, <span class="string">'zh'</span>, <span class="string">'zh-TW'</span>, <span class="string">'en-US'</span>, <span class="string">'en'</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite the `plugins` property to use a custom getter.</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(navigator, <span class="string">'plugins'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass the Webdriver test</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(navigator, <span class="string">'webdriver'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass the Chrome Test.</span></span><br><span class="line">  <span class="comment">// We can mock this in as much depth as we need for the test.</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="built_in">window</span>.navigator.chrome = &#123;</span><br><span class="line">    runtime: &#123;&#125;,</span><br><span class="line">    <span class="comment">// etc.</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass the Permissions Test.</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="keyword">const</span> originalQuery = <span class="built_in">window</span>.navigator.permissions.query;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="built_in">window</span>.navigator.permissions.query = <span class="function">(<span class="params">parameters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parameters.name === <span class="string">'notifications'</span></span><br><span class="line">      ? <span class="built_in">Promise</span>.resolve(&#123; state: Notification.permission &#125;)</span><br><span class="line">      : originalQuery(parameters);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自动化测试-键入字符-amp-amp-拦截请求-等"><a href="#自动化测试-键入字符-amp-amp-拦截请求-等" class="headerlink" title="自动化测试 (键入字符 &amp;&amp; 拦截请求 等)"></a>自动化测试 (键入字符 &amp;&amp; 拦截请求 等)</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键入字符</span></span><br><span class="line"><span class="keyword">await</span> page.type(<span class="string">'input[name="username"]'</span>, <span class="string">'XXXXX'</span>, &#123; delay: <span class="number">10</span> &#125;);</span><br><span class="line"><span class="comment">// 鼠标点击</span></span><br><span class="line"><span class="keyword">await</span> page.mouse.click();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截请求</span></span><br><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span><br><span class="line">page.on(<span class="string">'request'</span>, <span class="function">(<span class="params">request</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">page.on(<span class="string">'response'</span>, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span>-alpine as build</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY package.json package.json</span></span><br><span class="line"><span class="bash">COPY yarn.lock yarn.lock</span></span><br><span class="line"><span class="bash">RUN yarnpkg</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN npm run build</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM keymetrics/pm2:10-alpine</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">      &amp;&amp; apk update \</span></span><br><span class="line"><span class="bash">      &amp;&amp; apk upgrade \</span></span><br><span class="line"><span class="bash">      &amp;&amp; apk add --no-cache \</span></span><br><span class="line"><span class="bash">      wget \</span></span><br><span class="line"><span class="bash">      dumb-init \</span></span><br><span class="line"><span class="bash">      udev \</span></span><br><span class="line"><span class="bash">      ttf-freefont \</span></span><br><span class="line"><span class="bash">      chromium \</span></span><br><span class="line"><span class="bash">      <span class="comment"># install chinese font</span></span></span><br><span class="line"><span class="bash">      &amp;&amp; wget -qO- https://raw.githubusercontent.com/yakumioto/YaHei-Consolas-Hybrid-1.12/master/install.sh | sh \</span></span><br><span class="line"><span class="bash">      <span class="comment"># Cleanup</span></span></span><br><span class="line"><span class="bash">      &amp;&amp; apk del --no-cache make gcc g++ python binutils-gold gnupg libstdc++ \</span></span><br><span class="line"><span class="bash">      &amp;&amp; rm -rf /usr/include \</span></span><br><span class="line"><span class="bash">      &amp;&amp; rm -rf /var/cache/apk/* /root/.node-gyp /usr/share/man /tmp/* \</span></span><br><span class="line"><span class="bash">      &amp;&amp; <span class="built_in">echo</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"/usr/bin/dumb-init"</span>]</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># node project</span></span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># cache package</span></span></span><br><span class="line"><span class="bash">COPY --from=build /app/dist/package.json package.json</span></span><br><span class="line"><span class="bash">RUN yarnpkg</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># copy project dist files</span></span></span><br><span class="line"><span class="bash">COPY --from=build /app/dist/ .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV CHROME_BIN <span class="string">"/usr/bin/chromium-browser"</span></span></span><br><span class="line"><span class="bash">ENV NODE_ENV <span class="string">"production"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"node"</span>, <span class="string">"index.js"</span>]</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://intoli.com/blog/not-possible-to-block-chrome-headless/" target="_blank" rel="noopener">IT IS <em>NOT</em> POSSIBLE TO DETECT AND BLOCK CHROME HEADLESS</a></li><li><a href="https://pptraas.com/" target="_blank" rel="noopener">Puppeteer as a service</a></li><li><a href="https://juejin.im/post/5bbc96785188255c72286403" target="_blank" rel="noopener">截图的诱惑</a></li><li><a href="https://github.com/GoogleChrome/puppeteer/blob/v1.11.0/docs/api.md" target="_blank" rel="noopener">puppeteer api</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> headless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 fetch 上传 FormData 踩坑</title>
      <link href="/2018/12/01/fetch-form-data/"/>
      <url>/2018/12/01/fetch-form-data/</url>
      
        <content type="html"><![CDATA[<p>使用 fetch 上传文件, 使用 FormData 服务器无法识别<br><a id="more"></a></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>先上结论, 使用 <code>fetch</code> 和 <code>FormData</code>, 不能设置 <code>Content-Type</code> header !!!!</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>想要 通过 <code>blob</code> 上传二进制文件到服务器, 很自然用了如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">'xxx'</span>, Blob, <span class="string">'filename'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> fetch(url, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: formData,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是服务器一直报错, 返回无法识别 <code>body</code></p><h1 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h1><ol><li>换成 <code>xmlRequest</code> 上传, 依然报错</li><li>使用其它工具上传(<code>postman/insomnia</code>), 正常</li><li>使用 <code>fetch</code> 上传, 报错</li><li>对比 发送的数据, 发现使用 <code>fetch</code> 上传的 <code>Header</code>为:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type multipart/form-data</span><br></pre></td></tr></table></figure><p>而 使用其它工具上传时, <code>Header</code> 为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=X-INSOMNIA-BOUNDARY</span><br></pre></td></tr></table></figure><p>多了一个 <code>boundary</code> 属性</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>使用 <code>FormData</code> 传输二进制数据,服务器需要一种方法来知道一个字段的数据何处结束以及下一个数据的起始位置.而 <code>boundary</code> 定义了我们在请求中发送的字段之间的分隔符. 当删除我们手动定义的 <code>Content-Type</code> 之后, 浏览器会添加正确的 <code>boundary</code></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://stanko.github.io/uploading-files-using-fetch-multipart-form-data/" target="_blank" rel="noopener">Uploading files using ‘fetch’ and ‘FormData’</a><br><br></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fetch </tag>
            
            <tag> FormData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转] typescript 2.7 编译选项详解</title>
      <link href="/2018/10/30/typescript-compiler-options/"/>
      <url>/2018/10/30/typescript-compiler-options/</url>
      
        <content type="html"><![CDATA[<p>typescript的编译选项一堆，微软爸爸写文档又马马虎虎 😂,  所以官方文档本身就不清不楚，似乎还有错误的地方。本文对各个选项进行实测，以期理解其含义以及每个选项会对编译或生成代码的影响。</p><p>typescript版本 2.7.2, 参考<a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">官方文档</a>。</p><p>test code: <a href="https://github.com/njleonzhang/typescript-options" target="_blank" rel="noopener">https://github.com/njleonzhang/typescript-options</a></p><h2 id="allowJs"><a href="#allowJs" class="headerlink" title="allowJs"></a>allowJs</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–allowJs</td><td>boolean</td><td>false</td><td>Allow JavaScript files to be compiled.</td></tr></tbody></table><p>是否会去编译<code>js</code>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leon.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> author = <span class="string">'leon'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; author &#125; <span class="keyword">from</span> <span class="string">'./leon'</span></span><br><span class="line"><span class="built_in">console</span>.log(author);</span><br></pre></td></tr></table></figure><p>allowJs设置为true的时候，生成的文件里会包含<code>leon.js</code>编译之后的版本，否则不会。</p><h2 id="allowSyntheticDefaultImports"><a href="#allowSyntheticDefaultImports" class="headerlink" title="allowSyntheticDefaultImports"></a>allowSyntheticDefaultImports</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–allowSyntheticDefaultImports</td><td>boolean</td><td>module === “system” or –esModuleInterop</td><td>Allow default imports from modules with no default export. This does not affect code emit, just typechecking.</td></tr></tbody></table><p>直接翻译过来是：是否允许从没有default导出的模块中导入default。不影响代码的编译结果，只影响typechecking。</p><p>实际测试，似乎没什么作用. 可能我理解不对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leon.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> author = <span class="string">'leon'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> leon <span class="keyword">from</span> <span class="string">'./leon'</span> <span class="comment">// 这句选项怎么变都对</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(leon.author);</span><br></pre></td></tr></table></figure><h2 id="allowUnreachableCode"><a href="#allowUnreachableCode" class="headerlink" title="allowUnreachableCode"></a>allowUnreachableCode</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–allowUnreachableCode</td><td>boolean</td><td>false</td><td>Do not report errors on unreachable code.</td></tr></tbody></table><p>无法到达的代码，是否报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1000</span>  <span class="comment">// error TS7027: Unreachable code detected.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="allowUnusedLabels"><a href="#allowUnusedLabels" class="headerlink" title="allowUnusedLabels"></a>allowUnusedLabels</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–allowUnusedLabels</td><td>boolean</td><td>false</td><td>Do not report errors on unused labels.</td></tr></tbody></table><p>无用的标签，是否报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">loop1:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">   loop2:         <span class="comment">// error TS7028: Unused label</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">continue</span> loop1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"i = "</span> + i + <span class="string">", j = "</span> + j);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alwaysStrict"><a href="#alwaysStrict" class="headerlink" title="alwaysStrict"></a>alwaysStrict</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–alwaysStrict</td><td>boolean</td><td>false</td><td>Parse in strict mode and emit “use strict” for each source file</td></tr></tbody></table><p>用严格模式来解析ts代码，并生成严格模式的js代码<br>关于严格模式参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">MDN的文档</a><br>官方文档说默认值是false, 实测默认值是<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsc index.ts</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">015</span>  <span class="comment">// error TS1121: Octal literals are not allowed in strict mode.</span></span><br><span class="line">+ <span class="number">197</span></span><br><span class="line">+ <span class="number">142</span>;</span><br></pre></td></tr></table></figure><h2 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl"></a>baseUrl</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–baseUrl</td><td>string</td><td></td><td>Base directory to resolve non-relative module names. See Module Resolution documentation for more details.</td></tr></tbody></table><p>解析非相对模块名的基准目录。查看模块解析文档了解详情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'test'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span> // 没有这句，则 error TS2307: Cannot find module 'test'.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–charset</td><td>string</td><td>“utf8”</td><td>The character set of the input files.</td></tr></tbody></table><p>指定输入文件的编码方式。（一般指ts文件）</p><h2 id="checkJs"><a href="#checkJs" class="headerlink" title="checkJs"></a>checkJs</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–checkJs</td><td>boolean</td><td>false</td><td>Report errors in .js files. Use in conjunction with –allowJs.</td></tr></tbody></table><p>和allowjs一起使用，js文件里有错误的时候，是否报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- checkJs true</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line">a(<span class="string">'1324'</span>) <span class="comment">// error TS2345: Argument of type '"1324"' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">i: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="declaration-和-declarationDir"><a href="#declaration-和-declarationDir" class="headerlink" title="declaration 和 declarationDir"></a>declaration 和 declarationDir</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–declaration <br> -d</td><td>boolean</td><td>false</td><td>Generates corresponding .d.ts file.</td></tr><tr><td>–declarationDir</td><td>string</td><td></td><td>Output directory for generated declaration files.</td></tr></tbody></table><p><code>declaration</code>指是否生成<code>.d.ts</code>文件.<br><code>declarationDir</code>指定生成的<code>.d.ts</code>文件的目录</p><h2 id="diagnostics"><a href="#diagnostics" class="headerlink" title="diagnostics"></a>diagnostics</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–diagnostics</td><td>boolean</td><td>false</td><td>Show diagnostic information.</td></tr></tbody></table><p>显示诊断信息</p><p>设置为true的时候，会生成类似下面的诊断报告：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Files:            <span class="number">2</span></span><br><span class="line">Lines:        <span class="number">19890</span></span><br><span class="line">Nodes:        <span class="number">91623</span></span><br><span class="line">Identifiers:  <span class="number">31621</span></span><br><span class="line">Symbols:      <span class="number">24094</span></span><br><span class="line">Types:         <span class="number">6581</span></span><br><span class="line">Memory used: <span class="number">60631</span>K</span><br><span class="line">I/O read:     <span class="number">0.00</span>s</span><br><span class="line">I/O write:    <span class="number">0.00</span>s</span><br><span class="line">Parse time:   <span class="number">0.29</span>s</span><br><span class="line">Bind time:    <span class="number">0.12</span>s</span><br><span class="line">Check time:   <span class="number">0.80</span>s</span><br><span class="line">Emit time:    <span class="number">0.02</span>s</span><br><span class="line">Total time:   <span class="number">1.23</span>s</span><br></pre></td></tr></table></figure><h2 id="disableSizeLimit"><a href="#disableSizeLimit" class="headerlink" title="disableSizeLimit"></a>disableSizeLimit</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–disableSizeLimit</td><td>boolean</td><td>false</td><td>Disable size limitation on JavaScript project.</td></tr></tbody></table><p>禁用JavaScript工程体积大小的限制。</p><blockquote><p>不懂啥意思，也不知道有啥用 :-(</p></blockquote><h2 id="downlevelIteration"><a href="#downlevelIteration" class="headerlink" title="downlevelIteration"></a>downlevelIteration</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–downlevelIteration</td><td>boolean</td><td>false</td><td>Provide full support for iterables in for..of, spread and destructuring when targeting ES5 or ES3.</td></tr></tbody></table><p>在生成目标代码为es5或者es3的时候，提供对 for..of, spread and destructuring语法的支持。</p><blockquote><p>相当于提供polyfill</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">4</span>, ...a]</span><br></pre></td></tr></table></figure><p>此选项为false时，转换为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">4</span>].concat(a);</span><br></pre></td></tr></table></figure></p><p>此选项为true时，转换成:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __read = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__read) || <span class="function"><span class="keyword">function</span> (<span class="params">o, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span> &amp;&amp; o[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> o;</span><br><span class="line">    <span class="keyword">var</span> i = m.call(o), r, ar = [], e;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ((n === <span class="keyword">void</span> <span class="number">0</span> || n-- &gt; <span class="number">0</span>) &amp;&amp; !(r = i.next()).done) ar.push(r.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123; e = &#123; <span class="attr">error</span>: error &#125;; &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (r &amp;&amp; !r.done &amp;&amp; (m = i[<span class="string">"return"</span>])) m.call(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123; <span class="keyword">if</span> (e) <span class="keyword">throw</span> e.error; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ar;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> __spread = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__spread) || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> ar = [], i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) ar = ar.concat(__read(<span class="built_in">arguments</span>[i]));</span><br><span class="line">    <span class="keyword">return</span> ar;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = __spread([<span class="number">4</span>], a);</span><br></pre></td></tr></table></figure></p><h2 id="emitBOM"><a href="#emitBOM" class="headerlink" title="emitBOM"></a>emitBOM</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–emitBOM</td><td>boolean</td><td>false</td><td>Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.</td></tr></tbody></table><p>生成的文件是否要带BOM头</p><h2 id="esModuleInterop"><a href="#esModuleInterop" class="headerlink" title="esModuleInterop"></a>esModuleInterop</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–esModuleInterop</td><td>boolean</td><td>false</td><td>Emit <strong>importStar and </strong>importDefault helpers for runtime babel ecosystem compatibility and enable –allowSyntheticDefaultImports for typesystem compatibility.</td></tr></tbody></table><p>生成的文件会为兼容babel而添加<code>__importStar</code>和<code>__importDefault</code>的helper.<br>这个选项会把<code>allowSyntheticDefaultImports</code>设置成true.</p><blockquote><p>类似<code>allowSyntheticDefaultImports</code>选项，实测这个选项为true和false并不影响生成的代码。具体什么情况会影响不太清楚。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">200</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a</span><br></pre></td></tr></table></figure><p>加不加这个选项，都生成如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line">exports.a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">exports[<span class="string">"default"</span>] = exports.a;</span><br></pre></td></tr></table></figure><h2 id="forceConsistentCasingInFileNames"><a href="#forceConsistentCasingInFileNames" class="headerlink" title="forceConsistentCasingInFileNames"></a>forceConsistentCasingInFileNames</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–forceConsistentCasingInFileNames</td><td>boolean</td><td>false</td><td>Disallow inconsistently-cased references to the same file.</td></tr></tbody></table><p>是否在导入文件的时候需要保证大小写一致。</p><blockquote><p>和文件名是否一致不重要，但多次导入的时候大小写一定要一致。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.ts</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./test'</span> <span class="comment">// 导入小写，没问题</span></span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'./Test'</span> <span class="comment">// 再导入大写，报错。 error TS1149: File name '/Users/leon/Documents/git/typescript-options/forceConsistentCasingInFileNames/Test.ts' differs from already included file name '/Users/leon/Documents/git/typescript-options/forceConsistentCasingInFileNames/test.ts' only in casing.</span></span><br></pre></td></tr></table></figure><h2 id="experimentalDecorators"><a href="#experimentalDecorators" class="headerlink" title="experimentalDecorators"></a>experimentalDecorators</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–experimentalDecorators</td><td>boolean</td><td>false</td><td>Enables experimental support for ES decorators.</td></tr></tbody></table><p>启动实验的装饰器功能。</p><h2 id="importHelpers"><a href="#importHelpers" class="headerlink" title="importHelpers"></a>importHelpers</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–importHelpers</td><td>boolean</td><td>false</td><td>Import emit helpers (e.g. <strong>extends, </strong>rest, etc..) from tslib</td></tr></tbody></table><p>是否从tslib里导入<strong>extends, </strong>rest等helper函数</p><blockquote><p>这个选项似乎已经没有什么用了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  name: <span class="string">'leon'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age: <span class="number">10</span>,</span><br><span class="line">  ...b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论此项如何设置，始终会转换成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __assign = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__assign) || <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s, i = <span class="number">1</span>, n = <span class="built_in">arguments</span>.length; i &lt; n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(s, p))</span><br><span class="line">            t[p] = s[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name: <span class="string">'leon'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = __assign(&#123; <span class="attr">age</span>: <span class="number">10</span> &#125;, b);</span><br></pre></td></tr></table></figure></p><h2 id="inlineSourceMap"><a href="#inlineSourceMap" class="headerlink" title="inlineSourceMap"></a>inlineSourceMap</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–inlineSourceMap</td><td>boolean</td><td>false</td><td>Emit a single file with source maps instead of having a separate file.</td></tr></tbody></table><p>是否生成inline的source map</p><p>上栗中的代码，加本选项编译，文件末尾会多出sourcemap:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//# sourceMappingURL= xxxxxxx</span></span><br></pre></td></tr></table></figure><h2 id="inlineSources"><a href="#inlineSources" class="headerlink" title="inlineSources"></a>inlineSources</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–inlineSourceMap</td><td>boolean</td><td>false</td><td>Emit the source alongside the sourcemaps within a single file; requires –inlineSourceMap or –sourceMap to be set.</td></tr></tbody></table><p>将代码与sourcemaps生成到一个文件中。</p><p>上栗中的代码，在加上此项进行编译，同样会在文件结尾加上sourceMappingURL，但生成的内容不同。暂时不太明白有什么实际上的区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceMappingURL = xxxxx</span><br></pre></td></tr></table></figure><h2 id="isolatedModules"><a href="#isolatedModules" class="headerlink" title="isolatedModules"></a>isolatedModules</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–isolatedModules</td><td>boolean</td><td>false</td><td>Transpile each file as a separate module (similar to “ts.transpileModule”).</td></tr></tbody></table><p>将每个文件当做一个独立的模块来转义<br>每个文件都需要是一个模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error TS1208: Cannot compile namespaces when the '--isolatedModules' flag is provided.</span></span><br></pre></td></tr></table></figure><p>另外次选项不能和<code>declaration</code>一起使用, 不太想的明白为什么 😂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TS5053: Option <span class="string">'declaration'</span> cannot be specified <span class="keyword">with</span> option <span class="string">'isolatedModules'</span>.</span><br></pre></td></tr></table></figure><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–jsx</td><td>string</td><td>“Preserve”</td><td>Support JSX in .tsx files: “React” or “Preserve”. See JSX.</td></tr></tbody></table><p>是否对jsx进行转换。一般不转译，把这个工作推迟给babel.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;text&gt;a&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>编译：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --jsx "React"</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (React.createElement(<span class="string">"text"</span>, <span class="literal">null</span>, <span class="string">"a"</span>));</span><br><span class="line">&#125;</span><br><span class="line">exports.a = a;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --jsx "Preserve"</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>a<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line">exports.a = a;</span><br></pre></td></tr></table></figure><h2 id="jsxFactory"><a href="#jsxFactory" class="headerlink" title="jsxFactory"></a>jsxFactory</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–jsxFactory</td><td>string</td><td>“React.createElement”</td><td>Specify the JSX factory function to use when targeting react JSX emit, e.g. React.createElement or h.</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;text&gt;a&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --jsx "React" --jsxFactory h</span></span><br><span class="line"><span class="comment">// 请与上个例子对比。</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h(<span class="string">"text"</span>, <span class="literal">null</span>, <span class="string">"a"</span>));</span><br><span class="line">&#125;</span><br><span class="line">exports.a = a;</span><br></pre></td></tr></table></figure><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–lib</td><td>string[]</td><td></td><td>List of library files to be included in the compilation.<br>Possible values are:  <br>► <code>ES5</code> <br>► <code>ES6</code> <br>► <code>ES2015</code> <br>► <code>ES7</code> <br>► <code>ES2016</code> <br>► <code>ES2017</code> <br>► <code>ESNext</code> <br>► <code>DOM</code> <br>► <code>DOM.Iterable</code> <br>► <code>WebWorker</code> <br>► <code>ScriptHost</code> <br>► <code>ES2015.Core</code> <br>► <code>ES2015.Collection</code> <br>► <code>ES2015.Generator</code> <br>► <code>ES2015.Iterable</code> <br>► <code>ES2015.Promise</code> <br>► <code>ES2015.Proxy</code> <br>► <code>ES2015.Reflect</code> <br>► <code>ES2015.Symbol</code> <br>► <code>ES2015.Symbol.WellKnown</code> <br>► <code>ES2016.Array.Include</code> <br>► <code>ES2017.object</code> <br>► <code>ES2017.SharedMemory</code> <br>► <code>ES2017.TypedArrays</code> <br>► <code>esnext.asynciterable</code> <br>► <code>esnext.array</code> <br>► <code>esnext.promise</code> <br><br> Note: If <code>–lib</code> is not specified a default list of librares are injected. The default libraries injected are:  <br> ► For <code>–target ES5</code>: <code>DOM,ES5,ScriptHost</code><br>  ► For <code>–target ES6</code>: <code>DOM,ES6,DOM.Iterable,ScriptHost</code></td></tr></tbody></table><p>编译时，可以包括的库文件的列表。默认会inject一些库的定义。<br>会严重实际上是影响编译是否能成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsc lib/index.ts --lib ES5</span></span><br><span class="line"><span class="comment">// error TS2693: 'Promise' only refers to a type, but is being used as a value here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tsc lib/index.ts --lib ES6</span></span><br><span class="line"><span class="comment">// build pass</span></span><br></pre></td></tr></table></figure><h2 id="listEmittedFiles"><a href="#listEmittedFiles" class="headerlink" title="listEmittedFiles"></a>listEmittedFiles</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–listEmittedFiles</td><td>boolean</td><td>false</td><td>Print names of generated files part of the compilation.</td></tr><tr><td>–listFiles</td><td>boolean</td><td>false</td><td>Print names of files part of the compilation.</td></tr></tbody></table><p>listEmittedFiles：列出编译生成文件<br>listFiles：列出参与编译的源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// tsc lib/index.ts --lib ES6 --listEmittedFiles --listFiles</span><br><span class="line"></span><br><span class="line">// 生成的文件</span><br><span class="line">TSFILE: /Users/leon/Documents/git/typescript-options/lib/index.js</span><br><span class="line"></span><br><span class="line">// 参与编译的文件</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es5.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.reflect.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.proxy.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.iterable.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.symbol.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.promise.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.generator.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.collection.d.ts</span><br><span class="line">/Users/leon/.nvm/versions/node/v8.7.0/lib/node_modules/typescript/lib/lib.es2015.core.d.ts</span><br><span class="line">lib/index.ts</span><br></pre></td></tr></table></figure><p>从例子我们也能看出<code>--lib</code>的作用</p><h2 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–locale</td><td>string</td><td></td><td>The locale to use to show error messages, e.g. en-us. <br>Possible values are:  <br>► English (US): <code>en</code> <br>► Czech: <code>cs</code> <br>► German: <code>de</code> <br>► Spanish: <code>es</code> <br>► French: <code>fr</code> <br>► Italian: <code>it</code> <br>► Japanese: <code>ja</code> <br>► Korean: <code>ko</code> <br>► Polish: <code>pl</code> <br>► Portuguese(Brazil): <code>pt-BR</code> <br>► Russian: <code>ru</code> <br>► Turkish: <code>tr</code> <br>► Simplified Chinese: <code>zh-CN</code>  <br>► Traditional Chinese: <code>zh-TW</code></td></tr></tbody></table><p>定义报错的message语言。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// --locale zh-CN</span><br><span class="line">error TS2693: “Promise”仅表示类型，但在此处却作为值使用。</span><br></pre></td></tr></table></figure><h2 id="sourceMap-mapRoot-和-sourceRoot"><a href="#sourceMap-mapRoot-和-sourceRoot" class="headerlink" title="sourceMap, mapRoot 和 sourceRoot"></a>sourceMap, mapRoot 和 sourceRoot</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–sourceMap</td><td>boolean</td><td>false</td><td>Generates corresponding .map file.</td></tr><tr><td>–mapRoot</td><td>string</td><td></td><td>Specifies the location where debugger should locate map files instead of generated locations. Use this flag if the .map files will be located at run-time in a different location than the .js files. The location specified will be embedded in the sourceMap to direct the debugger where the map files will be located.</td></tr><tr><td>–sourceRoot</td><td>string</td><td></td><td>Specifies the location where debugger should locate TypeScript files instead of source locations. Use this flag if the sources will be located at run-time in a different location than that at design-time. The location specified will be embedded in the sourceMap to direct the debugger where the source files will be located.</td></tr></tbody></table><p><code>sourceMap</code>: 生成sourceMap</p><p><code>mapRoot</code>: 指定调试器去什么位置寻找 <code>map</code> 文件. 当运行时<code>.map</code> 文件和对应的 <code>.js</code> 文件不在同一位置时，需要使用本参数指定 <code>map</code> 的位置. 指定的位置会被内嵌到 <code>sourceMap</code> 中告诉调试器 <code>map</code> 文件所在的位置.<br><code>sourceRoot</code>: 指定调试器去什么位置寻找 <code>ts</code> 文件. 当运行时 <code>.map</code> 文件和对应的 <code>.js</code> 文件不在同一位置时，需要使用本参数指定 <code>map</code> 的位置. 指定的位置会被内嵌到 <code>sourceMap</code> 中告诉调试器 <code>ts</code> 文件所在的位置.</p><blockquote><p>用法猜测：对于商业代码，一般以会把map文件直接放出去，而会放到内网的某个地方，通过这个选项，可以帮助开发人员在内网去调试代码。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tsc lib/index.ts --sourceMap --mapRoot <span class="string">'\\10.32.0.1\map\1'</span></span><br><span class="line"></span><br><span class="line">xxx code xxxx</span><br><span class="line">//<span class="comment"># sourceMappingURL=//10.32.0.1/map/1/index.js.map</span></span><br></pre></td></tr></table></figure><h2 id="maxNodeModuleJsDepth"><a href="#maxNodeModuleJsDepth" class="headerlink" title="maxNodeModuleJsDepth"></a>maxNodeModuleJsDepth</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–maxNodeModuleJsDepth</td><td>number</td><td>0</td><td>The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with –allowJs.</td></tr></tbody></table><p>去 <code>node_modules</code> 里搜索代码的层级, 默认是0.</p><p>按照这个说法，似乎默认情况下不应该应许去加载<code>node_modules</code>目录下的文件。但是事实上，默认情况下，<code>node_modules</code>下的模块是会被加载的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- maxNodeModuleJsDepth</span><br><span class="line">  - index.ts</span><br><span class="line">  - node_modules</span><br><span class="line">    - test1</span><br><span class="line">      - index.js</span><br><span class="line">      - node_modules</span><br><span class="line">        - test2</span><br><span class="line">          - index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// maxNodeModuleJsDepth/index.ts</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'test1'</span> <span class="comment">// maxNodeModuleJsDepth设置成什么，这句总是对的</span></span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'test2'</span> <span class="comment">// 这句总是错的。</span></span><br></pre></td></tr></table></figure><blockquote><p>可能我的理解有误。</p></blockquote><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–module<br> -m</td><td>string</td><td>target === “ES3” or “ES5” ? “CommonJS” : “ES6”</td><td>Specify module code generation: <code>“None”</code>, <code>“CommonJS”</code>, <code>“AMD”</code>, <code>“System”</code>, <code>“UMD”</code>, <code>“ES6”</code>, <code>“ES2015”</code> or <code>“ESNext”</code>.<br>► Only <code>“AMD”</code> and <code>“System”</code> can be used in conjunction with <code>–outFile</code>.<br>► <code>“ES6”</code> and <code>“ES2015”</code> values may be used when targeting <code>“ES5”</code> or lower.</td></tr></tbody></table><p>指定生成代码的模块格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --module CommonJs</span></span><br><span class="line"></span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">exports.test = test;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --module AMD</span></span><br><span class="line"></span><br><span class="line">define([<span class="string">"require"</span>, <span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    exports.__esModule = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exports.test = test;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -module system</span></span><br><span class="line">System.register([], <span class="function"><span class="keyword">function</span> (<span class="params">exports_1, context_1</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="keyword">var</span> __moduleName = context_1 &amp;&amp; context_1.id;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exports_1(<span class="string">"test"</span>, test);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setters: [],</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -module UMD</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> v = factory(<span class="built_in">require</span>, exports);</span><br><span class="line">        <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="built_in">module</span>.exports = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define([<span class="string">"require"</span>, <span class="string">"exports"</span>], factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    exports.__esModule = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exports.test = test;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -module es6 or es2015 or esnext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–target <br> -t</td><td>string</td><td>“es3”</td><td>Specify ECMAScript target version: “ES3” (default), “ES5”, “ES6”/“ES2015”, “ES2016”, “ES2017” or “ESNext”. <br> Note: “ESNext” targets latest supported ES proposed features.</td></tr></tbody></table><p>指定目标代码的版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --target es3</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> __assign = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__assign) || <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s, i = <span class="number">1</span>, n = <span class="built_in">arguments</span>.length; i &lt; n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(s, p))</span><br><span class="line">            t[p] = s[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        resolve(__assign(&#123; <span class="attr">c</span>: <span class="number">3</span> &#125;, a));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">exports.test = test;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --target es5</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> __assign = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__assign) || <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s, i = <span class="number">1</span>, n = <span class="built_in">arguments</span>.length; i &lt; n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(s, p))</span><br><span class="line">            t[p] = s[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        resolve(__assign(&#123; <span class="attr">c</span>: <span class="number">3</span> &#125;, a));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">exports.test = test;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --target es6</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        resolve(<span class="built_in">Object</span>.assign(&#123; <span class="attr">c</span>: <span class="number">3</span> &#125;, a));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --target esnext</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            c: <span class="number">3</span>,</span><br><span class="line">            ...a</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="moduleResolution"><a href="#moduleResolution" class="headerlink" title="moduleResolution"></a>moduleResolution</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–moduleResolution</td><td>string</td><td>module === “AMD” or “System” or “ES6” ? “Classic” : “Node”</td><td>Determine how modules get resolved. Either “Node” for Node.js/io.js style resolution, or “Classic”. See Module Resolution documentation for more details.</td></tr></tbody></table><p>定义typescript如何去查找module，详情查看<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noopener">官方说法</a></p><blockquote><p>如果遇到node_modules里的模块找不到的情况，可以尝试把此项设置为node</p></blockquote><h2 id="newLine"><a href="#newLine" class="headerlink" title="newLine"></a>newLine</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–newLine</td><td>string</td><td></td><td>Use the specified end of line sequence to be used when emitting files: “crlf” (windows) or “lf” (unix).”</td></tr></tbody></table><p>生成的代码里使用什么样的换行符</p><h2 id="noEmit"><a href="#noEmit" class="headerlink" title="noEmit"></a>noEmit</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noEmit</td><td>boolean</td><td>false</td><td>Do not emit outputs.</td></tr><tr><td>–noEmitHelpers</td><td>boolean</td><td>false</td><td>Do not generate custom helper functions like __extends in compiled output.</td></tr></tbody></table><p>noEmit: 不生成编译结果。</p><blockquote><p>😂 那还编译个毛。。。。</p></blockquote><p>noEmitHelpers: 不生成helper函数. 设置为true，则<code>__assign</code>，<code>__extends</code>等helper函数的实现，不会出现在生成的文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    ...a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --noEmitHelpers true</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;</span><br><span class="line">        a: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> __assign(&#123; <span class="attr">b</span>: <span class="number">2</span> &#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --noEmitHelpers false</span></span><br><span class="line"><span class="keyword">var</span> __assign = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__assign) || <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s, i = <span class="number">1</span>, n = <span class="built_in">arguments</span>.length; i &lt; n; i++) &#123;</span><br><span class="line">        s = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(s, p))</span><br><span class="line">            t[p] = s[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;</span><br><span class="line">        a: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> __assign(&#123; <span class="attr">b</span>: <span class="number">2</span> &#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="noEmitOnError"><a href="#noEmitOnError" class="headerlink" title="noEmitOnError"></a>noEmitOnError</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noEmitOnError</td><td>boolean</td><td>false</td><td>Do not emit outputs if any errors were reported.</td></tr></tbody></table><p>编译有错误的时候，是否还生成文件。</p><h2 id="noErrorTruncation"><a href="#noErrorTruncation" class="headerlink" title="noErrorTruncation"></a>noErrorTruncation</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noEmitOnError</td><td>boolean</td><td>false</td><td>Do not truncate error messages.</td></tr></tbody></table><p>不截断错误消息</p><h2 id="noFallthroughCasesInSwitch"><a href="#noFallthroughCasesInSwitch" class="headerlink" title="noFallthroughCasesInSwitch"></a>noFallthroughCasesInSwitch</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>—-noFallthroughCasesInSwitch</td><td>boolean</td><td>false</td><td>Report errors for fallthrough cases in switch statement.</td></tr></tbody></table><p>不允许swith中存在有内容的但没有break的case.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">// error TS7029: Fallthrough case in switch.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="noImplicitAny-noImplicitReturns-noImplicitThis-and-noImplicitUseStrict"><a href="#noImplicitAny-noImplicitReturns-noImplicitThis-and-noImplicitUseStrict" class="headerlink" title="noImplicitAny, noImplicitReturns, noImplicitThis and noImplicitUseStrict"></a>noImplicitAny, noImplicitReturns, noImplicitThis and noImplicitUseStrict</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noImplicitAny</td><td>boolean</td><td>false</td><td>Raise error on expressions and declarations with an implied any type.</td></tr><tr><td>–noImplicitReturns</td><td>boolean</td><td>false</td><td>Report error when not all code paths in function return a value.</td></tr><tr><td>–noImplicitThis</td><td>boolean</td><td>false</td><td>Raise error on this expressions with an implied any type.</td></tr><tr><td>–noImplicitUseStrict</td><td>boolean</td><td>false</td><td>Do not emit “use strict” directives in module output.</td></tr></tbody></table><p>noImplicitAny 不允许使用隐式的使用<code>any</code><br>noImplicitReturns 不允许有隐式的return, 即所有分支都要显示的return。实测似乎无效。<br>noImplicitThis 不允许使用隐式的this，需要明确this的类型<br>noImplicitUseStrict 生成的文件中是否使用”use strict”。这TM和这选项的名字完全不是一个意思啊。为true的时候，生成的代码不会添加”use strict”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --noImplicitAny true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params">b</span>) </span>&#123;  <span class="comment">// error TS7006: Parameter 'b' implicitly has an 'any' type.</span></span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --noImplicitReturns true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a2</span>(<span class="params">b</span>) </span>&#123;  <span class="comment">// 编译通过，与文档似乎不符</span></span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --noImplicitThis true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span>(<span class="params">b: any</span>) </span>&#123; <span class="comment">// error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="noLib"><a href="#noLib" class="headerlink" title="noLib"></a>noLib</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noLib</td><td>boolean</td><td>false</td><td>Do not include the default library file (lib.d.ts).</td></tr></tbody></table><p>编译的时候不加载<code>lib.d.ts</code>.</p><blockquote><p>那你还能编译？😂</p></blockquote><h2 id="noResolve"><a href="#noResolve" class="headerlink" title="noResolve"></a>noResolve</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noResolve</td><td>boolean</td><td>false</td><td>Do not add triple-slash references or module import targets to the list of compiled files.</td></tr></tbody></table><p>编译时，忽略<code>///&lt;reference path&gt;</code>和<code>import</code>引入的文件。</p><blockquote><p>😂这种选项到底有啥用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path="./my.d.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">'./Test'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my.d.ts</span></span><br><span class="line">declare <span class="built_in">module</span> A &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">number, string</span>): <span class="title">any</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsc noResolve/index.ts  --listFiles</span></span><br><span class="line"></span><br><span class="line">/Users/leon/.nvm/versions/node/v8<span class="number">.7</span><span class="number">.0</span>/lib/node_modules/typescript/lib/lib.d.ts</span><br><span class="line">noResolve/my.d.ts</span><br><span class="line">/Users/leon/Documents/git/typescript-options/noResolve/Test.ts</span><br><span class="line">noResolve/index.ts</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsc noResolve/index.ts --noResolve --listFiles</span></span><br><span class="line">noResolve/index.ts(<span class="number">3</span>,<span class="number">19</span>): error TS2307: Cannot find <span class="built_in">module</span> <span class="string">'./Test'</span>.</span><br><span class="line">/Users/leon/.nvm/versions/node/v8<span class="number">.7</span><span class="number">.0</span>/lib/node_modules/typescript/lib/lib.d.ts</span><br><span class="line">noResolve/index.ts</span><br></pre></td></tr></table></figure><h2 id="noStrictGenericChecks"><a href="#noStrictGenericChecks" class="headerlink" title="noStrictGenericChecks"></a>noStrictGenericChecks</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noStrictGenericChecks</td><td>boolean</td><td>false</td><td>Disable strict checking of generic signatures in function types.</td></tr></tbody></table><p>禁用严格的函数泛型检查。</p><blockquote><p>不清楚具体指什么。有知道的朋友请指教</p></blockquote><h2 id="noUnusedLocals-noUnusedParameters"><a href="#noUnusedLocals-noUnusedParameters" class="headerlink" title="noUnusedLocals, noUnusedParameters"></a>noUnusedLocals, noUnusedParameters</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–noUnusedLocals</td><td>boolean</td><td>false</td><td>Report errors on unused locals.</td></tr><tr><td>–noUnusedParameters</td><td>boolean</td><td>false</td><td>Report errors on unused parameters.</td></tr></tbody></table><p>noUnusedLocals: 不允许无用的临时变量<br>noUnusedParameters: 不允许未使用的参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123; <span class="comment">// error TS6133: 'b' is declared but its value is never read.</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>  <span class="comment">// error TS6133: 'a' is declared but its value is never read.</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="outDir-outFile"><a href="#outDir-outFile" class="headerlink" title="outDir, outFile"></a>outDir, outFile</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–outDir</td><td>string</td><td></td><td>Redirect output structure to the directory.</td></tr><tr><td>–outFile</td><td>string</td><td></td><td>Concatenate and emit output to single file. The order of concatenation is determined by the list of files passed to the compiler on the command line along with triple-slash references and imports. See output file order documentation for more details.</td></tr></tbody></table><p>outDir: 把导出文件重定向到某个目录<br>outFile: 把所有的文件拼接并生成到单个文件中。</p><h2 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>path</td><td>string</td><td></td><td>Redirect output structure to the directory.</td></tr></tbody></table><p>只能用于tsconfig中，解析模块的时候的路径，地址是相对于baseUrl的。详情查看<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noopener">官方说法</a></p><h2 id="preserveConstEnums"><a href="#preserveConstEnums" class="headerlink" title="preserveConstEnums"></a>preserveConstEnums</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>preserveConstEnums</td><td>boolean</td><td>false</td><td>Do not erase const enum declarations in generated code. See const enums documentation for more details.</td></tr></tbody></table><p>从生成的代码中擦除静态枚举的声明。</p><blockquote><p>实测怎么设置似乎都不起作用。😂</p></blockquote><h2 id="preserveSymlinks"><a href="#preserveSymlinks" class="headerlink" title="preserveSymlinks"></a>preserveSymlinks</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>preserveSymlinks</td><td>boolean</td><td>false</td><td>Do not resolve symlinks to their real path; treat a symlinked file like a real one.</td></tr></tbody></table><p>不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。</p><blockquote><p>不太明白啥意思。测试了<code>import</code>一个<code>linux</code>软连接，但是这个选项并没有什么区别。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// realIndex.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts --&gt; realIndex.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此选项并不影响 tesc index.ts 的编译</span></span><br></pre></td></tr></table></figure><h2 id="pretty"><a href="#pretty" class="headerlink" title="pretty"></a>pretty</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–pretty</td><td>boolean</td><td>false</td><td>Stylize errors and messages using color and context.</td></tr></tbody></table><p>对console上错误和消息做颜色和样式的美化处理。</p><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–project <br> -p</td><td>string</td><td></td><td>Compile a project given a valid configuration file. The argument can be a file path to a valid JSON configuration file, or a directory path to a directory containing a tsconfig.json file. See tsconfig.json documentation for more details.</td></tr></tbody></table><p>指定一个<code>tsconfig.json</code>文件</p><h2 id="removeComments"><a href="#removeComments" class="headerlink" title="removeComments"></a>removeComments</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–removeComments</td><td>boolean</td><td>false</td><td>Remove all comments except copy-right header comments beginning with /*!</td></tr></tbody></table><p>删除注释</p><h2 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–rootDir</td><td>string</td><td></td><td>Specifies the root directory of input files. Only use to control the output directory structure with –outDir.</td></tr></tbody></table><p>指定输入文件的根目录，仅和outDir一起用于管理输出目录的结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./test/index.ts</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsc test/index.ts --outDir ./test/dist/ --rootDir .</span></span><br><span class="line">生成 ./test/dist/test/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsc test/index.ts --outDir ./test/dist/</span></span><br><span class="line">生成 ./test/dist/index.js</span><br></pre></td></tr></table></figure><h2 id="rootDirs"><a href="#rootDirs" class="headerlink" title="rootDirs"></a>rootDirs</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>rootDirs</td><td>string[]</td><td></td><td>List of root folders whose combined content represent the structure of the project at runtime. See Module Resolution documentation for more details.</td></tr></tbody></table><p>指定多个根目录，并以此确定运行时的项目结构。<br><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#virtual-directories-with-rootdirs" target="_blank" rel="noopener">详见文档</a>.</p><blockquote><p>说人话：允许将不同的目录，通过这个选项都指定为根目录，从而使导入文件的时候比较方便。</p></blockquote><h2 id="skipLibCheck"><a href="#skipLibCheck" class="headerlink" title="skipLibCheck"></a>skipLibCheck</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–skipLibCheck</td><td>boolean</td><td>false</td><td>Skip type checking of all declaration files (*.d.ts).</td></tr></tbody></table><p>忽略所有的声明文件（ *.d.ts）的类型检查。</p><blockquote><p>暂时不知道怎么用，尝试了几种方法似乎都不起作用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = [<span class="number">1</span>, ,<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.d.ts</span></span><br><span class="line"><span class="keyword">export</span> declare <span class="keyword">let</span> a: number[];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">'./test'</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">'12'</span></span><br></pre></td></tr></table></figure><p>加不加这个选项都会报错：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TS2322: Type <span class="string">'"12"'</span> is not assignable to type <span class="string">'number'</span>.</span><br></pre></td></tr></table></figure></p><h2 id="strict"><a href="#strict" class="headerlink" title="strict"></a>strict</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–strict</td><td>boolean</td><td>false</td><td>Enable all strict type checking options. <br>Enabling <code>–strict</code> enables <code>–noImplicitAny</code>, <code>–noImplicitThis</code>, <code>–alwaysStrict</code>, <code>–strictNullChecks</code>, <code>–strictFunctionTypes</code> and <code>–strictPropertyInitialization</code>.</td></tr></tbody></table><p>开启一系列的强制检测。</p><h2 id="strictFunctionTypes-strictPropertyInitialization-strictNullChecks"><a href="#strictFunctionTypes-strictPropertyInitialization-strictNullChecks" class="headerlink" title="strictFunctionTypes, strictPropertyInitialization, strictNullChecks"></a>strictFunctionTypes, strictPropertyInitialization, strictNullChecks</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–strictFunctionTypes</td><td>boolean</td><td>false</td><td>Disable bivariant parameter checking for function types.</td></tr><tr><td>–strictPropertyInitialization</td><td>boolean</td><td>false</td><td>Enusre non-undefined class properties are initialized in the constructor.</td></tr><tr><td>–strictNullChecks</td><td>boolean</td><td>false</td><td>In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void).</td></tr></tbody></table><p><code>strictFunctionTypes</code>: 启用函数类型的严格检查。详见： <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html</a></p><p><code>strictPropertyInitialization</code>: 要求未定义的class成员变量，一定要在构造函数里进行初始化。</p><p><code>strictNullChecks</code>: <code>null</code> 和 <code>undefined</code>, 不属于包含在其他任何类型，所以他们只能 <code>null</code> 只能赋值给 <code>null</code> 类型或 <code>any</code> <code>类型，undefined</code> 只能赋值给 <code>undefined</code> 类型或者 <code>any</code> 类型。但有一个例外: <code>undefined</code> 可以被赋值给 <code>void</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">  age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(age: number) &#123; <span class="comment">// error TS2564: Property 'name' has no initializer and is not definitely assigned in the constructor.</span></span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1: number = <span class="literal">null</span>       <span class="comment">// error TS2322: Type 'null' is not assignable to type 'number'.</span></span><br><span class="line"><span class="keyword">let</span> a2: string = <span class="literal">undefined</span>  <span class="comment">// error TS2322: Type 'undefined' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><h2 id="stripInternal"><a href="#stripInternal" class="headerlink" title="stripInternal"></a>stripInternal</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–stripInternal</td><td>boolean</td><td>false</td><td>Do not emit declarations for code that has an /*<em> @internal </em>/ JSDoc annotation.</td></tr></tbody></table><p>实验属性。不为有<code>/** @internal */</code>标记的代码生成declaration</p><h2 id="suppressExcessPropertyErrors"><a href="#suppressExcessPropertyErrors" class="headerlink" title="suppressExcessPropertyErrors"></a>suppressExcessPropertyErrors</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–suppressExcessPropertyErrors</td><td>boolean</td><td>false</td><td>Suppress excess property checks for object literals.</td></tr></tbody></table><p>不对对象自变量的额外属性进行类型检测</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">  age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(age: number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: A = &#123;</span><br><span class="line">  name: <span class="string">'leon'</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">  gender: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --suppressExcessPropertyErrors false</span></span><br><span class="line">error TS2322: Type <span class="string">'&#123; name: string; age: number; gender: string; &#125;'</span> is not assignable to type <span class="string">'A'</span>.</span><br><span class="line"><span class="built_in">Object</span> literal may only specify known properties, and <span class="string">'gender'</span> does not exist <span class="keyword">in</span> type <span class="string">'A'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">//  --suppressExcessPropertyErrors true</span></span><br><span class="line">pass</span><br></pre></td></tr></table></figure><h2 id="suppressImplicitAnyIndexErrors"><a href="#suppressImplicitAnyIndexErrors" class="headerlink" title="suppressImplicitAnyIndexErrors"></a>suppressImplicitAnyIndexErrors</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–suppressImplicitAnyIndexErrors</td><td>boolean</td><td>false</td><td>Suppress –noImplicitAny errors for indexing objects lacking index signatures. See issue #1232 for more details.</td></tr></tbody></table><p>修复<a href="https://github.com/Microsoft/TypeScript/issues/1232#issuecomment-64510362" target="_blank" rel="noopener">#1232</a>的一个问题。</p><h2 id="traceResolution"><a href="#traceResolution" class="headerlink" title="traceResolution"></a>traceResolution</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–traceResolution</td><td>boolean</td><td>false</td><td>Report module resolution log messages.</td></tr></tbody></table><p>打印出module resolve过程的log。当moudle找不到的时候，可以打出log进行排查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Module resolution kind is not specified, using <span class="string">'NodeJs'</span>.</span><br><span class="line">Loading <span class="built_in">module</span> <span class="keyword">as</span> file / folder, candidate <span class="built_in">module</span> location <span class="string">'/Users/leon/Documents/git/typescript-options/skipLibCheck/test'</span>, target file type<span class="string">'TypeScript'</span>.</span><br><span class="line">File <span class="string">'/Users/leon/Documents/git/typescript-options/skipLibCheck/test.ts'</span> does not exist.</span><br><span class="line">File <span class="string">'/Users/leon/Documents/git/typescript-options/skipLibCheck/test.tsx'</span> does not exist.</span><br><span class="line">File <span class="string">'/Users/leon/Documents/git/typescript-options/skipLibCheck/test.d.ts'</span> exist - use it <span class="keyword">as</span> a name resolution result.</span><br></pre></td></tr></table></figure><h2 id="types-typeRoots"><a href="#types-typeRoots" class="headerlink" title="types, typeRoots"></a>types, typeRoots</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–types</td><td>string[]</td><td></td><td>List of names of type definitions to include. See @types, –typeRoots and –types for more details.</td></tr><tr><td>–typeRoots</td><td>string[]</td><td></td><td>List of folders to include type definitions from. See @types, –typeRoots and –types for more details.</td></tr></tbody></table><p>指定tyes文件列表和目录列表。</p><blockquote><p>当你import一个第三方库的时候，ts会根据这个库的package.json里的<code>types</code> 或者 <code>typings</code>属性指定的目录去加载type. 可以参照<a href="https://unpkg.com/vue/package.json" target="_blank" rel="noopener">vue的package.json</a>和<a href="https://unpkg.com/antd/package.json" target="_blank" rel="noopener">antd的package.json</a></p></blockquote><h2 id="emitDecoratorMetadata"><a href="#emitDecoratorMetadata" class="headerlink" title="emitDecoratorMetadata"></a>emitDecoratorMetadata</h2><table><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Desc</th></tr></thead><tbody><tr><td>–emitDecoratorMetadata</td><td>boolean</td><td>false</td><td>Emit design-type metadata for decorated declarations in source. See issue #2577 for details.</td></tr></tbody></table><blockquote><p>关于ts的装饰器，暂未研究，有空再看。 😂</p></blockquote><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://www.njleonzhang.com/2018/03/24/typescript-compiler-options.html" target="_blank" rel="noopener">typescript 2.7 编译选项详解</a><br><br></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> 转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular学习笔记</title>
      <link href="/2018/09/16/learn-angular/"/>
      <url>/2018/09/16/learn-angular/</url>
      
        <content type="html"><![CDATA[<p>「 Angular 4.0从入门到实战 打造股票管理网站」学习笔记<br><a id="more"></a></p><h1 id="init"><a href="#init" class="headerlink" title="init"></a>init</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 yarnpkg 只需要设置一次</span></span><br><span class="line">ng config -g cli.packageManager yarn</span><br><span class="line"><span class="comment">#  新建项目         有路由, 无测试, scss</span></span><br><span class="line">ng new <span class="variable">$project</span> --routing -S --style=scss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 material</span></span><br><span class="line">yarnpkg add @angular/material @angular/cdk @angular/animations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 component</span></span><br><span class="line">ng g c <span class="variable">$name</span></span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    组件,</span><br><span class="line">    指令,</span><br><span class="line">    管道</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    依赖模块</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    服务</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [</span><br><span class="line">    主组件</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><figure class="image-box">                <img src="/img/learn-angular/001.png" alt="component" title="" class="">                <p>component</p>            </figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><figure class="image-box">                <img src="/img/learn-angular/002.png" alt="route" title="" class="">                <p>route</p>            </figure><h2 id="app-routing-module-ts"><a href="#app-routing-module-ts" class="headerlink" title="app-routing.module.ts"></a><code>app-routing.module.ts</code></h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  <span class="comment">// 路由重定向</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirectTo: <span class="string">'/home'</span>,</span><br><span class="line">    pathMath: <span class="string">'full'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 基本路由配置</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'home'</span>,</span><br><span class="line">    component: HomeComponent,</span><br><span class="line">    data: [</span><br><span class="line">      &#123;</span><br><span class="line">        isProd: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'children'</span>,</span><br><span class="line">    <span class="comment">// 子路由</span></span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">''</span>,</span><br><span class="line">        component: Children1Component,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'xxx/:id'</span>,</span><br><span class="line">        component: Children2Component,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 默认路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'**'</span>,</span><br><span class="line">    redirectTo: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="html-中"><a href="#html-中" class="headerlink" title="html 中"></a>html 中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- routerLink数组,   queryParams 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/product', id]"</span> [<span class="attr">queryParams</span>]=<span class="string">"&#123;debug: 1&#125;"</span>&gt;</span>XXXX<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在标签下面展示路由内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="component-ts"><a href="#component-ts" class="headerlink" title="component.ts"></a>component.ts</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.router.navigate([<span class="string">"/"</span>, id], &#123;</span><br><span class="line">  queryParams: &#123;</span><br><span class="line">    debug: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> routeInfo: ActivatedRoute</span>) &#123;</span><br><span class="line">  routeInfo.params.subscribe(<span class="function">(<span class="params">params: Params</span>) =&gt;</span> <span class="keyword">this</span>.productId = params[<span class="string">"id"</span>]);</span><br><span class="line">  routeInfo.queryParams.subscribe(<span class="function">(<span class="params">params: Params</span>) =&gt;</span> <span class="keyword">this</span>.test = params[<span class="string">"test"</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.id = routeInfo.snapshot.params[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 路由中配置 data: [&#123;isprod: true&#125;]</span></span><br><span class="line">  <span class="keyword">this</span>.isProd = routeInfo.snapshot.data[<span class="number">0</span>][<span class="string">'isProd'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="辅助路由"><a href="#辅助路由" class="headerlink" title="辅助路由"></a>辅助路由</h2><figure class="image-box">                <img src="/img/learn-angular/003.png" alt="aux" title="" class="">                <p>aux</p>            </figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'product/:id'</span>,</span><br><span class="line">  component: ProductComponent,</span><br><span class="line">  <span class="comment">// 在路由激活之前获取数据</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    product: ProductResolveGuard</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 处理导航到某个路由</span></span><br><span class="line">  canActivate: [LoginGuard],</span><br><span class="line">  <span class="comment">// 处理从当前路由离开</span></span><br><span class="line">  canDeactivate: [UnsavedGuard],</span><br><span class="line">  data: [&#123;</span><br><span class="line">    isProd: <span class="literal">true</span></span><br><span class="line">  &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="canActivate"><a href="#canActivate" class="headerlink" title="canActivate"></a>canActivate</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoginGuard <span class="keyword">implements</span> CanActivate &#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    route: ActivatedRouteSnapshot,</span><br><span class="line">    state: RouterStateSnapshot</span><br><span class="line">  ): Observable&lt;<span class="built_in">boolean</span>&gt; | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loggedIn: <span class="built_in">boolean</span> = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">if</span> (!loggedIn) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'LoginGuard:用户未登录'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loggedIn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CanDeactivate"><a href="#CanDeactivate" class="headerlink" title="CanDeactivate"></a>CanDeactivate</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UnsavedGuard <span class="keyword">implements</span> CanDeactivate&lt;ProductComponent&gt; &#123;</span><br><span class="line">  canDeactivate() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'你还没有保存.确定要离开么?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductResolveGuard <span class="keyword">implements</span> Resolve&lt;ProductComponent&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  resolve(</span><br><span class="line">    route: ActivatedRouteSnapshot,</span><br><span class="line">    state: RouterStateSnapshot</span><br><span class="line">  ): Observable&lt;ProductComponent&gt; | <span class="built_in">Promise</span>&lt;ProductComponent&gt; | ProductComponent &#123;</span><br><span class="line">    <span class="keyword">let</span> productId: <span class="built_in">number</span> = route.params[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (productId == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.navigate([<span class="string">'/home'</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><figure class="image-box">                <img src="/img/learn-angular/004.png" alt="DI" title="" class="">                <p>DI</p>            </figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">providers: [</span><br><span class="line">  LoggerService,</span><br><span class="line">  &#123;</span><br><span class="line">    provide: ProductService,</span><br><span class="line">    <span class="comment">// 单例, 只在第一次需要的时候初始化</span></span><br><span class="line">    useFactory: <span class="function">(<span class="params">logger: LoggerService, appConfig</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (appConfig.isDev) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductService(logger);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnotherProductService(logger);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 提供参数</span></span><br><span class="line">    deps: [LoggerService, <span class="string">'APP_CONFIG'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    provide: <span class="string">'APP_CONFIG'</span>,</span><br><span class="line">    useValue: &#123;</span><br><span class="line">      isDev: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">"imgUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><figure class="image-box">                <img src="/img/learn-angular/005.png" alt="bind" title="" class="">                <p>bind</p>            </figure><h1 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h1><p><a href="/2018/08/30/lean-rxjs/">RxJS 学习笔记</a></p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">'multiple'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MultiplePipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(value: <span class="built_in">number</span>, args?: <span class="built_in">number</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!args) &#123;</span><br><span class="line">      args = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value * args;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><h2 id="路由属性"><a href="#路由属性" class="headerlink" title="路由属性"></a>路由属性</h2><p><a href="#获取">获取路由属性</a></p><h2 id="输入属性"><a href="#输入属性" class="headerlink" title="输入属性"></a>输入属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件 component 中</span></span><br><span class="line"><span class="meta">@Input</span>()</span><br><span class="line">price: <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件html中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> [<span class="attr">price</span>]=<span class="string">"some-value"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-componen</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输出属性"><a href="#输出属性" class="headerlink" title="输出属性"></a>输出属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="meta">@Output</span>(<span class="string">'priceChange'</span>)</span><br><span class="line">lastPrice:EventEmitter&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// some trigger</span></span><br><span class="line"><span class="keyword">this</span>.lastPrice.emit(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> (<span class="attr">lastPrice</span>)=<span class="string">"priceHandle($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件中</span></span><br><span class="line">priceHandle(event: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'price: '</span>, event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中间人模式-有共同的父组件"><a href="#中间人模式-有共同的父组件" class="headerlink" title="中间人模式(有共同的父组件)"></a>中间人模式(有共同的父组件)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child1 组件</span></span><br><span class="line"><span class="meta">@Output</span>(<span class="string">'priceChange'</span>)</span><br><span class="line">lastPrice:EventEmitter&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.lastPrice.emit(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child1-component</span> (<span class="attr">lastPrice</span>)=<span class="string">"priceHandle($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">child1-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child2-component</span> [<span class="attr">lastPrice</span>]=<span class="string">"lastPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">child2-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h1><figure class="image-box">                <img src="/img/learn-angular/006.png" alt="life" title="" class="">                <p>life</p>            </figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>由 <code>angular/form</code>模块中特定的类(<code>FormControl</code>, <code>FormGroup</code>, <code>FormArray</code>)组成</p><h2 id="两种表单比较"><a href="#两种表单比较" class="headerlink" title="两种表单比较"></a>两种表单比较</h2><table><thead><tr><th></th><th>模板式表单</th><th>响应式表单</th></tr></thead><tbody><tr><td>import</td><td><code>FormsModule</code></td><td><code>ReactiveFormsModule</code></td></tr><tr><td>如何构造</td><td>通过组件模板中相关指令</td><td>通过编写 <code>typescript</code> 代码</td></tr><tr><td>数据模型创建</td><td>由 <code>angular</code> 基于模板中的指令隐式创建</td><td>编码明确创建数据模型</td></tr><tr><td>能否直接访问数据模型</td><td>不能</td><td>能</td></tr><tr><td>HTML</td><td>直接生成</td><td>自己编写绑定数据</td></tr></tbody></table><h2 id="模板式表单"><a href="#模板式表单" class="headerlink" title="模板式表单"></a>模板式表单</h2><ul><li><code>NgFrom</code> 会自动添加到 <code>&lt;form&gt;</code> 表单上</li><li>手动添加 <code>NgFrom</code>: <code>&lt;form #myForm=&quot;ngForm&quot;&gt;</code></li><li><code>&lt;form&gt;</code>表单的提交不会被触发</li><li>实现 <code>(ngSubmit)=&quot;onSubmit(myForm.value)&quot;</code></li><li>在 <code>NgForm</code> 元素下 寻找标记为 <code>NgModel</code> 属性的元素(需要指定<code>name</code>属性才能绑定)</li></ul><h2 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a>响应式表单</h2><ul><li><code>formGroup</code> 和 <code>formControl</code> 需要属性绑定语法</li><li><code>formGroupName</code>, <code>formControlName</code>, <code>formArrayName</code> <strong>不需要</strong>属性绑定语法</li><li><code>formGroupName</code>, <code>formControlName</code>, <code>formArrayName</code> 只能用在 <code>formGroup</code> 指令覆盖的范围内</li></ul><h2 id="指令对照表"><a href="#指令对照表" class="headerlink" title="指令对照表"></a>指令对照表</h2><table><thead><tr><th>类名</th><th>模板式表单指令</th><th>响应式表单指令</th></tr></thead><tbody><tr><td>FormGroup</td><td>ngFrom <br> ngModelGroup</td><td>formGroup <br> formGroupName</td></tr><tr><td>FormControl</td><td>ngModel</td><td>formControl <br> formControlName</td></tr><tr><td>FormArray</td><td></td><td>formArrayName</td></tr></tbody></table><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><ul><li><code>formControl</code> 校验器</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mobileValidator</span>(<span class="params">control: FormControl</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value = (control.value || <span class="string">''</span>) + <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> mobileReg = <span class="regexp">/^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/</span>;</span><br><span class="line">  <span class="keyword">let</span> valid = mobileReg.test(value);</span><br><span class="line">  <span class="keyword">return</span> valid ? <span class="literal">null</span> : &#123; mobile: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>formGroup</code> 校验器</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equalValidator</span>(<span class="params">group: FormGroup</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> password: FormControl = group.get(<span class="string">'password'</span>) <span class="keyword">as</span> FormControl;</span><br><span class="line">  <span class="keyword">let</span> pconfirm: FormControl = group.get(<span class="string">'pconfirm'</span>) <span class="keyword">as</span> FormControl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> valid: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (password &amp;&amp; pconfirm) &#123;</span><br><span class="line">    valid = password.value === pconfirm.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> valid ? <span class="literal">null</span> : &#123; equal: &#123; description: <span class="string">'密码和确认密码不匹配!'</span> &#125; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异步校验器 (返回 <code>observable</code>)</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mobileAsyncValidator</span>(<span class="params">control: FormControl</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Observable.of(valid ? <span class="literal">null</span> : &#123; mobile: <span class="literal">true</span> &#125;).delay(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 响应式表单中 使用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params">fb: FormBuilder</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.formModel = fb.group(&#123;</span><br><span class="line">    <span class="comment">//     初始值    同步校验器        异步校验器</span></span><br><span class="line">    mobile: [<span class="string">''</span>, mobileValidator, mobileAsyncValidator],</span><br><span class="line">    <span class="comment">//               多个同步校验器</span></span><br><span class="line">    username: [<span class="string">''</span>, [Validators.required, Validators.minLength(<span class="number">5</span>)]],</span><br><span class="line">    passwordsGroup: fb.group(</span><br><span class="line">      &#123;</span><br><span class="line">        password: [<span class="string">''</span>, Validators.minLength(<span class="number">6</span>)],</span><br><span class="line">        pconfirm: [<span class="string">''</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// formGroup 校验器</span></span><br><span class="line">      &#123; validator: equalValidator &#125;</span><br><span class="line">    ),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onSubmit() &#123;</span><br><span class="line">  <span class="keyword">let</span> isValid: <span class="built_in">boolean</span> = <span class="keyword">this</span>.formModel.get(<span class="string">'username'</span>).valid;</span><br><span class="line">  <span class="keyword">let</span> errors: <span class="built_in">any</span> = <span class="keyword">this</span>.formModel.get(<span class="string">'username'</span>).errors;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.formModel.valid) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.formModel.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">"formModel"</span> (<span class="attr">submit</span>)=<span class="string">"onSubmit()"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 同步校验 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"formModel.get('username').valid || formModel.get('username').untouched"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hasError的第一个参数是 校验器返回的对象的key, 不是校验器的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.hasError('required', 'username')"</span>&gt;</span></span><br><span class="line">      用户名是必填项</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.hasError('minlength', 'username')"</span>&gt;</span></span><br><span class="line">      用户名最小长度是5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 异步校验 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      手机号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">formControlName</span>=<span class="string">"mobile"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.get('mobile').pending"</span>&gt;</span></span><br><span class="line">    正在校验手机号合法性</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"formModel.get('mobile').valid || formModel.get('mobile').pristine"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.hasError('mobile', 'mobile')"</span>&gt;</span></span><br><span class="line">      请输入正确的手机号</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- formGroup 校验 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">formGroupName</span>=<span class="string">"passwordsGroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">formControlName</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.hasError('minlength', ['passwordsGroup','password'])"</span>&gt;</span></span><br><span class="line">      密码最小长度是6</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>确认密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">formControlName</span>=<span class="string">"pconfirm"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!formModel.hasError('equal', 'passwordsGroup')"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 从校验器中获取错误信息 --&gt;</span></span><br><span class="line">      &#123;&#123;formModel.getError('equal', 'passwordsGroup')?.description&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 模板式表单 使用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先封装成一个 指令</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="comment">//       中括号 括起来</span></span><br><span class="line">  selector: <span class="string">'[mobile]'</span>,</span><br><span class="line">  <span class="comment">//            provide 是固定的        useValue 从 validator 引入    multi: true</span></span><br><span class="line">  providers: [&#123; provide: NG_VALIDATORS, useValue: mobileValidator, multi: <span class="literal">true</span> &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MobileValidatorDirective &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">onSubmit(value:<span class="built_in">any</span>, valid:<span class="built_in">boolean</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(valid);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usernameValid:<span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">usernameUntouched:<span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板式表单获取 状态</span></span><br><span class="line">onUsernameInput(form:NgForm) &#123;</span><br><span class="line">  <span class="keyword">if</span>(form) &#123;</span><br><span class="line">    <span class="keyword">this</span>.usernameValid = form.form.get(<span class="string">"username"</span>).valid;</span><br><span class="line">    <span class="keyword">this</span>.usernameUntouched = form.form.get(<span class="string">"username"</span>).untouched;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                                        <span class="comment">&lt;!-- 传递表单值      传递表单状态  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">myForm</span>=<span class="string">"ngForm"</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onSubmit(myForm.value, myForm.valid)"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">ngModel</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">"6"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">input</span>)=<span class="string">"onUsernameInput(myForm)"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模板式表单获取 状态 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"usernameValid || usernameUntouched"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- myForm.form --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!myForm.form.hasError('required','username')"</span>&gt;</span></span><br><span class="line">      用户名是必填项</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"!myForm.form.hasError('minlength','username')"</span>&gt;</span></span><br><span class="line">      用户名最小长度是6</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="和服务器通讯"><a href="#和服务器通讯" class="headerlink" title="和服务器通讯"></a>和服务器通讯</h1><p><code>HttpClient</code></p><h1 id="build"><a href="#build" class="headerlink" title="build"></a>build</h1><ol><li><p>添加环境配置(如 <code>staging</code>)<br>编辑 <code>angular.json</code>, 仿照 <code>projects.architect.build.configurations.staging</code> 下添加环境变量</p></li><li><p><code>build</code> 的时候加入 <code>--configuration</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#                使用哪个 config          输出路径</span></span><br><span class="line">ng build --prod --configuration=<span class="variable">$&#123;env&#125;</span> --output-path dist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS v6 dash 文档</title>
      <link href="/2018/08/31/dash-rxjs-6/"/>
      <url>/2018/08/31/dash-rxjs-6/</url>
      
        <content type="html"><![CDATA[<p>Dash 只能找到版本为V5的 RxJS, 所以花了点时间自己构建了一个V6版本<br><a id="more"></a></p><h1 id="rxjs6-docset成品下载地址"><a href="#rxjs6-docset成品下载地址" class="headerlink" title="rxjs6.docset成品下载地址"></a><code>rxjs6.docset</code>成品下载地址</h1><p><a href="https://github.com/xinshangshangxin/dash-rxjs-6/releases" target="_blank" rel="noopener">rxjs6.docset.zip</a></p><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p><a href="https://github.com/xinshangshangxin/dash-rxjs-6" target="_blank" rel="noopener">https://github.com/xinshangshangxin/dash-rxjs-6</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>从 <a href="https://kapeli.com/docsets#dashDocset" target="_blank" rel="noopener">官方文档 Any HTML Documentation</a> 可知, 只要有 HTML, 就可以轻松构建 Dash 文档</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="创建文件夹-lt-docset-name-gt-docset-Contents-Resources-Documents"><a href="#创建文件夹-lt-docset-name-gt-docset-Contents-Resources-Documents" class="headerlink" title="创建文件夹 &lt;docset name&gt;.docset/Contents/Resources/Documents/"></a>创建文件夹 <code>&lt;docset name&gt;.docset/Contents/Resources/Documents/</code></h2><h2 id="创建-Info-plist-文件-和-icon-png"><a href="#创建-Info-plist-文件-和-icon-png" class="headerlink" title="创建 Info.plist 文件 和 icon.png"></a>创建 <code>Info.plist</code> 文件 和 <code>icon.png</code></h2><p><code>Info.plist</code> 的模板 在 <a href="https://kapeli.com/resources/Info.plist" target="_blank" rel="noopener"><code>https://kapeli.com/resources/Info.plist</code></a></p><h2 id="从-https-rxjs-dev-firebaseapp-com-api-解析有哪些-API"><a href="#从-https-rxjs-dev-firebaseapp-com-api-解析有哪些-API" class="headerlink" title="从 https://rxjs-dev.firebaseapp.com/api 解析有哪些 API"></a>从 <a href="https://rxjs-dev.firebaseapp.com/api" target="_blank" rel="noopener"><code>https://rxjs-dev.firebaseapp.com/api</code></a> 解析有哪些 API</h2><p>从 <code>Network</code> 中可以 看到 一个 <code>/generated/docs/api/api-list.json</code>的请求, 里面有每个 <code>API</code> 内容, 如下图</p><figure class="image-box">                <img src="/img/dash-rxjs-6/001.png" alt="api-json" title="" class="">                <p>api-json</p>            </figure><h2 id="创建-SQLite-Index"><a href="#创建-SQLite-Index" class="headerlink" title="创建 SQLite Index"></a>创建 <code>SQLite Index</code></h2><p>将上面 <code>api-json</code> 的内容 创建到 <code>SQLite Index</code><br><code>CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);</code></p><h2 id="创建-每个-API-的-html-界面"><a href="#创建-每个-API-的-html-界面" class="headerlink" title="创建 每个 API 的 html 界面"></a>创建 每个 API 的 <code>html</code> 界面</h2><ul><li>从 <code>api-json</code> 的内容中 有 <code>path</code> 属性, 可以请求每个界面的详细内容(<code>content</code>属性)<br><img src="/img/dash-rxjs-6/002.png" alt="api-json"></li><li>从 <a href="https://github.com/ReactiveX/rxjs/blob/73bfa92499b9e6f7b07346f052b3eee5c1acd06d/docs_app/src/app/custom-elements/code/pretty-printer.service.ts" target="_blank" rel="noopener"><code>ReactiveX/rxjs</code>的仓库中</a> 发现 用了 <code>assets/js/prettify.js</code>来格式化代码, 所以相同的, 在我们创建的 html 界面中需要 prettify 来格式化代码显示, 代码如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> codeEleList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'body code-example'</span>);</span><br><span class="line">[...codeEleList].forEach(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="built_in">window</span>.prettyPrintOne(ele.innerHTML, <span class="string">'javascript'</span>, <span class="literal">false</span>);</span><br><span class="line">  ele.innerHTML = <span class="string">`&lt;aio-code&gt;</span></span><br><span class="line"><span class="string">  &lt;pre class="prettyprint lang-javascript"&gt;</span></span><br><span class="line"><span class="string">    &lt;code class="animated fadeIn"&gt;<span class="subst">$&#123;html&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/code&gt;</span></span><br><span class="line"><span class="string">  &lt;/pre&gt;</span></span><br><span class="line"><span class="string">&lt;/aio-code&gt;`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>由于是离线文档, 所以在 html 中所有的地址都要转化成相对路径, 代码如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> depth = location.href.replace(<span class="regexp">/.*\/api\//</span>, <span class="string">''</span>).split(<span class="string">'/'</span>).length;</span><br><span class="line"><span class="keyword">let</span> aEleList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</span><br><span class="line">[...aEleList].forEach(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> href = ele.href;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/\/api\//</span>.test(href)) &#123;</span><br><span class="line">    <span class="keyword">let</span> depthStr = <span class="keyword">new</span> <span class="built_in">Array</span>(depth).fill(<span class="string">'..'</span>).join(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">let</span> [preUrl, anchor = <span class="string">''</span>] = href.split(<span class="string">'#'</span>);</span><br><span class="line">    ele.href = preUrl.replace(<span class="regexp">/.*\/api\//</span>, <span class="string">`<span class="subst">$&#123;depthStr&#125;</span>/api/`</span>) + <span class="string">'.html'</span> + <span class="string">'#'</span> + anchor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="更多具体实现请看代码"><a href="#更多具体实现请看代码" class="headerlink" title="更多具体实现请看代码"></a>更多具体实现请看代码</h2><p><a href="https://github.com/xinshangshangxin/dash-rxjs-6" target="_blank" rel="noopener">https://github.com/xinshangshangxin/dash-rxjs-6</a></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://kapeli.com/docsets#dashDocset" target="_blank" rel="noopener">Any HTML Documentation</a></li><li><a href="https://github.com/ReactiveX/rxjs" target="_blank" rel="noopener">ReactiveX/rxjs</a></li><li><a href="https://rxjs-dev.firebaseapp.com/" target="_blank" rel="noopener">rxjs-dev 文档</a><br><br></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> rxjs </tag>
            
            <tag> RxJS </tag>
            
            <tag> dash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS 学习笔记</title>
      <link href="/2018/08/30/lean-rxjs/"/>
      <url>/2018/08/30/lean-rxjs/</url>
      
        <content type="html"><![CDATA[<p><code>30 天精通 RxJS</code> 的读书笔记<br><a id="more"></a></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>本文章为台湾同胞写的 <a href="https://ithelp.ithome.com.tw/articles/10186103" target="_blank" rel="noopener">30 天精通 RxJS</a> 的读书笔记,  建议阅读 <code>30 天精通 RxJS</code><a href="https://ithelp.ithome.com.tw/articles/10186103" target="_blank" rel="noopener">(墙外地址)</a>/<a href="https://rxjs-cn.github.io/rxjs5-ultimate-cn/content/hot-n-cold-observables.html" target="_blank" rel="noopener">(gitbook地址)</a> 来学习 <code>RxJS</code></p><h1 id="RxJS-一个核心三个重点"><a href="#RxJS-一个核心三个重点" class="headerlink" title="RxJS 一个核心三个重点"></a>RxJS 一个核心三个重点</h1><ul><li>核心: <code>Observable</code> 再加上相关的 <code>Operators</code> (<code>map</code>, <code>filter</code>, <code>...</code>)</li><li>三个重点:<ul><li><code>Observer</code>(观察者)</li><li><code>Subject</code></li><li><code>Schedulers</code></li></ul></li></ul><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><table><thead><tr><th>名称</th><th>中文</th><th>备注</th></tr></thead><tbody><tr><td><code>Observer Pattern</code></td><td>观察者模式</td><td>DOM 的事件监听(<code>addEventListener</code>)</td></tr><tr><td><code>Iterator Pattern</code></td><td>迭代器模式</td><td>ES6 的原生的 <code>Iterator</code></td></tr><tr><td><code>Observable</code></td><td>可观察对象</td><td><code>Observer Pattern</code> 是靠生产者推送资料<br><code>Iterator Pattern</code> 则是消费者去要求资料<br>而 <code>Observable</code> 是这两个思想的结合</td></tr><tr><td><code>Observer</code></td><td>观察者</td><td>注意和<code>Observer Pattern</code>区分</td></tr></tbody></table><h1 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a><code>Observer</code></h1><p><strong> <code>Observer</code>(观察者) 跟和 <code>Observer Pattern</code>(观察者模式) 无关，观察者模式是一种设计模式，是思考问题的解决过程，而 <code>Observer</code>(观察者) 是一个被定义的对象</strong></p><h2 id="三个方法"><a href="#三个方法" class="headerlink" title="三个方法"></a>三个方法</h2><ul><li>next: 每当 Observable 发送出新的值,next 方法就会被呼叫</li><li>complete: 在 Observable 没有其他的资料可以取得时,complete 方法就会被呼叫,在 complete 被呼叫之后,next 方法就不会再起作用</li><li>error: 每当 Observable 内发生错误时,error 方法就会被呼叫</li></ul><h2 id="察者可以是不完整的，可以只具有一个-next-方法"><a href="#察者可以是不完整的，可以只具有一个-next-方法" class="headerlink" title="察者可以是不完整的，可以只具有一个 next 方法"></a>察者可以是不完整的，可以只具有一个 <code>next</code> 方法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observable = Observable.create(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="string">'Jerry'</span>);</span><br><span class="line">  observer.next(<span class="string">'Anna'</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">  observer.next(<span class="string">'not work'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个观察者，具有 next, error, complete 上个方法</span></span><br><span class="line"><span class="keyword">let</span> observer = &#123;</span><br><span class="line">  next(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  error(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;,</span><br><span class="line">  complete() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'complete'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">observable.subscribe(observer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Jerry</span></span><br><span class="line"><span class="comment">Anna</span></span><br><span class="line"><span class="comment">complete</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="Observable-的订阅跟-addEventListener-的差异"><a href="#Observable-的订阅跟-addEventListener-的差异" class="headerlink" title="Observable 的订阅跟 addEventListener 的差异"></a><code>Observable</code> 的订阅跟 <code>addEventListener</code> 的差异</h1><ul><li><code>addEventListener</code> 本质上就是 <code>Observer Pattern</code> 的实现,在内部会有一份订阅清单</li><li><code>Observable</code> 的订阅 比较像是执行一个物件的方法,并把资料传进这个方法中</li></ul><h1 id="Observable-和-Iterator-的差异"><a href="#Observable-和-Iterator-的差异" class="headerlink" title="Observable 和 Iterator 的差异"></a><code>Observable</code> 和 <code>Iterator</code> 的差异</h1><ul><li>延迟运算</li><li>渐进式取值</li></ul><h1 id="Observable-的-static-function"><a href="#Observable-的-static-function" class="headerlink" title="Observable 的 static function"></a>Observable 的 <code>static function</code></h1><ul><li><code>Observable.create</code> 传入一个<code>callback function</code>, 这个 <code>callback function</code> 会接收一个<code>observer</code> 参数</li><li><code>Observable.throw</code> 创建一个不发送数据给观察者并且立马发出错误通知的 <code>Observable</code></li><li><code>Observable.pipe</code> 将一系列的操作函数 变成 <code>chain</code> 的方式</li></ul><h1 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h1><p><strong><code>import { of, from, fromEvent } from &#39;rxjs&#39;</code></strong></p><ul><li>of</li><li>from</li><li>fromEvent</li><li>fromEventPattern (<em>同时具有注册监听及移除监听两种行为</em>)</li><li>fromPromise</li><li>never (<em>一直存在但却什么都不做的 observable</em>)</li><li>empty (<em>立即送出 complete</em>)</li><li>throw (<em>立即抛出错误</em>)</li><li>interval (<em>每隔 X 毫秒送出一个从零开始递增的整数</em>)</li><li>timer (<em>第一个参数要发出第一个值的等待时间(ms)，第二个参数第一次之后发送值的间隔时间</em>) | (<em>第一个参数日期(Date)等到指定的时间在发送第一个值，第二个参数第一次之后发送值的间隔时间</em>) | (<em>只接收一个参数, 等待第一个参数时候后通知结束</em>)</li></ul><h1 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h1><ul><li>订阅 <code>observable</code> 后，会回传一个 <code>subscription</code> 物件，这个物件具有释放资源的<code>unsubscribe</code>方法</li><li><code>Events observable</code> 尽量不要用 <code>unsubscribe</code>，通常我们会使用 <code>takeUntil</code>，在某个事件发生后来完成 <code>Event observable</code></li></ul><h1 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h1><p><strong><a href="http://rxmarbles.com/" target="_blank" rel="noopener">珠宝图 http://rxmarbles.com/</a></strong></p><p><strong>!!! 每个 operator 都会回传一个新的 observable</strong></p><ul><li>map</li><li>mapTo</li><li>filter</li><li>take</li><li>first</li><li>takeUntil</li><li>skip</li><li>takeLast 必须等到整个<code>observable</code>完成(complete)，才能知道最后的元素有哪些，并且<strong>同步送出</strong></li><li>last</li><li>concat 把多个 <code>observable</code> 实例合并成一个, 等前一个 <code>observable</code>完成,才会继续下一个</li><li>startWith 一开始就<strong>同步</strong>发出的，这个<code>operator</code>常被用来保存程式的起始状态</li><li>merge 把多个 <code>observable</code> 实例合并成一个, 多个 <code>observable</code> 同时处理</li><li>combineLatest 取得各个 <code>observable</code> 最后送出的值，再输出成一个值</li><li>zip&lt;T, R&gt;(…observables: Array&lt;ObservableInput<any> | ((…values: Array<any>) =&gt; R)&gt;): Observable<r><br>每个 <code>observable</code> 的第 n 个元素会一起输出</r></any></any></li><li>withLatestFrom&lt;T, R&gt;(…args: Array&lt;ObservableInput<any> | ((…values: Array<any>) =&gt; R)&gt;): OperatorFunction&lt;T, R&gt;<br>和 <code>combineLatest</code> 像, 只有在主<code>observable</code> 送出新的值时，才会执行 callback</any></any></li><li>reduce&lt;T, R&gt;(accumulator: (acc: R, value: T, index?: number) =&gt; R, seed?: R): OperatorFunction&lt;T, R&gt;<br>返回一个<code>reduce</code>之后的最终结果</li><li>scan&lt;T, R&gt;(accumulator: (acc: R, value: T, index: number) =&gt; R, seed?: T | R): OperatorFunction&lt;T, R&gt;<br> 和<code>reduce</code> 相似,  但是  返回每个中间结果</li><li>buffer<t>(closingNotifier: Observable<any>): OperatorFunction&lt;T, T[]&gt;<br>缓冲源 Observable 的值直到 closingNotifier 发出</any></t></li><li>bufferTime<t>(bufferTimeSpan: number): OperatorFunction&lt;T, T[]&gt;<br>在特定时间周期内缓冲源 Observable 的值</t></li><li>bufferCount<t>(bufferSize: number, startBufferEvery: number = null): OperatorFunction&lt;T, T[]&gt;<br>缓冲源 Observable 的值直到缓冲数量到达设定的 bufferSize.</t></li><li>delay</li><li>delayWhen</li><li>debounce 每次收到元素，他会先把元素 cache 住并等待一段时间，如果这段时间内已经没有收到任何元素，则把元素送出；如果这段时间内又收到新的元素，则会把原本 cache 住的元素释放掉并重新计时，不断反覆</li><li>debounceTime</li><li>throttle 有元素被送出就会沉默一段时间，等到时间过了又会开放发送元素</li><li>throttleTime</li><li>distinct&lt;T, K&gt;(keySelector?: (value: T) =&gt; K, flushes?: Observable<any>): MonoTypeOperatorFunction<t><br>不要直接把<code>distinct</code>用在一个无限的<code>observable</code>里，这样很可能会让 Set 越来越大</t></any></li><li>distinctUntilChanged</li><li>catchError&lt;T, R&gt;(selector: (err: any, caught: Observable<t>) =&gt; ObservableInput<r>): OperatorFunction&lt;T, T | R&gt;</r></t></li><li>retry</li><li>retryWhen</li><li>repeat</li><li>concatAll <code>source</code> observable 内部每次发送的值也是<code>observable</code>，用 <code>concatAll</code> 就可以把 <code>source</code> 摊平; 会处理 <code>source</code> 先发出来的 <code>observable</code>，必须等到这个 <code>observable</code> 结束，才会再处理下一个<code>source</code>发出来的<code>observable</code></li><li>switchAll<t>(): OperatorFunction&lt;ObservableInput<t>, T&gt;<br>每当有新的 observable 送出就会直接把旧的 observable 退订(unsubscribe)，永远只处理最新的 observable!</t></t></li><li>mergeAll<t>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<t></t></t></li><li>concatMap&lt;T, I, R&gt;(project: (value: T, index: number) =&gt; ObservableInput<i>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) =&gt; R): OperatorFunction&lt;T, I | R&gt;<br><code>map + concatAll</code><br>确定内部的 observable 结束时间比外部 observable 发送时间来快的情境，并且不希望有任何并行处理行为，适合少数要一次一次完成到底的的 UI 动画或特别的 HTTP request 行为</i></li><li>switchMap&lt;T, I, R&gt;(project: (value: T, index: number) =&gt; ObservableInput<i>, resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) =&gt; R): OperatorFunction&lt;T, I | R&gt;<br><code>map + switchAll</code><br>只要最后一次行为的结果，适合绝大多数的使用情境</i></li><li>mergeMap&lt;T, I, R&gt;(project: (value: T, index: number) =&gt; ObservableInput<i>, resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) =&gt; R) | number, concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction&lt;T, I | R&gt;<br><code>map + mergeAll</code><br>并行处理多个 observable，适合需要并行处理的行为，像是多个 I/O 的并行处理</i></li><li>window<t>(windowBoundaries: Observable<any>): OperatorFunction&lt;T, Observable<t>&gt;<br>每当 windowBoundaries 发出项时，将源 Observable 的值分支成嵌套的 Observable</t></any></t></li><li>windowToggle&lt;T, O&gt;(openings: Observable<o>, closingSelector: (openValue: O) =&gt; Observable<any>): OperatorFunction&lt;T, Observable<t>&gt;<br>将源 Observable 的值分支成嵌套的 Observable，分支策略是以 openings 发出项为起始，以 closingSelector 发出为结束</t></any></o></li><li>groupBy&lt;T, K, R&gt;(keySelector: (value: T) =&gt; K, elementSelector?: ((value: T) =&gt; R) | void, durationSelector?: (grouped: GroupedObservable&lt;K, R&gt;) =&gt; Observable<any>, subjectSelector?: () =&gt; Subject<r>): OperatorFunction&lt;T, GroupedObservable&lt;K, R&gt;&gt;<br>根据指定条件将源 Observable 发出的值进行分组，并将这些分组作为 GroupedObservables 发出，每一个分组都是一个 GroupedObservable</r></any></li></ul><h1 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h1><ul><li><code>Subject</code> 同时是 <code>Observable</code> 又是 <code>Observer</code></li><li><code>Subject</code> 会对内部的 observers 清单进行组播(<code>multicast</code>)</li><li><code>Subject</code> 就是 <code>Observer Pattern</code> 的实作并且继承自 <code>Observable</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line">subject.subscribe(observerA); <span class="comment">// 相当于 把 observerA 加入订阅清单</span></span><br><span class="line">source.subscribe(subject); <span class="comment">//  遍历订阅清单后发送当前数据</span></span><br></pre></td></tr></table></figure><h2 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h2><p>一种 <code>subject</code> 能够表达当前的状态,在一订阅时就能收到最新的状态是什么,而不是订阅后要等到有变动才能接收到新的状态</p><h2 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h2><p>事件的重放, 在新订阅时重新发送最后的几个元素</p><h2 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h2><p>等到事情结束后送出一个值</p><h2 id="和-Subject-相关的-Observable-operators"><a href="#和-Subject-相关的-Observable-operators" class="headerlink" title="和 Subject 相关的 Observable.operators"></a>和 Subject 相关的 Observable.operators</h2><ul><li>multicast&lt;T, R&gt;(subjectOrSubjectFactory: Subject<t> | (() =&gt; Subject<t>), selector?: (source: Observable<t>) =&gt; Observable<r>): OperatorFunction&lt;T, R&gt;<br>可以用来挂载 <code>subject</code> 并回传一个可连结(<code>connectable</code>)的 <code>observable</code></r></t></t></t></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = Observable.multicast(<span class="keyword">new</span> Subject());</span><br><span class="line">source.subscribe(observerA);</span><br><span class="line"><span class="keyword">let</span> realSubscription = source.connect();</span><br><span class="line">realSubscription.unsubscribe();</span><br></pre></td></tr></table></figure><ul><li>refCount<t>(): MonoTypeOperatorFunction<t><br>建立一个只要有订阅就会自动 <code>connect</code> 的 <code>observable</code>, 必须和 <code>multicast</code> 一起使用</t></t></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = Observable.multicast(<span class="keyword">new</span> Subject()).refCount();</span><br><span class="line"><span class="keyword">let</span> subscription = source.subscribe(observerA);</span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><ul><li>publish&lt;T, R&gt;(selector?: OperatorFunction&lt;T, R&gt;): MonoTypeOperatorFunction<t> | OperatorFunction&lt;T, R&gt;<br>简化 <code>multicast(new Subject())</code></t></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = Observable.publish().refCount();</span><br><span class="line"><span class="keyword">let</span> subscription = source.subscribe(observerA);</span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><ul><li><p>publishReplay<br><code>multicast(new ReplaySubject(1))</code></p></li><li><p>publishBehavior(0)<br><code>multicast(new BehaviorSubject(0))</code></p></li><li><p>publishLast<br><code>multicast(new AsyncSubject())</code></p></li><li><p>share<br><code>.publish().refCount();</code></p></li></ul><h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><ul><li><code>Scheduler</code> 是一个资料结构.它知道如何根据优先级或其他标准来储存并伫列任务.</li><li><code>Scheduler</code> 是一个执行环境.它意味着任务何时何地被执行，比如像是立即执行、在回呼(callback)中执行、setTimeout 中执行、animation frame 中执行</li><li><code>Scheduler</code> 是一个虚拟时钟.它透过 now()这个方法提供了时间的概念，我们可以让任务在特定的时间点被执行.</li></ul><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>在会有递回的 operator 且具有大量资料时使用，在这个情况下 queue 能避免不必要的效能损耗</p><h2 id="asap"><a href="#asap" class="headerlink" title="asap"></a>asap</h2><p>asap 因为都是在 setTimeout 中执行，所以不会有 block event loop 的问题，很适合用在永远不会退订的 observable，例如在背景下持续监听 server 送来的通知</p><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>asap 很像但是使用 setInterval 来运作，通常是跟时间相关的 operator 才会用到</p><h2 id="animationFrame"><a href="#animationFrame" class="headerlink" title="animationFrame"></a>animationFrame</h2><p>在做复杂运算，且高频率触发的 UI 动画时，就很适合使用 animationFrame，以可以搭配 throttle operator 使用。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://ithelp.ithome.com.tw/articles/10186103" target="_blank" rel="noopener">30 天精通 RxJS</a>  </li><li><a href="https://rxjs-cn.github.io/rxjs5-ultimate-cn/content/hot-n-cold-observables.html" target="_blank" rel="noopener">30-days-proficient-in-rxjs</a><br><br></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG 殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> rxjs </tag>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI 中 cache 和 artifacts 的区别</title>
      <link href="/2018/07/21/gitlab-ci-artifacts-cache/"/>
      <url>/2018/07/21/gitlab-ci-artifacts-cache/</url>
      
        <content type="html"><![CDATA[<h2 id="使用准则"><a href="#使用准则" class="headerlink" title="使用准则"></a>使用准则</h2><ul><li>如果第二个 <code>job</code> 的依赖不存在, <code>job</code> 也能继续运行, 则使用 <code>cache</code></li><li>如果第二个 <code>job</code> 的依赖必须存在, 则 使用 <code>artifacts</code></li></ul><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><ul><li><code>cache</code> 不一定命中, <code>artifacts</code> 肯定命中</li><li><code>artifacts</code> 可以设置自动过期时间,过期自动删除,<code>cache</code> 不会自动清理</li><li>默认 <code>artifacts</code> 会自动在不同的 <code>stage</code> 中传输; <code>artifacts</code> 会先传到 <code>GitLab</code> 服务器, 然后需要时再重新下载, 所以这部分也可以在 <code>GitLab</code> 下载和浏览</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>如果 第二个 <code>job</code> 依赖 第一个 <code>job</code> 生成的内容, 使用 <code>cache</code> 通常会失败(因为不保证 <code>cache</code> 存在), 这时应当使用 <code>artifacts</code>, 在第二个 <code>job</code> 使用 <code>dependencies</code> 属性, 让第二个 <code>job</code> 使用第一个 <code>job</code> 中的内容</li><li>如果几个 <code>jobs</code> 都需要安装相同的依赖, 可以使用 <code>cache</code>, 可以加快依赖的安装进度, 即使 <code>cache</code> 不存在，<code>job</code> 也不会失败</li></ul><h2 id="artifacts-使用-demo"><a href="#artifacts-使用-demo" class="headerlink" title="artifacts 使用 demo"></a><code>artifacts</code> 使用 <code>demo</code></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="attr">docker:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  - docker:</span><span class="string">dind</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  CONTAINER_IMAGE:</span> <span class="string">registry.gitlab.com/$CI_PROJECT_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line">  <span class="comment"># personal jobs</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build_code</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">use_artifacts</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">disable_artifacts</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_code:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build_code</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line">    <span class="comment"># 保存压缩包的名称</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"$&#123;CI_COMMIT_SHA&#125;"</span></span><br><span class="line">    <span class="comment"># 要保存的文件的路径</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">dist/</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">use_artifacts:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">use_artifacts</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line">    <span class="comment"># 默认会自动在不同的 `stage` 中传输, 所以这里的 dist 目录是存在的</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ls</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="attr">disable_artifacts:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">disable_artifacts</span></span><br><span class="line">  <span class="comment"># 将 dependencies 设置为 [], 从而禁用artifacts</span></span><br><span class="line"><span class="attr">  dependencies:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line">    <span class="comment"># 无法 看到 dist 目录</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ls</span> <span class="string">./</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://gitlab.com/gitlab-com/support-forum/issues/2946#note_59414694" target="_blank" rel="noopener">Pipeline - Failed to extract cache</a><br><a href="https://zacksleo.github.io/2017/04/18/GitLab-CI%E4%B8%AD%E7%9A%84artifacts%E4%BD%BF%E7%94%A8%E7%A0%94%E7%A9%B6/" target="_blank" rel="noopener">GitLab-CI中的artifacts使用研究</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转] 用 GitLab CI 进行持续集成</title>
      <link href="/2018/07/20/use-gitlab-ci-for-continuous-integration/"/>
      <url>/2018/07/20/use-gitlab-ci-for-continuous-integration/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 <code>.gitlab-ci.yml</code> 文件，然后添加一个 Runner，即可进行持续集成。 而且随着 GitLab 的升级，GitLab CI 变得越来越强大，本文将介绍如何使用 GitLab CI 进行持续集成。</p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><p>在介绍 GitLab CI 之前，我们先看看一些持续集成相关的概念。</p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。<br>任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下图所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+           +----------------+</span><br><span class="line">|                  |  trigger  |                |</span><br><span class="line">|   Commit / MR    +----------&gt;+    Pipeline    |</span><br><span class="line">|                  |           |                |</span><br><span class="line">+------------------+           +----------------+</span><br></pre></td></tr></table></figure><h2 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h2><p>Stages 表示构建阶段，说白了就是上面提到的流程。<br>我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>因此，Stages 和 Pipeline 的关系就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------+</span><br><span class="line">|                                                        |</span><br><span class="line">|  Pipeline                                              |</span><br><span class="line">|                                                        |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|  |  Stage <span class="number">1</span>  |----&gt;|   Stage <span class="number">2</span>  |-----&gt;|   Stage <span class="number">3</span>  |  |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|                                                        |</span><br><span class="line">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h2><p>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。<br>我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li></ul><p>所以，Jobs 和 Stage 的关系图就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+</span><br><span class="line">|                                          |</span><br><span class="line">|  Stage <span class="number">1</span>                                 |</span><br><span class="line">|                                          |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|  |  Job <span class="number">1</span>  |  |  Job <span class="number">2</span>  |  |  Job <span class="number">3</span>  |   |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|                                          |</span><br><span class="line">+------------------------------------------+</span><br></pre></td></tr></table></figure><h1 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab Runner"></a>GitLab Runner</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>理解了上面的基本概念之后，有没有觉得少了些什么东西 —— 由谁来执行这些构建任务呢？<br>答案就是 GitLab Runner 了！</p><p>想问为什么不是 GitLab CI 来运行那些构建任务？<br>一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。</p><p>GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做拉！<br>因为 GitLab Runner 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 GitLab 的性能~</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 GitLab Runner 太简单了，按照着 <a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener">官方文档</a> 的教程来就好拉！<br>下面是 Debian/Ubuntu/CentOS 的安装方法，其他系统去参考官方文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu</span></span><br><span class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class="line">$ sudo apt-get install gitlab-ci-multi-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># For CentOS</span></span><br><span class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br><span class="line">$ sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure><h2 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h2><p>安装好 GitLab Runner 之后，我们只要启动 Runner 然后和 CI 绑定就可以了：</p><ul><li>打开你 GitLab 中的项目页面，在项目设置中找到 runners</li><li>运行 <code>sudo gitlab-ci-multi-runner register</code></li><li>输入 CI URL</li><li>输入 Token</li><li>输入 Runner 的名字</li><li>选择 Runner 的类型，简单起见还是选 Shell 吧</li><li>完成</li></ul><p>当注册好 Runner 之后，可以用 <code>sudo gitlab-ci-multi-runner list</code> 命令来查看各个 Runner 的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gitlab-runner list</span><br><span class="line">Listing configured runners          ConfigFile=/etc/gitlab-runner/config.toml</span><br><span class="line">my-runner                           Executor=shell Token=cd1cd7cf243afb47094677855aacd3 URL=http://mygitlab.com/ci</span><br></pre></td></tr></table></figure><h1 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>配置好 Runner 之后，我们要做的事情就是在项目根目录中添加 <code>.gitlab-ci.yml</code> 文件了。<br>当我们添加了 <code>.gitlab-ci.yml</code> 文件后，每次提交代码或者合并 MR 都会自动运行构建任务了。</p><p>还记得 Pipeline 是怎么触发的吗？Pipeline 也是通过提交代码或者合并 MR 来触发的！<br>那么 Pipeline 和 <code>.gitlab-ci.yml</code> 有什么关系呢？<br>其实 <code>.gitlab-ci.yml</code> 就是在定义 Pipeline 而已拉！</p><h2 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h2><p>我们先来看看 <code>.gitlab-ci.yml</code> 是怎么写的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 job</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"I am job1"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"I am in test stage"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 job</span></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"I am job2"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">echo</span> <span class="string">"I am in build stage"</span></span><br></pre></td></tr></table></figure><p>写起来很简单吧！用 <code>stages</code> 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。<br>每个 job 中可以可以再用 <code>stage</code> 关键字来指定该 job 对应哪个 stage。<br>job 里面的 <code>script</code> 关键字是最关键的地方了，也是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><p>回想一下我们之前提到的 Stages 和 Jobs 的关系，然后猜猜上面例子的运行结果？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I am job2</span><br><span class="line">I am in build stage</span><br><span class="line">I am job1</span><br><span class="line">I am in test stage</span><br></pre></td></tr></table></figure><p>根据我们在 <code>stages</code> 中的定义，<code>build</code> 阶段要在 <code>test</code> 阶段之前运行，所以 <code>stage:build</code> 的 jobs 会先运行，之后才会运行 <code>stage:test</code> 的 jobs。</p><h2 id="常用的关键字"><a href="#常用的关键字" class="headerlink" title="常用的关键字"></a>常用的关键字</h2><p>下面介绍一些常用的关键字，想要更加详尽的内容请前往 <a href="http://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>定义 Stages，默认有三个 Stages，分别是 <code>build</code>, <code>test</code>, <code>deploy</code>。</p><h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><p><code>stages</code> 的别名。</p><h3 id="before-script"><a href="#before-script" class="headerlink" title="before_script"></a>before_script</h3><p>定义任何 Jobs 运行前都会执行的命令。</p><h3 id="after-script"><a href="#after-script" class="headerlink" title="after_script"></a>after_script</h3><blockquote><p>要求 GitLab 8.7+ 和 GitLab Runner 1.2+</p></blockquote><p>定义任何 Jobs 运行完后都会执行的命令。</p><h3 id="variables-amp-amp-Job-variables"><a href="#variables-amp-amp-Job-variables" class="headerlink" title="variables &amp;&amp; Job.variables"></a>variables &amp;&amp; Job.variables</h3><blockquote><p>要求 GitLab Runner 0.5.0+</p></blockquote><p>定义环境变量。<br>如果定义了 Job 级别的环境变量的话，该 Job 会优先使用 Job 级别的环境变量。</p><h3 id="cache-amp-amp-Job-cache"><a href="#cache-amp-amp-Job-cache" class="headerlink" title="cache &amp;&amp; Job.cache"></a>cache &amp;&amp; Job.cache</h3><blockquote><p>要求 GitLab Runner 0.7.0+</p></blockquote><p>定义需要缓存的文件。<br>每个 Job 开始的时候，Runner 都会删掉 <code>.gitignore</code> 里面的文件。<br>如果有些文件 (如 <code>node_modules/</code>) 需要多个 Jobs 共用的话，我们只能让每个 Job 都先执行一遍 <code>npm install</code>。<br>这样很不方便，因此我们需要对这些文件进行缓存。缓存了的文件除了可以跨 Jobs 使用外，还可以跨 Pipeline 使用。</p><p>具体用法请查看 <a href="http://docs.gitlab.com/ce/ci/yaml/README.html#cache" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="Job-script"><a href="#Job-script" class="headerlink" title="Job.script"></a>Job.script</h3><p>定义 Job 要运行的命令，必填项。</p><h3 id="Job-stage"><a href="#Job-stage" class="headerlink" title="Job.stage"></a>Job.stage</h3><p>定义 Job 的 stage，默认为 <code>test</code>。</p><h3 id="Job-artifacts"><a href="#Job-artifacts" class="headerlink" title="Job.artifacts"></a>Job.artifacts</h3><p>定义 Job 中生成的附件。<br>当该 Job 运行成功后，生成的文件可以作为附件 (如生成的二进制文件) 保留下来，打包发送到 GitLab，之后我们可以在 GitLab 的项目页面下下载该附件。<br>注意，不要把 <code>artifacts</code> 和 <code>cache</code> 混淆了。</p><h2 id="实用例子"><a href="#实用例子" class="headerlink" title="实用例子"></a>实用例子</h2><p>下面给出一个我自己在用的例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">install_deps</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy_test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy_production</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">$&#123;CI_BUILD_REF_NAME&#125;</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="attr">install_deps:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">install_deps</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">develop</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试用例</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">develop</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">develop</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">build:client</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">build:server</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署测试服务器</span></span><br><span class="line"><span class="attr">deploy_test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy_test</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">develop</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">pm2</span> <span class="string">delete</span> <span class="string">app</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">pm2</span> <span class="string">start</span> <span class="string">app.js</span> <span class="bullet">--name</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署生产服务器</span></span><br><span class="line"><span class="attr">deploy_production:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy_production</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">bash</span> <span class="string">scripts/deploy/deploy.sh</span></span><br></pre></td></tr></table></figure><p>上面的配置把一次 Pipeline 分成五个阶段：</p><ul><li>安装依赖(<code>install_deps</code>)</li><li>运行测试(<code>test</code>)</li><li>编译(<code>build</code>)</li><li>部署测试服务器(<code>deploy_test</code>)</li><li>部署生产服务器(<code>deploy_production</code>)</li></ul><p>设置 <code>Job.only</code> 后，只有当 develop 分支和 master 分支有提交的时候才会触发相关的 Jobs。<br>注意，我这里用 GitLab Runner 所在的服务器作为测试服务器。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://about.gitlab.com/gitlab-ci/" target="_blank" rel="noopener">https://about.gitlab.com/gitlab-ci/</a><br><a href="http://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">http://docs.gitlab.com/ce/ci/yaml/README.html</a><br><a href="http://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noopener">http://docs.gitlab.com/ce/ci/variables/README.html</a><br><a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a><br><a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1232" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1232</a><br><a href="http://stackbox.cn/2016-02-gitlab-ci-conf/" target="_blank" rel="noopener">http://stackbox.cn/2016-02-gitlab-ci-conf/</a></p><h1 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h1><p><a href="https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/" target="_blank" rel="noopener">用 GitLab CI 进行持续集成(scarletsky)</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 vscode 编辑远程文件</title>
      <link href="/2018/07/11/remote-vscode/"/>
      <url>/2018/07/11/remote-vscode/</url>
      
        <content type="html"><![CDATA[<p>使用vim编辑文件不是很顺手, 利用 vscode 插件实现本地编辑远程文件<br><a id="more"></a></p><h2 id="安装-Remote-VSCode"><a href="#安装-Remote-VSCode" class="headerlink" title="安装 Remote VSCode"></a>安装 <code>Remote VSCode</code></h2><ol><li>打开 <a href="https://marketplace.visualstudio.com/items?itemName=rafaelmaiolla.remote-vscode" target="_blank" rel="noopener">marketplace</a>, 点击 <code>Install</code>, 安装后重启 <code>vsc</code></li><li>按照 <a href="https://github.com/aurora/rmate" target="_blank" rel="noopener">bash rmate</a> 文档, 在 <strong>远程服务器</strong> 上 安装 rmate<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /usr/<span class="built_in">local</span>/bin/rmate https://raw.github.com/aurora/rmate/master/rmate</span><br><span class="line">sudo chmod a+x /usr/<span class="built_in">local</span>/bin/rmate</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>在本机 <code>vscode</code> 窗口中, 按键 <code>F1</code>, 输入 <code>Remote: Start server</code>, 回车后启动 <code>Remote VSCode</code> 服务</li><li>在命令行中输入 <code>ssh -R 52698:127.0.0.1:52698 user@example.com -p ssh_port</code></li><li>在命令行中输入 <code>rmate file</code></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 <code>vscode</code> 中 打开 <code>User Setttings</code>, 搜索 <code>remote vscode</code> 修改相关配置<br><figure class="image-box">                <img src="/img/remote-vscode/001.png" alt="配置" title="" class="">                <p>配置</p>            </figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=rafaelmaiolla.remote-vscode" target="_blank" rel="noopener">marketplace remote-vscode</a></li><li><a href="https://spin.atomicobject.com/2017/12/18/remote-vscode-file-editing/" target="_blank" rel="noopener">Remote File Editing Over SSH with Visual Studio Code</a></li><li><a href="https://medium.com/@prtdomingo/editing-files-in-your-linux-virtual-machine-made-a-lot-easier-with-remote-vscode-6bb98d0639a4" target="_blank" rel="noopener">Editing files in your Linux Virtual Machine made a lot easier with Remote VSCode</a><br><br></li></ul><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢!</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vsc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[内网穿透] ubuntu上搭建frp</title>
      <link href="/2018/06/18/frp/"/>
      <url>/2018/06/18/frp/</url>
      
        <content type="html"><![CDATA[<p>frp服务器端和客户端,unbutu开机启动以及作为socket5代理<br><a id="more"></a></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p><strong><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">官方中文文档, 很清晰</a></strong></p><ol><li>进入 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener"><code>frp release</code></a> 界面, 选择对应服务器版本的版本(比如 64位的linux选择 <code>frp_0.20.0_linux_amd64.tar.gz</code>)</li><li>解压 <code>tar zxvf frp_0.20.0_linux_amd64.tar.gz</code></li><li><p>进入 <code>frp_0.20.0_linux_amd64</code>, 编辑 <code>frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = frp运行端口,需要开放防火墙</span><br><span class="line"><span class="attr">vhost_http_port</span> = http服务端口,可以 和 bind_port 相同</span><br></pre></td></tr></table></figure></li><li><p>启动 <code>./frps -c ./frps.ini</code></p></li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>进入 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener"><code>frp release</code></a> 界面, 选择对应客户端版本(比如 macOS选择 <code>frp_0.20.0_darwin_amd64.tar.gz</code>)</li><li>解压 <code>tar zxvf frp_0.20.0_darwin_amd64.tar.gz</code></li><li><p>进入 <code>frp_0.20.0_darwin_amd64</code>, 编辑 <code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 上一步的服务器地址</span><br><span class="line"><span class="attr">server_port</span> = 上一步填写的端口</span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = 本机http服务端口</span><br><span class="line"><span class="attr">custom_domains</span> = www.yourdomain.com</span><br></pre></td></tr></table></figure></li><li><p>启动<code>./frpc -c ./frpc.ini</code></p></li><li>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到服务器地址</li><li>访问 <code>www.yourdomain.com:${vhost_http_port}</code> 其中 <code>vhost_http_port</code>为上一步绑定的端口</li></ol><h2 id="自定义二级域名-并且去除访问时的端口"><a href="#自定义二级域名-并且去除访问时的端口" class="headerlink" title="自定义二级域名, 并且去除访问时的端口"></a>自定义二级域名, 并且去除访问时的端口</h2><p><strong>(替换 <code>frp.yourdomain.com</code> 为你自定义的二级域名 )</strong></p><ol><li><p>服务器端 <code>frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = frp运行端口,需要开放防火墙</span><br><span class="line"><span class="attr">vhost_http_port</span> = http服务端口,可以 和 bind_port 相同</span><br><span class="line"><span class="attr">subdomain_host</span> = frp.yourdomain.com</span><br></pre></td></tr></table></figure></li><li><p>去除访问时需要输入端口 (<code>nginx</code> 反向代理)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.frp.yourdomain.com</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/<span class="regexp">*.frp.yourdomain.com.cer</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/<span class="regexp">*.frp.yourdomain.com.key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># vhost_http_port 为 上面绑定的端口</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:vhost_http_port;</span><br><span class="line">        <span class="comment"># 设置 host</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端 <code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 上一步的服务器地址</span><br><span class="line"><span class="attr">server_port</span> = 上一步填写的端口</span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = 本机http服务端口</span><br><span class="line"><span class="attr">subdomain</span> = test</span><br></pre></td></tr></table></figure></li><li><p>访问 <code>test.yourdomain.com</code></p></li></ol><h2 id="搭建-socket5-代理"><a href="#搭建-socket5-代理" class="headerlink" title="搭建 socket5 代理"></a>搭建 <code>socket5</code> 代理</h2><p><strong>注意, 以下配置均在 服务器端!!</strong></p><ol><li><p>服务器端配置 <code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">server_port</span> = 第一步填写的端口</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = 服务器端开放的一个 tcp 端口, 用于通信</span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"><span class="attr">plugin_user</span> = 设置用户名</span><br><span class="line"><span class="attr">plugin_passwd</span> = 设置密码</span><br></pre></td></tr></table></figure></li><li><p>启动,设置代理访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env ALL_PROXY=socks5h://<span class="variable">$&#123;plugin_user&#125;</span>:<span class="variable">$&#123;plugin_passwd&#125;</span>@服务器地址:服务器开放的tcp端口 curl https://www.google.com --verbose</span><br></pre></td></tr></table></figure></li></ol><h2 id="ubuntu16-加入开机启动项"><a href="#ubuntu16-加入开机启动项" class="headerlink" title="ubuntu16 加入开机启动项"></a>ubuntu16 加入开机启动项</h2><ol><li><p>添加 <code>/lib/systemd/system/frps.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=frps</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">TimeoutStartSec</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="variable">$&#123;frps的绝对路径&#125;</span> -c <span class="variable">$&#123;frps.ini的绝对路径&#125;</span></span><br><span class="line"><span class="attr">ExecStop</span>=/bin/kill <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>启用 <code>frps.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line">systemctl start frps</span><br><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务器-安装脚本"><a href="#服务器-安装脚本" class="headerlink" title="服务器 安装脚本"></a>服务器 安装脚本</h2><ol><li><p><code>frps 安装</code> (token认证,日志,dashboard,开机启动)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">frp_download_url=<span class="string">"https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz"</span></span><br><span class="line">dir=<span class="string">"要下载 frp 存放的路径"</span></span><br><span class="line">bind_port=<span class="string">"frp运行端口"</span></span><br><span class="line">host=<span class="string">"自定义二级域名"</span></span><br><span class="line">token=<span class="string">"token认证访问"</span></span><br><span class="line">log_name=<span class="string">"日志名称"</span></span><br><span class="line">dashboard_port=<span class="string">"dashboard 端口"</span></span><br><span class="line">dashboard_user=admin</span><br><span class="line">dashboard_pwd=admin</span><br><span class="line"><span class="comment"># 配置结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dir=<span class="variable">$&#123;dir%/&#125;</span></span><br><span class="line">frp_tar_gz_name=<span class="variable">$&#123;frp_download_url##*/&#125;</span></span><br><span class="line">frp_type=<span class="variable">$&#123;frp_tar_gz_name%.tar.gz&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>.tar.gz ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>.tar.gz exists, skip download"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  wget <span class="variable">$&#123;frp_download_url&#125;</span> -P <span class="variable">$&#123;dir&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span> exists, skip tar zxvf"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;dir&#125;</span></span><br><span class="line">  tar zxvf <span class="variable">$&#123;frp_type&#125;</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_base</span></span>()&#123;</span><br><span class="line">  <span class="built_in">local</span> conf_str=`cat &lt;&lt;EOF</span><br><span class="line">[common]</span><br><span class="line">bind_port = <span class="variable">$&#123;bind_port&#125;</span></span><br><span class="line">vhost_http_port = <span class="variable">$&#123;bind_port&#125;</span></span><br><span class="line">subdomain_host = <span class="variable">$&#123;host&#125;</span></span><br><span class="line">log_file = <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/<span class="variable">$&#123;log_name&#125;</span></span><br><span class="line">token = <span class="variable">$&#123;token&#125;</span></span><br><span class="line">EOF</span><br><span class="line">`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;conf_str&#125;</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_dashboard</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"dashboard_port"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">local</span> conf_str=`cat &lt;&lt;EOF</span><br><span class="line">dashboard_port = <span class="variable">$&#123;dashboard_port&#125;</span></span><br><span class="line">dashboard_user = <span class="variable">$&#123;dashboard_user&#125;</span></span><br><span class="line">dashboard_pwd = <span class="variable">$&#123;dashboard_pwd&#125;</span></span><br><span class="line">EOF</span><br><span class="line">`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;conf_str&#125;</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_frps_ini</span></span>() &#123;</span><br><span class="line">  conf_str=`cat &lt;&lt;EOF</span><br><span class="line">$(get_base)</span><br><span class="line">$(get_dashboard)</span><br><span class="line">EOF</span><br><span class="line">`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;conf_str&#125;</span>"</span> &gt; <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frps.ini</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">generate_service</span></span>() &#123;</span><br><span class="line">  (</span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=frps</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=30</span><br><span class="line">ExecStart=<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frps -c <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frps.ini</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> \<span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; /lib/systemd/system/frps.service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_service</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">"/lib/systemd/system/frps.service"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">read</span> -r -p <span class="string">"/lib/systemd/system/frps.service已存在,覆盖 [N/y] "</span> input</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;input&#125;</span> = <span class="string">"Y"</span> -o <span class="variable">$&#123;input&#125;</span> = <span class="string">'y'</span> ]; <span class="keyword">then</span></span><br><span class="line">      generate_service</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start_service</span></span>() &#123;</span><br><span class="line">  systemctl <span class="built_in">enable</span> frps</span><br><span class="line">  systemctl restart frps</span><br><span class="line">  systemctl status frps </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_frps_ini </span><br><span class="line">set_service</span><br><span class="line">start_service</span><br></pre></td></tr></table></figure></li><li><p><code>socket5 frpc 安装</code> (token, 代理认证, 开机自启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">frp_type=<span class="string">"frp文件夹, 比如 frp_0.20.0_linux_amd64"</span></span><br><span class="line">dir=<span class="string">"下载 frp 存放的路径"</span></span><br><span class="line">server_addr=127.0.0.1</span><br><span class="line">server_port=<span class="string">"frps运行端口"</span></span><br><span class="line">token=<span class="string">"frps设置的token"</span></span><br><span class="line">log_name=<span class="string">"日志"</span></span><br><span class="line">remote_port=<span class="string">"开放的tcp, 用于socket5代理端口"</span></span><br><span class="line">plugin_user=<span class="string">"代理用户名"</span></span><br><span class="line">plugin_passwd=<span class="string">"代理端口"</span></span><br><span class="line"><span class="comment"># 配置结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dir=<span class="variable">$&#123;dir%/&#125;</span></span><br><span class="line">log_file=<span class="string">"<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/<span class="variable">$&#123;log_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span> not exists; please run frps.sh first"</span>;</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">[common]</span><br><span class="line">server_addr = <span class="variable">$&#123;server_addr&#125;</span></span><br><span class="line">server_port = <span class="variable">$&#123;server_port&#125;</span></span><br><span class="line">token = <span class="variable">$&#123;token&#125;</span></span><br><span class="line">log_file = <span class="variable">$&#123;log_file&#125;</span></span><br><span class="line"></span><br><span class="line">[plugin_socks5]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = <span class="variable">$&#123;remote_port&#125;</span></span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = <span class="variable">$&#123;plugin_user&#125;</span></span><br><span class="line">plugin_passwd = <span class="variable">$&#123;plugin_passwd&#125;</span></span><br><span class="line">use_encryption = <span class="literal">true</span></span><br><span class="line">use_compression = <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line">) &gt;  <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frpc.ini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">generate_service</span></span>() &#123;</span><br><span class="line">  (</span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=frpc</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=30</span><br><span class="line">ExecStart=<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frpc -c <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;frp_type&#125;</span>/frpc.ini</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> \<span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; /lib/systemd/system/frpc.service</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_service</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">"/lib/systemd/system/frpc.service"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">read</span> -r -p <span class="string">"/lib/systemd/system/frpc.service已存在,覆盖 [N/y] "</span> input</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;input&#125;</span> = <span class="string">"Y"</span> -o <span class="variable">$&#123;input&#125;</span> = <span class="string">'y'</span> ]; <span class="keyword">then</span></span><br><span class="line">      generate_service</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start_service</span></span>() &#123;</span><br><span class="line">  systemctl <span class="built_in">enable</span> frpc</span><br><span class="line">  systemctl restart frpc</span><br><span class="line">  systemctl status frpc </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_service</span><br><span class="line">start_service</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp官方中文文档</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[内网穿透] ubuntu上搭建ngrok 1.x</title>
      <link href="/2018/06/15/ngrok/"/>
      <url>/2018/06/15/ngrok/</url>
      
        <content type="html"><![CDATA[<p>ngrok的搭建和使用 包括客户端和服务器端<br><a id="more"></a></p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ngrok-server</span><br></pre></td></tr></table></figure><h3 id="手动启动"><a href="#手动启动" class="headerlink" title="手动启动"></a>手动启动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrokd -tlsKey=<span class="string">"tlsKey"</span> -tlsCrt=<span class="string">"tlsCrt"</span> -domain=<span class="string">"ngrok.xinshangshangxin.com"</span> -httpAddr=<span class="string">":8081"</span>  -httpsAddr=<span class="string">""</span></span><br></pre></td></tr></table></figure><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><ol><li>将下面的内容保存为 <code>ngrokd</code></li><li><code>chmod +x ngrokd</code></li><li><code>ngrokd (start|stop|status)</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These setting need you to set.</span></span><br><span class="line">TLSKEY=<span class="string">"set your TLSKEY"</span></span><br><span class="line">TLSCRT=<span class="string">"set your TLSCRT"</span></span><br><span class="line">DOMAIN=<span class="string">"set you ngrok domain"</span></span><br><span class="line">ADDR=8081</span><br><span class="line">LOGFILE=/data/logs/ngrokd.log</span><br><span class="line">PIDFILE=/var/run/ngrokd.pid</span><br><span class="line">DESC=ngrokd</span><br><span class="line"></span><br><span class="line"><span class="comment"># you should use /lib/init.d/functions </span></span><br><span class="line">. /lib/lsb/init-functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">do_start()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ -s <span class="variable">$PIDFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">        RETVAL=1</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Already running!"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$DESC</span>"</span></span><br><span class="line">        touch <span class="variable">$&#123;LOGFILE&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ngrokd -tlsKey=<span class="variable">$TLSKEY</span> -tlsCrt=<span class="variable">$TLSCRT</span> -domain=<span class="variable">$DOMAIN</span> -httpAddr=:<span class="variable">$&#123;ADDR-80&#125;</span> -httpsAddr=  -log=<span class="variable">$LOGFILE</span>"</span></span><br><span class="line">        <span class="comment"># you need to modify the command as you needing</span></span><br><span class="line">        nohup ngrokd -tlsKey=<span class="variable">$TLSKEY</span> -tlsCrt=<span class="variable">$TLSCRT</span> -domain=<span class="variable">$DOMAIN</span> -httpAddr=:<span class="variable">$&#123;ADDR-80&#125;</span> -httpsAddr=  -<span class="built_in">log</span>=<span class="variable">$LOGFILE</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        PID=$!</span><br><span class="line">        [ <span class="variable">$RETVAL</span> -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="variable">$PID</span> &gt; <span class="variable">$PIDFILE</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do_stop()</span><br><span class="line">&#123;</span><br><span class="line">    killproc -p <span class="variable">$PIDFILE</span> ngrokd</span><br><span class="line">    RETVAL=<span class="string">"$?"</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; rm -rf <span class="variable">$PIDFILE</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    do_start</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  stop)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stopping <span class="variable">$DESC</span>"</span></span><br><span class="line">    do_stop</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  logs)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"tail -f log"</span></span><br><span class="line">    tail -f <span class="variable">$&#123;LOGFILE&#125;</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  status)</span><br><span class="line">    <span class="keyword">if</span> [ ! -s <span class="variable">$PIDFILE</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Not running"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        PID=`cat <span class="variable">$PIDFILE</span>`</span><br><span class="line">        <span class="keyword">if</span> [[ -n <span class="variable">$PID</span> &amp;&amp; -n <span class="string">"`ps -p <span class="variable">$PID</span> | grep <span class="variable">$PID</span>`"</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Running (<span class="variable">$&#123;PID&#125;</span>)"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Not running, yet <span class="variable">$&#123;PIDFILE&#125;</span> exists (stop ngrokd will fix this)"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: ngrokd (start|stop|status)"</span></span><br><span class="line">    <span class="built_in">exit</span> 3</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h3 id="域名指向"><a href="#域名指向" class="headerlink" title="域名指向"></a>域名指向</h3><p>将 <code>ngrok.xinshangshangxin.com</code> 和 <code>*.ngrok.xinshangshangxin.com</code> 指向 装有 ngrok-server的机器</p><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><p>需要开放端口 4443<br>如果需要<code>TCP</code> 链接, 还要开放 <code>TCP</code>端口, 端口自定义(比如<code>33333</code>)</p><h3 id="访问时-去除端口访问"><a href="#访问时-去除端口访问" class="headerlink" title="访问时 去除端口访问"></a>访问时 去除端口访问</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.ngrok.xinshangshangxin.com</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8081;</span><br><span class="line">        <span class="comment"># 最主要的一句话</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac </span></span><br><span class="line">brew install ngrok-client</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt install ngrok-client</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>vim ~/ngrok.cfg</code></p><p>输入下面的内容<br>其中 <code>remote_port</code> 为固定远程连接<br><code>proto</code> 为本机地址<br><code>subdomain</code> 为二级域名前缀</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server_addr: ngrok.xinshangshangxin.com:4443</span><br><span class="line">trust_host_root_certs: true</span><br><span class="line"></span><br><span class="line">tunnels:</span><br><span class="line">    ssh:</span><br><span class="line">        remote_port: 33333</span><br><span class="line">        proto:</span><br><span class="line">            tcp: 0.0.0.0:22</span><br><span class="line"></span><br><span class="line">    server:</span><br><span class="line">        remote_port: 8081</span><br><span class="line">        subdomain: test</span><br><span class="line">        proto:</span><br><span class="line">            http: 0.0.0.0:4000</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngrok -config=ngrok.cfg start ssh</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ngrok -config=ngrok.cfg start server</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong><code>ngrok 2.x</code> 源码未公开</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok 2.x is the successor to 1.x and the focus of all current development effort. Its source code is not available.</span><br></pre></td></tr></table></figure></p><p>所以网上有些 客户端配置是针对2.x版本的, 并不适用!!</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.jianshu.com/p/d35962b0dba4" target="_blank" rel="noopener">VPS自搭建Ngrok内网穿透服务</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 使用 -v 或 --volume 映射文件报错</title>
      <link href="/2018/06/07/docker-volume-file/"/>
      <url>/2018/06/07/docker-volume-file/</url>
      
        <content type="html"><![CDATA[<p>-v 出现 unknown: Are you trying to mount a directory onto a file (or vice-versa)<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>假设 <code>docker run -v local_file_path:docker_file_path docker_image</code></p><ol><li><code>local_file_path</code> 必须存在, 并且类型为文件</li><li><code>docker_file_path</code> 必须存在, 绝对路径, 并且类型为文件</li></ol><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>从 <a href="https://docs.docker.com/storage/bind-mounts/#differences-between--v-and---mount-behavior" target="_blank" rel="noopener">docker 文档 <code>Differences between -v and --mount behavior</code></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If you use -v or --volume to bind-mount a file or directory that does not yet exist on the Docker host, -v creates the endpoint for you. </span><br><span class="line">It is always created as a directory.</span><br></pre></td></tr></table></figure><p><strong>如果文件不存在, docker总会创建一个目录</strong></p><h2 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h2><p>添加 <code>-it --entrypoint bash</code> 进入容器查看文件是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v local_file_path:docker_file_path -it --entrypoint bash docker_image</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://stackoverflow.com/questions/42248198/how-to-mount-a-single-file-in-a-volume#47099098" target="_blank" rel="noopener">How to mount a single file in a volume</a><br><br></li></ul><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢!</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github project use travis npm publish</title>
      <link href="/2018/05/16/travis-npm/"/>
      <url>/2018/05/16/travis-npm/</url>
      
        <content type="html"><![CDATA[<p>github的项目使用travis发布npm包<br><a id="more"></a></p><h2 id="获取-npm-token"><a href="#获取-npm-token" class="headerlink" title="获取 npm token"></a>获取 npm token</h2><ol><li>在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> 注册/登录</li><li>右上角点击头像 =&gt; <code>Tokens</code> 进入 <code>Tokens</code> 编辑页<figure class="image-box">                <img src="/img/travis-npm/001.png" alt="" title="" class="">                <p></p>            </figure></li><li>新增一个token, 记得保存这个token, 后面无法再次查看, 只能新增</li></ol><h2 id="配置-travis"><a href="#配置-travis" class="headerlink" title="配置 travis"></a>配置 travis</h2><ol><li>进入 <a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a>, 注册 或者 使用 GitHub登录(右上角<code>Sign in with GitHub</code>)</li><li>进入 <a href="https://travis-ci.org/profile/" target="_blank" rel="noopener">https://travis-ci.org/profile/</a> 页面, 选择 你要自动构建的项目, 左侧可以切换组织项目</li><li>如下图, 勾选开启构建<figure class="image-box">                <img src="/img/travis-npm/002.png" alt="" title="" class="">                <p></p>            </figure></li><li>点击要构建的项目, 右上角点击 <code>Settings</code><figure class="image-box">                <img src="/img/travis-npm/003.png" alt="" title="" class="">                <p></p>            </figure></li><li>在 <code>Environment Variables</code> 中 添加 <code>NPM_EMAIL</code> (你npm账户的邮箱) 和 <code>NPM_TOKEN</code> (上面获取的 token)<figure class="image-box">                <img src="/img/travis-npm/004.png" alt="" title="" class="">                <p></p>            </figure></li></ol><h2 id="配置项目代码"><a href="#配置项目代码" class="headerlink" title="配置项目代码"></a>配置项目代码</h2><p>在项目中添加 <code>.travis.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>                <span class="comment"># 使用 nodejs</span></span><br><span class="line"><span class="attr">node_js:</span>                         <span class="comment"># 版本为 8</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="string">yarn</span>                      <span class="comment"># 使用 yarn 而不是 npm (按照实际情况调整)</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">yarn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span>                            <span class="comment"># 添加 job</span></span><br><span class="line"><span class="attr">  include:</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">npm</span> <span class="string">release</span>   </span><br><span class="line"><span class="attr">      if:</span> <span class="string">tag</span> <span class="string">IS</span> <span class="string">present</span>         <span class="comment"># 如果 push的代码 存在 tag</span></span><br><span class="line"><span class="attr">      node_js:</span> <span class="string">"8"</span>               <span class="comment"># 使用 8.x 的 node</span></span><br><span class="line"><span class="attr">      script:</span> <span class="string">yarn</span> <span class="string">compile</span>       <span class="comment"># 执行 yarn compile 命令(按照实际情况调整)</span></span><br><span class="line"><span class="attr">      before_deploy:</span>             <span class="comment"># 在 发布之前, 执行命令(按照实际情况调整)</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cd</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">      deploy:</span></span><br><span class="line"><span class="attr">        provider:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">        email:</span> <span class="string">"$NPM_EMAIL"</span></span><br><span class="line"><span class="attr">        api_key:</span> <span class="string">"$NPM_TOKEN"</span></span><br><span class="line"><span class="attr">        skip_cleanup:</span> <span class="literal">true</span>       <span class="comment"># 为了防止 Travis CI 清理额外的文件夹并删除你做的改变</span></span><br><span class="line"><span class="attr">        on:</span></span><br><span class="line"><span class="attr">          tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="提交你的代码到-github"><a href="#提交你的代码到-github" class="headerlink" title="提交你的代码到 github"></a>提交你的代码到 github</h2><ol><li>先commit 你的正常修改</li><li><code>npm version patch/minor/major</code> 更新你的版本<br>比如 使用 <code>npm version patch</code>, 会执行<br>a) <code>package.json</code> 中插入（更新）的版本号<br>b) 创建一个新的提交<br>c) 创建一个 git 标签</li><li><code>git push origin master --tag</code>, push你的代码到github上, 同时把tag也</li></ol><h2 id="去-travis-查看是否-开始构建-并查看构建是否成功"><a href="#去-travis-查看是否-开始构建-并查看构建是否成功" class="headerlink" title="去 travis 查看是否 开始构建, 并查看构建是否成功"></a>去 <code>travis</code> 查看是否 开始构建, 并查看构建是否成功</h2><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/xitu/gold-miner/blob/master/TODO/automated-npm-releases-with-travis-ci.md" target="_blank" rel="noopener">使用 Travis CI 自动发布 npm</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> travis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请letsencrypt安装泛域名</title>
      <link href="/2018/03/22/wildcard-domain/"/>
      <url>/2018/03/22/wildcard-domain/</url>
      
        <content type="html"><![CDATA[<p>在VPS上申请letsencrypt泛域名, 利用阿里云dns自动申请证书并且加入nginx<br><a id="more"></a></p><h2 id="域名申请工具-acme-sh"><a href="#域名申请工具-acme-sh" class="headerlink" title="域名申请工具 acme.sh"></a>域名申请工具 <a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a></h2><h3 id="下载安装-acme-sh"><a href="#下载安装-acme-sh" class="headerlink" title="下载安装 acme.sh"></a>下载安装 acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><h3 id="重启-terminal"><a href="#重启-terminal" class="headerlink" title="重启 terminal"></a>重启 <code>terminal</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启zsh</span></span><br><span class="line"><span class="built_in">exec</span> zsh -l</span><br></pre></td></tr></table></figure><h2 id="生成安装泛域名证书"><a href="#生成安装泛域名证书" class="headerlink" title="生成安装泛域名证书"></a>生成安装泛域名证书</h2><h3 id="申请阿里云-Api-key-和-Ali-Secret-可以按照-acme-sh-进行设置"><a href="#申请阿里云-Api-key-和-Ali-Secret-可以按照-acme-sh-进行设置" class="headerlink" title="申请阿里云 Api_key 和 Ali_Secret (可以按照 acme.sh 进行设置)"></a>申请阿里云 <code>Api_key</code> 和 <code>Ali_Secret</code> (可以按照 <a href="https://github.com/Neilpang/acme.sh#7-automatic-dns-api-integration" target="_blank" rel="noopener">acme.sh</a> 进行设置)</h3><ol><li>访问 <a href="https://ram.console.aliyun.com" target="_blank" rel="noopener">https://ram.console.aliyun.com</a></li><li>左侧菜单点击 用户管理, 右上角点击创建新用户</li><li>填写用户名, 点击确定, 注意保存 <code>AccessKeyId</code> 和 <code>AccessKeySecret</code><br><img src="/img/letsencrypt/001.png" alt=""><br><img src="/img/letsencrypt/002png" alt=""></li><li>添加授权<br><img src="/img/letsencrypt/003.png" alt=""><br><img src="/img/letsencrypt/004.png" alt=""></li></ol><h2 id="申请-证书"><a href="#申请-证书" class="headerlink" title="申请 证书"></a>申请 证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> Ali_Key=<span class="string">"上面申请的AccessKeyId"</span></span><br><span class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">"上面申请的AccessKeySecret"</span></span><br><span class="line"><span class="comment"># 把下面的 *.demo.com 改成 *.your.domain</span></span><br><span class="line">acme.sh --issue --dns dns_ali -d *.demo.com --dnssleep 0</span><br></pre></td></tr></table></figure><h2 id="安装cert并重启nginx"><a href="#安装cert并重启nginx" class="headerlink" title="安装cert并重启nginx"></a>安装cert并重启nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *.demo.com 改成 *.your.domain</span></span><br><span class="line"><span class="comment"># /etc/nginx/ssl/*.demo.com.key 和 /etc/nginx/ssl/*.demo.com.cer 改成你想要在 nginx.conf中引入配置的路径</span></span><br><span class="line"></span><br><span class="line">acme.sh --install-cert -d <span class="string">"*.demo.com"</span> \</span><br><span class="line">--key-file       <span class="string">"/etc/nginx/ssl/*.demo.com.key"</span>  \</span><br><span class="line">--fullchain-file <span class="string">"/etc/nginx/ssl/*.demo.com.cer"</span> \</span><br><span class="line">--reloadcmd     <span class="string">"systemctl reload nginx"</span></span><br></pre></td></tr></table></figure><h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name any-pre-domain.demo.com;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line"></span><br><span class="line">    # 配置你上面 --fullchain-file 的路径</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/*.demo.com.cer;</span><br><span class="line">    # 配置你上面 --key-file 的路径</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/*.demo.com.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:1337;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> letsencrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq安装并配置</title>
      <link href="/2018/02/08/rabbitmq-start/"/>
      <url>/2018/02/08/rabbitmq-start/</url>
      
        <content type="html"><![CDATA[<p>按照官方文档在ubuntu上安装rabbitmq记录<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.rabbitmq.com/install-debian.html#apt" target="_blank" rel="noopener">官方安装文档</a></p><h3 id="rabbitmq-依赖-Erlang"><a href="#rabbitmq-依赖-Erlang" class="headerlink" title="rabbitmq 依赖 Erlang"></a><a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">rabbitmq 依赖 Erlang</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb</span><br><span class="line">sudo dpkg -i erlang-solutions_1.0_all.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install erlang</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-16-04安装rabbitmq"><a href="#Ubuntu-16-04安装rabbitmq" class="headerlink" title="Ubuntu 16.04安装rabbitmq"></a>Ubuntu 16.04安装rabbitmq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add  Apt repository</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.bintray.com/rabbitmq/debian xenial main"</span> | sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># add public key </span></span><br><span class="line">wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># update the package list</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install rabbitmq-server package</span></span><br><span class="line">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a><a href="https://www.rabbitmq.com/configure.html#config-location" target="_blank" rel="noopener">配置文件位置</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Generic UNIX - $RABBITMQ_HOME/etc/rabbitmq/</span><br><span class="line">Debian - /etc/rabbitmq/</span><br><span class="line">RPM - /etc/rabbitmq/</span><br><span class="line">Mac OSX (Homebrew) - $&#123;install_prefix&#125;/etc/rabbitmq/, the Homebrew prefix is usually /usr/local</span><br><span class="line">Windows - %APPDATA%\RabbitMQ\</span><br></pre></td></tr></table></figure><h3 id="rabbitmq-conf-从RabbitMQ-3-7-0开始"><a href="#rabbitmq-conf-从RabbitMQ-3-7-0开始" class="headerlink" title="rabbitmq.conf(从RabbitMQ 3.7.0开始)"></a><a href="https://www.rabbitmq.com/configure.html#config-file" target="_blank" rel="noopener"><code>rabbitmq.conf</code>(<em>从RabbitMQ 3.7.0开始</em>)</a></h3><p>如果不存在 <code>rabbitmq.conf</code>, 可以手动创建一个, 使用默认配置请忽略<br>自己配置按照 <em><a href="https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example" target="_blank" rel="noopener">官方 example</a></em> 进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改 rabbitmq 端口</span><br><span class="line">listeners.tcp.default = 2018</span><br><span class="line"># 修改 rabbitmq 管理页面端口</span><br><span class="line">management.listener.port = 12018</span><br></pre></td></tr></table></figure><h3 id="打开管理页面"><a href="#打开管理页面" class="headerlink" title="打开管理页面"></a>打开管理页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h3 id="新增管理员用户"><a href="#新增管理员用户" class="headerlink" title="新增管理员用户"></a>新增管理员用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl add_user rabbitmqAdmin password</span><br><span class="line">sudo rabbitmqctl set_user_tags rabbitmqAdmin administrator</span><br></pre></td></tr></table></figure><h3 id="限制-queue的大小"><a href="#限制-queue的大小" class="headerlink" title="限制 queue的大小"></a>限制 queue的大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl set_policy --priority 1 --apply-to queues seneca seneca <span class="string">'&#123;"max-length": 1000&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="启动-暂停-状态"><a href="#启动-暂停-状态" class="headerlink" title="启动/暂停/状态"></a>启动/暂停/状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 16.04</span></span><br><span class="line">systemctl restart rabbitmq-server.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line">systemctl stop rabbitmq-server.service</span><br><span class="line">systemctl status rabbitmq-server.service</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.rabbitmq.com/configure.html" target="_blank" rel="noopener">官方文档</a><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>haraka收发邮件初级教程</title>
      <link href="/2018/02/04/haraka-introduction/"/>
      <url>/2018/02/04/haraka-introduction/</url>
      
        <content type="html"><![CDATA[<p>haraka没有开箱即用, 需要一番配置, 本文简单介绍了如何使用haraka和qq邮箱通讯<br><a id="more"></a></p><h1 id="安装并初始化"><a href="#安装并初始化" class="headerlink" title="安装并初始化"></a>安装并初始化</h1><h2 id="需要有自定义域名和修改域名解析的权限"><a href="#需要有自定义域名和修改域名解析的权限" class="headerlink" title="需要有自定义域名和修改域名解析的权限"></a>需要有自定义域名和修改域名解析的权限</h2><p><em>本地测试接收邮件可以不使用自定义域名, 外网接收邮件, 本地/外网发送邮件都需要设置域名解析 MX 设置</em></p><h2 id="全局安装haraka"><a href="#全局安装haraka" class="headerlink" title="全局安装haraka"></a>全局安装haraka</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 H 为大写</span></span><br><span class="line">npm install -g Haraka</span><br></pre></td></tr></table></figure><h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.haraka 为配置文件目录, 自行更改</span></span><br><span class="line">haraka -i ~/.haraka</span><br></pre></td></tr></table></figure><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为需要监听25端口, 部分账户需要sudo,   ~/.haraka为配置目录</span></span><br><span class="line">haraka -c ~/.haraka</span><br></pre></td></tr></table></figure><h2 id="安装测试工具-swaks-非必须-但是安装后测试方便"><a href="#安装测试工具-swaks-非必须-但是安装后测试方便" class="headerlink" title="安装测试工具 swaks (非必须, 但是安装后测试方便)"></a>安装测试工具 <code>swaks</code> (非必须, 但是安装后测试方便)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install swaks</span><br></pre></td></tr></table></figure><h1 id="接受邮件配置"><a href="#接受邮件配置" class="headerlink" title="接受邮件配置"></a>接受邮件配置</h1><h2 id="进入配置文件夹"><a href="#进入配置文件夹" class="headerlink" title="进入配置文件夹"></a>进入配置文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.haraka/config</span><br></pre></td></tr></table></figure><h2 id="修改日志level-方便查看错误"><a href="#修改日志level-方便查看错误" class="headerlink" title="修改日志level, 方便查看错误"></a>修改日志level, 方便查看错误</h2><p><code>vim log.ini</code>, 将 level 改成debug, 保存并退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level=debug</span><br></pre></td></tr></table></figure></p><h2 id="修改QUEUE配置为-test-queue"><a href="#修改QUEUE配置为-test-queue" class="headerlink" title="修改QUEUE配置为 test_queue"></a>修改QUEUE配置为 <code>test_queue</code></h2><p><code>vim plugins</code>, 注释 <code>queue/smtp_forward</code>, 添加 <code>test_queue</code>, 使用之后,接收到的邮件内容会写入<code>/tmp/mail.eml</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QUEUE</span></span><br><span class="line"><span class="comment"># queues: discard  qmail-queue  quarantine  smtp_forward  smtp_proxy</span></span><br><span class="line"><span class="comment"># Queue mail via smtp - see config/smtp_forward.ini for where your mail goes</span></span><br><span class="line"><span class="comment"># queue/smtp_forward</span></span><br><span class="line">test_queue</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="/img/haraka/1.png" alt="" title="" class="">                <p></p>            </figure><h2 id="修改-host-list-设置允许接受哪些后缀的-email-地址-将你的域名填入"><a href="#修改-host-list-设置允许接受哪些后缀的-email-地址-将你的域名填入" class="headerlink" title="修改 host_list, 设置允许接受哪些后缀的 email 地址, 将你的域名填入"></a>修改 <code>host_list</code>, 设置允许接受哪些后缀的 email 地址, 将你的域名填入</h2><p><code>vim host_list</code>, 添加你的域名, 比如 <code>example.com</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行是原来的host</span></span><br><span class="line">example.com</span><br></pre></td></tr></table></figure></p><h2 id="测试接受邮件"><a href="#测试接受邮件" class="headerlink" title="测试接受邮件"></a>测试接受邮件</h2><h3 id="a-使用-swaks-测试接受邮件-如果有域名-可看下一步-直接用外网域名测试"><a href="#a-使用-swaks-测试接受邮件-如果有域名-可看下一步-直接用外网域名测试" class="headerlink" title="a) 使用 swaks 测试接受邮件 (如果有域名, 可看下一步, 直接用外网域名测试)"></a>a) 使用 <code>swaks</code> 测试接受邮件 (如果有域名, 可看下一步, 直接用外网域名测试)</h3><p>下面命令中<code>-t to@example.com</code> 为本地接受地址, 域名后缀需要在<code>host_list</code>中存在  <code>-s localhost</code>为指定使用本地服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks -f from@qq.com -t to@example.com -s localhost</span><br></pre></td></tr></table></figure></p><p>查看是否收到邮件: <code>cat /tmp/mail.eml</code><br><figure class="image-box">                <img src="/img/haraka/2.png" alt="" title="" class="">                <p></p>            </figure></p><h3 id="b-配置MX记录-接收外部邮件-如果没有域名-请看上一步"><a href="#b-配置MX记录-接收外部邮件-如果没有域名-请看上一步" class="headerlink" title="b) 配置MX记录,接收外部邮件 (如果没有域名, 请看上一步)"></a>b) 配置MX记录,接收外部邮件 (如果没有域名, 请看上一步)</h3><ol><li>将 MX 解析到安装 <code>Haraka</code> 的服务器, 以下为阿里云解析设置, 其它请自行谷歌配置<figure class="image-box">                <img src="/img/haraka/3.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/haraka/4.png" alt="" title="" class="">                <p></p>            </figure></li><li>把你的域名地址写入到 <code>host_list</code> (上面已经做过了)</li><li><code>haraka -c ~/.haraka</code> 启动服务</li><li>使用qq邮箱发送邮件<figure class="image-box">                <img src="/img/haraka/5.png" alt="" title="" class="">                <p></p>            </figure></li><li>查看是否收到邮件 <code>cat /tmp/mail.eml</code><br>如下图对 <code>suLK1CBoYXJha2Eg1f3OxA==</code> 使用GBK的base64解密后为<code>测试 haraka 正文</code>. 解密地址  <a href="https://1024tools.com/base64" target="_blank" rel="noopener">https://1024tools.com/base64</a></li></ol><figure class="image-box">                <img src="/img/haraka/7.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/haraka/8.png" alt="" title="" class="">                <p></p>            </figure><h1 id="发送邮件配置-必须有域名和-MX-记录"><a href="#发送邮件配置-必须有域名和-MX-记录" class="headerlink" title="发送邮件配置 (必须有域名和 MX 记录)"></a>发送邮件配置 (必须有域名和 <code>MX</code> 记录)</h1><h2 id="配置-MX-记录-上面已经做过了-进入配置目录-cd-haraka-config"><a href="#配置-MX-记录-上面已经做过了-进入配置目录-cd-haraka-config" class="headerlink" title="配置 MX 记录 (上面已经做过了), 进入配置目录 cd ~/.haraka/config"></a>配置 <code>MX</code> 记录 (上面已经做过了), 进入配置目录 <code>cd ~/.haraka/config</code></h2><h2 id="启用-auth-flat-file-配置"><a href="#启用-auth-flat-file-配置" class="headerlink" title="启用 auth/flat_file 配置"></a>启用 <code>auth/flat_file</code> 配置</h2><p><code>vim plugins</code>, 放开 <code>auth/flat_file</code> 的注释<br><figure class="image-box">                <img src="/img/haraka/9.png" alt="" title="" class="">                <p></p>            </figure></p><h2 id="添加-auth-flat-file-配置文件"><a href="#添加-auth-flat-file-配置文件" class="headerlink" title="添加 auth_flat_file 配置文件"></a>添加 <code>auth_flat_file</code> 配置文件</h2><p><code>vim auth_flat_file.ini</code>(新建文件), 其中 <code>users</code> 为配置用户名和密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">methods=PLAIN,LOGIN</span><br><span class="line">[users]</span><br><span class="line">username=password</span><br></pre></td></tr></table></figure></p><h2 id="启动haraka服务"><a href="#启动haraka服务" class="headerlink" title="启动haraka服务"></a>启动haraka服务</h2><p><code>haraka -c ~/.haraka</code></p><h2 id="使用-swaks-测试发送邮件"><a href="#使用-swaks-测试发送邮件" class="headerlink" title="使用 swaks 测试发送邮件"></a>使用 <code>swaks</code> 测试发送邮件</h2><p>其中<a href="mailto:`from@example.com" target="_blank" rel="noopener">`from@example.com</a><code>改成你域名后缀,</code><a href="mailto:to@qq.com" target="_blank" rel="noopener">to@qq.com</a><code>改成你要接收的地址,</code>-s localhost`使用本地服务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks -f <span class="keyword">from</span>@example.com -t to@qq.com -au username -ap password -s localhost</span><br></pre></td></tr></table></figure></p><h2 id="指定非localhost地址发送邮件"><a href="#指定非localhost地址发送邮件" class="headerlink" title="指定非localhost地址发送邮件"></a>指定非localhost地址发送邮件</h2><p>因为 <code>auth/flat_file</code> 针对 <code>localhost</code> 地址会忽略 <code>TLS</code> 要求, 当指定server后会发送失败, 从日志中可以看到 <code>[auth/flat_file] Auth disabled for insecure public connection</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定sever 发送</span></span><br><span class="line">swaks -f from@example.com -t to@qq.com -au username -ap password -s example.com</span><br></pre></td></tr></table></figure><h2 id="新建-plugin-忽略-TSL-要求"><a href="#新建-plugin-忽略-TSL-要求" class="headerlink" title="新建 plugin 忽略 TSL 要求"></a>新建 plugin 忽略 <code>TSL</code> 要求</h2><h3 id="创建-新plugin"><a href="#创建-新plugin" class="headerlink" title="创建 新plugin"></a>创建 新plugin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haraka -c ~/.haraka -p auth/insecure_flat_file</span><br></pre></td></tr></table></figure><h3 id="复制-flat-file-并修改成忽略TSL-要求"><a href="#复制-flat-file-并修改成忽略TSL-要求" class="headerlink" title="复制 flat_file 并修改成忽略TSL 要求"></a>复制 <code>flat_file</code> 并修改成忽略TSL 要求</h3><p>将<a href="https://github.com/haraka/Haraka/blob/bfa2156f961da0988c5e05b2e3c5582511e11b4d/plugins/auth/flat_file.js#L19" target="_blank" rel="noopener">原来flat_file.js</a>, 注释掉如图所示的这一行, 然后将内容写入 <code>insecure_flat_file.js</code><br><figure class="image-box">                <img src="/img/haraka/10.png" alt="" title="" class="">                <p></p>            </figure><br><code>vim ~/.haraka/plugins/auth/insecure_flat_file.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Auth against a flat file</span></span><br><span class="line"></span><br><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> plugin = <span class="keyword">this</span>;</span><br><span class="line">    plugin.inherits(<span class="string">'auth/auth_base'</span>);</span><br><span class="line">    plugin.load_flat_ini();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.load_flat_ini = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> plugin = <span class="keyword">this</span>;</span><br><span class="line">    plugin.cfg = plugin.config.get(<span class="string">'auth_flat_file.ini'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        plugin.load_flat_ini();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.hook_capabilities = <span class="function"><span class="keyword">function</span> (<span class="params">next, connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> plugin = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// don't allow AUTH unless private IP or encrypted</span></span><br><span class="line">    <span class="keyword">if</span> (!connection.remote.is_private &amp;&amp; !connection.tls.enabled) &#123;</span><br><span class="line">        connection.logdebug(plugin,<span class="string">"Auth continue, but insecure public connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> methods = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (plugin.cfg.core &amp;&amp; plugin.cfg.core.methods ) &#123;</span><br><span class="line">        methods = plugin.cfg.core.methods.split(<span class="string">','</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        connection.capabilities.push(<span class="string">'AUTH '</span> + methods.join(<span class="string">' '</span>));</span><br><span class="line">        connection.notes.allowed_auth_methods = methods;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.get_plain_passwd = <span class="function"><span class="keyword">function</span> (<span class="params">user, connection, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> plugin = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (plugin.cfg.users[user]) &#123;</span><br><span class="line">        <span class="keyword">return</span> cb(plugin.cfg.users[user].toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cb();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="修改-plugins-使用-insecure-flat-file"><a href="#修改-plugins-使用-insecure-flat-file" class="headerlink" title="修改 plugins, 使用 insecure_flat_file"></a>修改 plugins, 使用 insecure_flat_file</h3><p><code>vim ~/.haraka/config/plugins</code>, 添加<code>auth/insecure_flat_file</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># AUTH plugins require TLS before AUTH is advertised, see</span><br><span class="line">#     https://github.com/haraka/Haraka/wiki/Require-SSL-TLS</span><br><span class="line"># auth/flat_file</span><br><span class="line"># auth/auth_proxy</span><br><span class="line"># auth/auth_ldap</span><br><span class="line">auth/insecure_flat_file</span><br></pre></td></tr></table></figure></p><h3 id="启动haraka服务-并测试"><a href="#启动haraka服务-并测试" class="headerlink" title="启动haraka服务 并测试"></a>启动haraka服务 并测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haraka -c ~<span class="regexp">/.haraka</span></span><br><span class="line"><span class="regexp">swaks -f from@example.com -t to@qq.com -au username -ap password -s example.com</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://thihara.github.io/Creating-E-Mail-Service-with-Haraka/" target="_blank" rel="noopener">Creating Your Own E-Mail service with Haraka</a></li><li><a href="https://haraka.github.io/README.html" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://www.youtube.com/watch?v=6twKXMAsPsw&amp;feature=youtu.be" target="_blank" rel="noopener">官方视频</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> haraka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nvm导致zsh启动慢</title>
      <link href="/2017/06/07/zsh-nvm-slow/"/>
      <url>/2017/06/07/zsh-nvm-slow/</url>
      
        <content type="html"><![CDATA[<p>解决nvm启动慢, 自动检测 <code>.nvmrc</code> 慢<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>新建终端时, 由于载入nvm, 导致终端载入超过1秒.<br>在nvm安装时, 要求在在 <code>~/.bash_profile, ~/.zshrc, ~/.profile, ~/.bashrc</code> 中的一个载入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p>就是<code>. &quot;$NVM_DIR/nvm.sh&quot;</code>拖慢了终端的启动</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>从官方 <a href="https://github.com/creationix/nvm/issues/860" target="_blank" rel="noopener">issue#860</a>上了解到, 可以使用 <code>--no-use</code> 和 手动指定默认 <code>node</code> 路径来加快执行速度  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  --no-use</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.nvm/versions/node/v8.0.0/bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><em>默认路径可以通过 <code>nvm which default</code> 获取</em></p><h2 id="检查-nvmrc-自动载入对应node版本处理"><a href="#检查-nvmrc-自动载入对应node版本处理" class="headerlink" title="检查 .nvmrc 自动载入对应node版本处理"></a>检查 .nvmrc 自动载入对应node版本处理</h2><p>通过判断是否首次载入来加快速度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动切换node版本 #</span></span><br><span class="line">nvmVersionFirstDetect=1;</span><br><span class="line"><span class="built_in">autoload</span> -U add-zsh-hook</span><br><span class="line">load-<span class="function"><span class="title">nvmrc</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> node_version=<span class="string">"<span class="variable">$(nvm version)</span>"</span></span><br><span class="line">  <span class="built_in">local</span> nvmrc_path=<span class="string">"<span class="variable">$(nvm_find_nvmrc)</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$nvmrc_path</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">local</span> nvmrc_node_version=$(nvm version <span class="string">"<span class="variable">$(cat "$&#123;nvmrc_path&#125;")</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$nvmrc_node_version</span>"</span> = <span class="string">"N/A"</span> ]; <span class="keyword">then</span></span><br><span class="line">      nvm install</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$nvmrc_node_version</span>"</span> != <span class="string">"<span class="variable">$node_version</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      nvm use</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">elif</span> [[ <span class="variable">$&#123;nvmVersionFirstDetect&#125;</span> -eq 0 &amp;&amp; <span class="string">"<span class="variable">$node_version</span>"</span> != <span class="string">"<span class="variable">$(nvm version default)</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Reverting to nvm default version"</span></span><br><span class="line">    nvm use default</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  nvmVersionFirstDetect=0</span><br><span class="line">&#125;</span><br><span class="line">add-zsh-hook chpwd load-nvmrc</span><br><span class="line">load-nvmrc</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="/img/zsh-nvm-slow/1.png" alt="load-nvmrc" title="" class="">                <p>load-nvmrc</p>            </figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://mushanshitiancai.github.io/2016/07/29/js/tools/%E8%A7%A3%E5%86%B3nvm%E5%AF%BC%E8%87%B4%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决nvm导致终端启动慢的问题</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac运行hadoop出现 Error: Java heap space</title>
      <link href="/2017/04/27/hadoop-java-heap-space/"/>
      <url>/2017/04/27/hadoop-java-heap-space/</url>
      
        <content type="html"><![CDATA[<p>mac 运行hadoop出现 Error: Java heap space<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p><code>Error: Java heap space</code>  </p><p><img src="/img/hadoop/1.png" alt="hadoop"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><ul><li>编辑文件 <code>/usr/local/Cellar/hadoop/2.7.3/libexec/etc/hadoop/mapred-site.xml</code> 添加 <code>Xmx4096m</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx4096m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>或者在运行hadoop之前 <code>export HADOOP_OPTS=&quot;-Xmx4096m&quot;</code></p></li><li><p>或者对Hadoop 2+, 修改 <code>mapreduce.map.java.opts</code></p></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://stackoverflow.com/questions/15609909/error-java-heap-space?answertab=active#tab-top" target="_blank" rel="noopener">http://stackoverflow.com/questions/15609909/error-java-heap-space?answertab=active#tab-top</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]Mac OS X EI Capitan 下安装及配置伪分布式 Hadoop 环境</title>
      <link href="/2017/04/26/mac-hadoop/"/>
      <url>/2017/04/26/mac-hadoop/</url>
      
        <content type="html"><![CDATA[<p>转载并进行适当修改<br><a id="more"></a></p><h2 id="预装环境变量"><a href="#预装环境变量" class="headerlink" title="预装环境变量"></a>预装环境变量</h2><ul><li><p><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></p></li><li><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK8</a></p></li><li><p>Xcode( App Store 更新/下载)</p></li></ul><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><p>为了保证远程登录管理 Hadoop 及 Hadoop 节点用户共享的安全性，Hadoop 需要配置使用 SSH 协议</p><ul><li><p>打开系统偏好设置-共享-远程登录-允许访问-所有用户</p></li><li><p>打开&lt;终端&gt;，分别输入  </p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -P <span class="string">''</span> -f ~/.ssh/id_dsa</span><br><span class="line">cat ~/.ssh/id_dsa.pub &gt;&gt;~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><ul><li>配置好之后，输入  <code>ssh localhost</code>, 登录成功即配置完成</li></ul><h2 id="安装及配置-Hadoop"><a href="#安装及配置-Hadoop" class="headerlink" title="安装及配置 Hadoop"></a>安装及配置 Hadoop</h2><h3 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h3><ul><li>&lt;终端&gt;输入  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hadoop</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置伪分布式-Hadoop"><a href="#配置伪分布式-Hadoop" class="headerlink" title="配置伪分布式 Hadoop"></a><em>配置伪分布式 Hadoop</em></h3><p><br></p><h4 id="配置-hadoop-env-sh"><a href="#配置-hadoop-env-sh" class="headerlink" title="配置 hadoop-env.sh"></a>配置 <code>hadoop-env.sh</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p>将  </p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true&quot;</span><br></pre></td></tr></table></figure></blockquote><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true -Djava.security.krb5.realm= -Djava.security.krb5.kdc=&quot;</span><br></pre></td></tr></table></figure></p><h4 id="配置-yarn-env-sh"><a href="#配置-yarn-env-sh" class="headerlink" title="配置 yarn-env.sh"></a>配置 <code>yarn-env.sh</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oopen /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/yarn-env.sh</span><br></pre></td></tr></table></figure><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YARN_OPTS=&quot;$YARN_OPTS -Djava.security.krb5.realm=OX.AC.UK -Djava.security.krb5.kdc=kdc0.ox.ac.uk:kdc1.ox.ac.uk&quot;</span><br></pre></td></tr></table></figure></p><h4 id="配置-core-site-xml"><a href="#配置-core-site-xml" class="headerlink" title="配置 core-site.xml"></a>配置 <code>core-site.xml</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/local/Cellar/hadoop/2.7.3/libexec/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><p>修改为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>             </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span>          </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="配置-hdfs-core-xml"><a href="#配置-hdfs-core-xml" class="headerlink" title="配置 hdfs-core.xml"></a>配置 <code>hdfs-core.xml</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><p>配置为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="配置-mapred-site-xml"><a href="#配置-mapred-site-xml" class="headerlink" title="配置 mapred-site.xml"></a>配置 <code>mapred-site.xml</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/mapred-site.xml.template /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/mapred-site.xml</span><br><span class="line">open /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure><p>配置为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx4096m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="配置-yarn-site-xml"><a href="#配置-yarn-site-xml" class="headerlink" title="配置 yarn-site.xml"></a>配置 <code>yarn-site.xml</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure><p>配置为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="格式化-HDFS"><a href="#格式化-HDFS" class="headerlink" title="格式化 HDFS"></a>格式化 <code>HDFS</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /tmp/hadoop-tanjiti</span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li><p>启动 <code>HDFS</code>   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p>启动 MapReduce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p>检查启动情况    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1536</span><br><span class="line">6594 NameNode</span><br><span class="line">6818 SecondaryNameNode</span><br><span class="line">65478 Jps</span><br><span class="line">6694 DataNode</span><br><span class="line">6950 ResourceManager</span><br><span class="line">7051 NodeManager</span><br><span class="line">1982 Launcher</span><br><span class="line">15903 GradleDaemon</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>运行 MapReduce 自带实例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar pi 2 5</span><br></pre></td></tr></table></figure></li></ul><h3 id="可视化查看"><a href="#可视化查看" class="headerlink" title="可视化查看"></a>可视化查看</h3><ul><li>Cluster Status <a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></li><li>HDFS status <a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a></li><li>secondaryNamenode <a href="http://localhost:50090" target="_blank" rel="noopener">http://localhost:50090</a></li></ul><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><ul><li><a href="https://github.com/100steps/Blogs/issues/10" target="_blank" rel="noopener">https://github.com/100steps/Blogs/issues/10</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sails中使用mongodb的mapReduce出现lodash中定义的root</title>
      <link href="/2017/01/13/sails-lodash-mongodb-mapReduce/"/>
      <url>/2017/01/13/sails-lodash-mongodb-mapReduce/</url>
      
        <content type="html"><![CDATA[<p>在sails中使用mongodb的mapReduce, 出现错误 ReferenceError: root is not defined<br><a id="more"></a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在 <code>sails</code> 中的 <code>collection.mapReduce</code>, <code>scope</code>定义为  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scope = &#123;</span><br><span class="line">  <span class="string">'其它方法'</span>: <span class="string">'其它方法'</span>,</span><br><span class="line">  getZeroDay: UtilitiesService.getZeroDay,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中调用了 <code>service</code> 中定义的方法 <code>getZeroDay</code><br>在 sails0.10 中使用没有问题, 但是更新到sails0.12后出现了 <code>ReferenceError: root is not defined</code></p><figure class="image-box">                <img src="/img/sails-lodash-mongodb-mapReduce/1.png" alt="" title="" class="">                <p></p>            </figure><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>在 UtilitiesService 定义了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZeroDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global.getZeroDay = getZeroDay;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getZeroDay: getZeroDay,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在其它地方调用如下内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(global.getZeroDay === UtilitiesService.getZeroDay); </span><br><span class="line"><span class="built_in">console</span>.log(UtilitiesService.getZeroDay.toString());</span><br></pre></td></tr></table></figure></p><p>结果却是 <code>UtilitiesService.getZeroDay</code> 被转换了<br><figure class="image-box">                <img src="/img/sails-lodash-mongodb-mapReduce/2.png" alt="" title="" class="">                <p></p>            </figure></p><p>从sails的源码中得知, sails0.12版本对 <code>loadService</code> 多出了 <code>bindToSails</code>, 而 <code>bindToSails</code> 调用了 <code>_.bindAll</code>, 最后输出了如上图所示的内容<br><figure class="image-box">                <img src="/img/sails-lodash-mongodb-mapReduce/3.png" alt="sails0.10" title="" class="">                <p>sails0.10</p>            </figure></p><figure class="image-box">                <img src="/img/sails-lodash-mongodb-mapReduce/4.png" alt="sails0.12" title="" class="">                <p>sails0.12</p>            </figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><code>collection.mapReduce</code> 的 <code>scope</code> 不要从 <code>service</code> 中获取</p><p><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> sails </tag>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>safari无法打开https网页</title>
      <link href="/2017/01/09/safari-https-fail-to-connect/"/>
      <url>/2017/01/09/safari-https-fail-to-connect/</url>
      
        <content type="html"><![CDATA[<p>Android和桌面chrome代开网址没有问题,但是iphone和桌面safari却出现: 「 无法打开页面<a href="https://XXXXX，因为网络连接被重设。如果服务器或网络连接忙碌，此问题可能发生。请等待几分钟，然后再试一次。」" target="_blank" rel="noopener">https://XXXXX，因为网络连接被重设。如果服务器或网络连接忙碌，此问题可能发生。请等待几分钟，然后再试一次。」</a><br><a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>打开网址出现 Safari   </p><blockquote><p>「 无法打开页面”https ://XXXXX”，因为网络连接被重设。如果服务器或网络连接忙碌，此问题可能发生。请等待几分钟，然后再试一次。」  </p></blockquote><div></div><blockquote><p>「 Safari cannot open the page because the network connection was reset. The server may be busy 」</p></blockquote><p> <img src="/img/safari-https/1.jpg" alt=""></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 nginx的 server 配置中添加<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl_session_cache shared:SSL:10m;</span><br></pre></td></tr></table></figure></p><p>这个可能和<a href="https://trac.nginx.org/nginx/ticket/235" target="_blank" rel="noopener">nginx的一个ticket相关</a>, 在nginx1.10中没有发现, 在1.8中出现了, 其它版本未知.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://serverfault.com/questions/646142/ssl-proxying-on-nginx-different-behavior-in-different-clients" target="_blank" rel="noopener">http://serverfault.com/questions/646142/ssl-proxying-on-nginx-different-behavior-in-different-clients</a></li><li><a href="https://community.letsencrypt.org/t/apple-safari-browsers-fail-to-connect/3731/4" target="_blank" rel="noopener">https://community.letsencrypt.org/t/apple-safari-browsers-fail-to-connect/3731/4</a></li></ul><p><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]Lodash 中 assign，extend 和 merge 的区别</title>
      <link href="/2016/12/23/assign-vs-extend-vs-merge-in-lodash/"/>
      <url>/2016/12/23/assign-vs-extend-vs-merge-in-lodash/</url>
      
        <content type="html"><![CDATA[<p>我们经常在别人的代码中看见 assign，extend，merge 函数，这三个函数用起来很相似，都是合并源对象的属性到目标对象中。既然都是合并对象，为什么还分三个不同的函数呢？它们之间到底有什么区别呢？<br><a id="more"></a></p><h2 id="assign-object-sources"><a href="#assign-object-sources" class="headerlink" title="assign(object, [sources])"></a>assign(object, [sources])</h2><p>我们先看看官方网站上面的定义：</p><blockquote><p>Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.</p></blockquote><p>把源对象(sources)的属性分配到目标对象(object)，源对象会从左往右地调用，后面对象的属性会覆盖前面的。</p><p>看看下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">assign(&#123;&#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面的 &#123; a: 2 &#125; 把前面的 &#123; a: 1 &#125; 覆盖了</span></span><br><span class="line">assign(&#123;&#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// &#123; a: 2, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察下面两个例子，如果属性值为 object，后面的值会覆盖前面的值</span></span><br><span class="line">assign(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">3</span> &#125; &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2, d: 3 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line">assign(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">3</span> &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">e</span>: <span class="number">4</span> &#125; &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; e: 4 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `assign` 函数会忽略原型链上的属性。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.c = <span class="number">3</span>; &#125;</span><br><span class="line">Foo.prototype.d = <span class="number">4</span>;</span><br><span class="line">assign(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="keyword">new</span> Foo());</span><br><span class="line"><span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `assign` 会修改原来的对象</span></span><br><span class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">assign(test, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test);      <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="extend-object-sources"><a href="#extend-object-sources" class="headerlink" title="extend(object, [sources])"></a>extend(object, [sources])</h2><p>在 3.x 版本中，<code>extend</code> 是 <code>assign</code> 的别名，它们的作用是一模一样的。<br>在 4.x 版本中，<code>extend</code> 是 <code>assignIn</code> 的别名，和 <code>assign</code> 有点区别。</p><p>官方定义如下：</p><blockquote><p>This method is like _.assign except that it iterates over own and inherited source properties.</p></blockquote><p>在上面的例子中，我们知道 <code>assign</code> 函数不会把原型链上的属性合并到目标对象，而 <code>extend</code> 或 <code>assignIn</code> 函数则会！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Important !! this is Lodash 4.x !!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把源对象原型链上的属性也合并到目标对象上！</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.c = <span class="number">3</span>; &#125;</span><br><span class="line">Foo.prototype.d = <span class="number">4</span>;</span><br><span class="line">extend(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="keyword">new</span> Foo());</span><br><span class="line"><span class="comment">// &#123; a: 1, c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="merge-object-sources"><a href="#merge-object-sources" class="headerlink" title="merge(object, [sources])"></a>merge(object, [sources])</h2><p>我们看看 <code>merge</code> 函数的定义：</p><blockquote><p>This method is like _.assign except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to undefined are skipped if a destination value exists. Array and plain object properties are merged recursively.Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.</p></blockquote><p><code>merge</code> 也和 <code>assign</code> 类似，不同的地方在于 <code>merge</code> 遇到相同属性的时候，如果属性值为纯对象(plain object)或者集合(collection)时，不是用后面的属性值去覆盖前面的属性值，而是会把前后两个属性值合并。<br>如果源对象的属性值为 <code>undefined</code>，则会忽略该属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">assign(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">3</span>&#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">e</span>: <span class="number">4</span> &#125; &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; e: 4 &#125; &#125;</span></span><br><span class="line">merge(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">3</span>&#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">b</span>: &#123; <span class="attr">e</span>: <span class="number">4</span> &#125; &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2, d: 3, e: 4 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并集合</span></span><br><span class="line"><span class="keyword">var</span> users = &#123;</span><br><span class="line">  <span class="string">'data'</span>: [&#123; <span class="string">'user'</span>: <span class="string">'barney'</span> &#125;, &#123; <span class="string">'user'</span>: <span class="string">'fred'</span> &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ages = &#123;</span><br><span class="line">  <span class="string">'data'</span>: [&#123; <span class="string">'age'</span>: <span class="number">36</span> &#125;, &#123; <span class="string">'age'</span>: <span class="number">40</span> &#125;]</span><br><span class="line">&#125;;</span><br><span class="line">merge(&#123;&#125;, users, ages)</span><br><span class="line"><span class="comment">// &#123; data: [ &#123; user: 'barney', age: 36 &#125;, &#123; user: 'fred', age: 40 &#125; ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// merge 函数会修改原来的对象！</span></span><br><span class="line">merge(users, ages)</span><br><span class="line"><span class="built_in">console</span>.log(users) <span class="comment">// &#123; data: [ &#123; user: 'barney', age: 36 &#125;, &#123; user: 'fred', age: 40 &#125; ]</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h3><ul><li>都可以用来合并对象</li><li>都会修改原来的对象 (如果原来的对象是作为函数的第一个参数的话)</li></ul><h3 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h3><ul><li><p><code>assign</code> 函数不会处理原型链上的属性，也不会合并相同的属性，而是用后面的属性值覆盖前面的属性值</p></li><li><p><code>extend</code></p><ul><li>3.x 版本中和 <code>assign</code> 一样</li><li>4.x 版本中会合并原型链上的属性</li></ul></li><li><p><code>merge</code> 遇到相同属性名的时候，如果属性值是纯对象或集合的时候，会合并属性值</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://lodash.com/docs" target="_blank" rel="noopener">https://lodash.com/docs</a><br><a href="http://stackoverflow.com/questions/19965844/lodash-difference-between-extend-assign-and-merge" target="_blank" rel="noopener">http://stackoverflow.com/questions/19965844/lodash-difference-between-extend-assign-and-merge</a></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>  <a href="https://scarletsky.github.io/2016/04/02/assign-vs-extend-vs-merge-in-lodash/" target="_blank" rel="noopener">https://scarletsky.github.io/2016/04/02/assign-vs-extend-vs-merge-in-lodash/</a>  </p><p><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序中使用lodash</title>
      <link href="/2016/11/30/mina-lodash/"/>
      <url>/2016/11/30/mina-lodash/</url>
      
        <content type="html"><![CDATA[<p>微信小程序引入lodash出错解决方案<br><a id="more"></a></p><h1 id="微信小程序中使用lodash"><a href="#微信小程序中使用lodash" class="headerlink" title="微信小程序中使用lodash"></a>微信小程序中使用lodash</h1><h2 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h2><p><strong>不想看探究过程的, 结论在最后.</strong> </p><ul><li><p>安装 <code>lodash.get</code>, 拷贝文件<code>node_modules/lodash.get/index.js</code>至 <code>utils/lodash.get/index.js</code>, 然后直接  <code>require(&#39;./utils/lodash.get/index.js&#39;)</code>, 可以正常使用  </p></li><li><p>拷贝 <code>node_modules/lodash/lodash.js</code> 文件至 <code>utils/lodash/lodash.js</code>, 然后直接 <code>require(&#39;./utils/lodash/lodash.js&#39;)</code>, 出现 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property &apos;prototype&apos; of undefined</span><br></pre></td></tr></table></figure></li></ul><figure class="image-box">                <img src="/img/mina/mina-lodash1.png" alt="lodash" title="" class="">                <p>lodash</p>            </figure>  <p>跳转至源码 发现 <code>Array</code> 不存在, 因为 <code>freeGlobal</code> 和 <code>freeSelf</code> 都为 <code>false</code>, 因为微信直接注入了 <code>window</code> 和 <code>self</code>;</p><figure class="image-box">                <img src="/img/mina/mina-lodash2.png" alt="lodash" title="" class="">                <p>lodash</p>            </figure>  <p><img src="/img/mina/mina-lodash3.png" alt="lodash"> </p><figure class="image-box">                <img src="/img/mina/mina-lodash5.png" alt="lodash" title="" class="">                <p>lodash</p>            </figure>  <p> 最终, <code>Array = (Function(&#39;return this&#39;)()).Array</code> 为 <code>undefined</code>.</p><p> 所以, 只需要替换 <code>root</code> 的值即可, 从lodash的源码中发现, <code>lodash</code> 会pick以下属性<br> <img src="/img/mina/mina-lodash6.png" alt="lodash">    </p><p> 使用<code>try catch</code> 监测支持属性<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; root.Array = <span class="built_in">Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Buffer = Buffer &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Buffer not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.DataView = <span class="built_in">DataView</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'DataView not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Date = <span class="built_in">Date</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Date not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Error = <span class="built_in">Error</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Error not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Float32Array = <span class="built_in">Float32Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Float32Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Float64Array = <span class="built_in">Float64Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Float64Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Function = <span class="built_in">Function</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Function not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Int8Array = <span class="built_in">Int8Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Int8Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Int16Array = <span class="built_in">Int16Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Int16Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Int32Array = <span class="built_in">Int32Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Int32Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Map = <span class="built_in">Map</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Map not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Math = <span class="built_in">Math</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Math not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Object = <span class="built_in">Object</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Object not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Promise = <span class="built_in">Promise</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Promise not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.RegExp = <span class="built_in">RegExp</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'RegExp not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Set = <span class="built_in">Set</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Set not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.String = <span class="built_in">String</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'String not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Symbol = <span class="built_in">Symbol</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Symbol not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.TypeError = <span class="built_in">TypeError</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'TypeError not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Uint8Array = <span class="built_in">Uint8Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Uint8Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Uint8ClampedArray = <span class="built_in">Uint8ClampedArray</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Uint8ClampedArray not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Uint16Array = <span class="built_in">Uint16Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Uint16Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.Uint32Array = <span class="built_in">Uint32Array</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'Uint32Array not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.WeakMap = <span class="built_in">WeakMap</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'WeakMap not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root._ = _ &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'_ not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.clearTimeout = clearTimeout &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'clearTimeout not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.isFinite = <span class="built_in">isFinite</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'isFinite not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.parseInt = <span class="built_in">parseInt</span> &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'parseInt not support in MINA, skip'</span>) &#125;</span><br><span class="line"><span class="keyword">try</span> &#123; root.setTimeout = setTimeout &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.log(<span class="string">'setTimeout not support in MINA, skip'</span>) &#125;</span><br></pre></td></tr></table></figure></p><p>  在微信Android中测试后, 发现小程序不支持以下属性<br>  <img src="/img/mina/mina-lodash7.png" alt="lodash">    </p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li><p>直接引入 <code>lodash modularize</code> 之后的包可以解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash.get</span><br><span class="line">let get = require(&apos;./your_copy_path/lodash.get/index&apos;);</span><br><span class="line">// 直接使用 get(obj, path);</span><br></pre></td></tr></table></figure></li><li><p>将lodash4.16.6 <code>lodash/lodash.js:416</code> 中  </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> root = freeGlobal || freeSelf || <span class="built_in">Function</span>(<span class="string">'return this'</span>)();</span><br></pre></td></tr></table></figure><p> 替换为  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> root = &#123;</span><br><span class="line">  <span class="built_in">Array</span>: <span class="built_in">Array</span>,</span><br><span class="line">  <span class="built_in">Date</span>: <span class="built_in">Date</span>,</span><br><span class="line">  <span class="built_in">Error</span>: <span class="built_in">Error</span>,</span><br><span class="line">  <span class="built_in">Function</span>: <span class="built_in">Function</span>,</span><br><span class="line">  <span class="built_in">Math</span>: <span class="built_in">Math</span>,</span><br><span class="line">  <span class="built_in">Object</span>: <span class="built_in">Object</span>,</span><br><span class="line">  <span class="built_in">RegExp</span>: <span class="built_in">RegExp</span>,</span><br><span class="line">  <span class="built_in">String</span>: <span class="built_in">String</span>,</span><br><span class="line">  <span class="built_in">TypeError</span>: <span class="built_in">TypeError</span>,</span><br><span class="line">  setTimeout: setTimeout,</span><br><span class="line">  clearTimeout: clearTimeout,</span><br><span class="line">  setInterval: setInterval,</span><br><span class="line">  clearInterval: clearInterval</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>如果每次修改嫌麻烦, 可以使用脚本控制<br>也可以尝试我自用的微信骨架 <a href="https://github.com/xinshangshangxin/MINA-seed" target="_blank" rel="noopener">https://github.com/xinshangshangxin/MINA-seed</a>, <em>注入了 bluebird, lodash, promisify了wx.xxx接口, 修改了 vConsole 不输出function和error</em>  </p><p><br>    </p></li></ol><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
            <tag> 小程序 </tag>
            
            <tag> MINA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序中使用bluebird</title>
      <link href="/2016/11/24/mina-bluebird/"/>
      <url>/2016/11/24/mina-bluebird/</url>
      
        <content type="html"><![CDATA[<p>微信小程序不支持Promise, 引入bluebird的探究过程<br><a id="more"></a></p><h1 id="微信小程序中使用bluebird"><a href="#微信小程序中使用bluebird" class="headerlink" title="微信小程序中使用bluebird"></a>微信小程序中使用bluebird</h1><p><strong>2017/1/13更新, 添加说明bluebird.join无法使用</strong></p><h2 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h2><p><strong>不想看探究过程的, 结论在最后.</strong><br>因为 <code>bluebird</code> 会抛出 <code>Unhandled rejection Error</code>, 以及强大的方法, 如 <code>map</code>, <code>props</code> 等, 使用 <code>es6-promise</code> 无法满足我, 故探究如何引入 <code>bluebird</code></p><ul><li>直接引入<br>在 <code>npm install bluebird</code> 之后, 直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'../node_modules/bluebird/js/release/bluebird.js'</span>);</span><br></pre></td></tr></table></figure><p>提示 <code>module &quot;node_modules/bluebird/js/release/bluebird.js&quot; is not defined</code>;</p><ul><li><p>将安装后的文件夹复制<br><code>node_modules/bluebird/js/release</code> 存在 browser 和 release 2 个文件夹, 由于微信小程序并不运行在浏览器中, 故不能引入browser; 将 release 文件夹拷贝至 utils 文件夹后引入. 在微信开发者工具中虽然报了 8个 <code>can not create Function</code>,但是依然可以使用.</p><p><img src="/img/mina/mina2.png" alt=""></p><p><strong>2017/1/13更新, 8个warn已经转换为error, 原因为 Promise.join需要使用 <code>new Function</code>, 但是小程序Function 表现不一致导致, 最终决定去除 <code>bluebird/js/release/join.js</code>, 即 <code>bluebird.jooin</code>不工作</strong></p></li><li><p>真机环境测试<br>在真机环境中使用时(我Android4.4), 却出现了 <code>cannot create property &#39;createElement&#39; of undefined</code></p><p><img src="/img/mina/mina1.png" alt=""></p></li></ul><ul><li><p>搜索 <code>createElement</code> 寻找线索<br>在 搜索<code>node_modules/bluebird/js/release/</code>文件夹后发现, 在 <code>schedule.js</code> 中存在 <code>createElement</code>; </p><p><img src="/img/mina/mina3.png" alt=""></p><p>分析代码后发现在真机中, 程序进入了以下内容</p><p><img src="/img/mina/mina4.png" alt=""></p></li></ul><ul><li>解决方案<br>修改 <code>schedule.js</code>, 让其直接使用 <code>setTimeout</code>.</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li><code>npm i bluebird</code></li><li>将 <code>node_modules/bluebird/js/release</code> 文件夹拷贝出来, 比如拷贝到 <code>utils</code> 目录下</li><li><p>将 <code>utils/bluebird/js/release/schedule.js</code> 中的内容替换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  setTimeout(fn, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>require 后使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./bluebird/js/release/bluebird.js'</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果每次修改嫌麻烦, 可以使用脚本控制<br>也可以尝试 我自用的微信骨架 <a href="https://github.com/xinshangshangxin/MINA-seed" target="_blank" rel="noopener">https://github.com/xinshangshangxin/MINA-seed</a>, <em>注入了 bluebird, lodash, promisify了wx.xxx接口, 修改了 vConsole 不输出function和error</em>  </p></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://cnodejs.org/topic/57eb4e4bea2fa420446d4371" target="_blank" rel="noopener">https://cnodejs.org/topic/57eb4e4bea2fa420446d4371</a></li></ul><p><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
            <tag> 小程序 </tag>
            
            <tag> MINA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信总结</title>
      <link href="/2016/09/22/wechat-summary/"/>
      <url>/2016/09/22/wechat-summary/</url>
      
        <content type="html"><![CDATA[<p>遇到的坑,或者其它混淆的概念<br><a id="more"></a></p><h2 id="第三方平台-和-公众号自己开发"><a href="#第三方平台-和-公众号自己开发" class="headerlink" title="第三方平台 和 公众号自己开发"></a>第三方平台 和 公众号自己开发</h2><p>存在 </p><ol><li>appid+appsecret</li><li>B 第三方</li><li>C 第三方</li></ol><hr><ul><li>不限制授权第三方的次数</li><li>获取accesstoken的额度为分开的(无官方文档说明,猜测)</li><li>accesstoken对不同的第三方不会冲突</li><li>不同的第三方主动调用API不会冲突</li><li>事件通知目前支持向所有授权的第三方发送</li><li>每个第三方都可以回复消息</li><li>每个第三方回复空的就没关系，都回复会有混乱，只能靠公众号自己跟第三方协调</li><li>第三方 网页授权 文档: <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318590&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318590&amp;token=&amp;lang=zh_CN</a></li></ul><h2 id="微信会话cookie的时长"><a href="#微信会话cookie的时长" class="headerlink" title="微信会话cookie的时长"></a>微信会话cookie的时长</h2><table><thead><tr><th>操作</th><th>是否失效</th></tr></thead><tbody><tr><td>从WebView返回微信主界面</td><td>cookie不失效</td></tr><tr><td>返回手机系统主界面</td><td>cookie不失效</td></tr><tr><td>后台关闭微信进程</td><td>cookie失效</td></tr><tr><td>微信切换账号</td><td>cookie失效</td></tr><tr><td>内存小的机型，这部分临时存储就会被系统释放掉</td><td>cookie失效</td></tr><tr><td>一般浏览器当浏览器退出后(chrome等)</td><td>cookie失效</td></tr></tbody></table><h2 id="网页授权登录-和-网站应用登录"><a href="#网页授权登录-和-网站应用登录" class="headerlink" title="网页授权登录 和 网站应用登录"></a>网页授权登录 和 网站应用登录</h2><blockquote><table><thead><tr><th></th><th>网页授权登录</th><th>网站应用微信登录</th></tr></thead><tbody><tr><td> 平台</td><td><a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">https://mp.weixin.qq.com</a></td><td><a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">https://open.weixin.qq.com/</a></td></tr><tr><td>微信文档</td><td><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">mp wiki</a></td><td><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">open wiki</a></td></tr><tr><td>区别</td><td>scope为snsapi_base, 获取用户的openid 静默授权 <br> scope为snsapi_userinfo获取用户的基本信息,对于已关注公众号的用户,静默授权,否则需要用户同意 <br>未关注的用户也能获取到用户信息</td><td>微信用户 需同意授权第三方应用</td></tr></tbody></table></blockquote><h2 id="网站授权登录-https-open-weixin-qq-com"><a href="#网站授权登录-https-open-weixin-qq-com" class="headerlink" title="网站授权登录(https://open.weixin.qq.com/)"></a>网站授权登录(<a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">https://open.weixin.qq.com/</a>)</h2><p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">微信文档</a><br><a href="https://github.com/liangyali/passport-wechat" target="_blank" rel="noopener">package passport-wechat</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config 配置</span></span><br><span class="line">auth: &#123;</span><br><span class="line">    wechat: &#123;</span><br><span class="line">      passport: &#123;</span><br><span class="line">        strategy: <span class="string">'wechat'</span>,</span><br><span class="line">        <span class="built_in">module</span>: <span class="string">'passport-wechat'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          appID: <span class="string">''</span>,</span><br><span class="line">          appSecret: <span class="string">''</span>,</span><br><span class="line">          callbackURL: <span class="string">'prefix/auth/wechat/callback'</span>,</span><br><span class="line">          response_type: <span class="string">'code'</span>,</span><br><span class="line">          scope: <span class="string">'snsapi_login'</span>,</span><br><span class="line">          state: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        verify: <span class="function"><span class="keyword">function</span>(<span class="params">openid, profile, userInfo, done</span>) </span>&#123;</span><br><span class="line">          done(<span class="literal">null</span>, userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>);</span><br><span class="line"><span class="keyword">var</span> WechatStrategy = <span class="built_in">require</span>(<span class="string">'passport-wechat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callbackURL = <span class="string">'/auth/wechat/callback'</span>;</span><br><span class="line"></span><br><span class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">obj, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, obj);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关配置为测试账号信息</span></span><br><span class="line">passport.use(<span class="keyword">new</span> WechatStrategy(&#123;</span><br><span class="line">  appID: appID,</span><br><span class="line">  appSecret: appSecret,</span><br><span class="line">  callbackURL: callbackURL,</span><br><span class="line">  response_type: <span class="string">'code'</span>,</span><br><span class="line">  scope: <span class="string">'snsapi_login'</span>,</span><br><span class="line">  state: <span class="literal">true</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">openid, profile, userInfo, done</span>) </span>&#123;</span><br><span class="line">  done(<span class="literal">null</span>, userInfo);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  authCallback: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = <span class="built_in">encodeURIComponent</span>(req.param(<span class="string">'from'</span>)) || <span class="string">''</span>;</span><br><span class="line">    passport.authenticate(<span class="string">'wechat'</span>, &#123;</span><br><span class="line">      failureRedirect: <span class="string">'/auth/err'</span>,</span><br><span class="line">      successRedirect: <span class="string">'/auth/success'</span> + <span class="string">'?from='</span> + <span class="keyword">from</span></span><br><span class="line">    &#125;)(req, res);</span><br><span class="line">  &#125;,</span><br><span class="line">  authError: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(<span class="number">400</span>, &#123;</span><br><span class="line">      message: <span class="string">'error'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  authSuccess: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.redirect(joinQueryStr((req.param(<span class="string">'from'</span>) || <span class="string">'/'</span>), &#123;</span><br><span class="line">      userInfo: req.user || &#123;&#125;,</span><br><span class="line">      unionid: (req.user || &#123;&#125;).unionid</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;,</span><br><span class="line">  authWechat: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = <span class="built_in">encodeURIComponent</span>(req.param(<span class="string">'from'</span>)) || <span class="string">''</span>;</span><br><span class="line">    passport.authenticate(<span class="string">'wechat'</span>, &#123;</span><br><span class="line">      callbackURL: callbackURL + <span class="string">'?from='</span> + <span class="keyword">from</span></span><br><span class="line">    &#125;)(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="网页授权登录"><a href="#网页授权登录" class="headerlink" title="网页授权登录"></a>网页授权登录</h2><p><a href="http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html" target="_blank" rel="noopener">微信文档</a><br><a href="https://github.com/node-webot/wechat-oauth" target="_blank" rel="noopener">package wechat-oauth</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">auth: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = req.query.code;</span><br><span class="line">    <span class="keyword">if</span>(req.query.state &amp;&amp; code === <span class="string">'authdeny'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">400</span>).send(<span class="string">'用户拒绝授权'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!code) &#123;</span><br><span class="line">      <span class="keyword">var</span> callbackUrl = req.protocol + <span class="string">'://'</span> + req.get(<span class="string">'Host'</span>) + req.originalUrl;</span><br><span class="line">      <span class="keyword">var</span> url = oauth.getAuthorizeURL(callbackUrl, <span class="string">'random_state'</span>, <span class="string">'snsapi_userinfo'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'redirect to'</span>, url);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> openid;</span><br><span class="line">    <span class="keyword">var</span> wechatUser;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span>.series([</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        oauth.getAccessToken(code, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> cb(err);</span><br><span class="line">          &#125;</span><br><span class="line">          openid = result.data.openid;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getWechatUser</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        oauth.getUser(openid, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">          req.session.wechat = user;</span><br><span class="line">          wechatUser = user;</span><br><span class="line">          cb(err, user);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    ], <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">400</span>).json(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'session'</span>, req.session);</span><br><span class="line">      <span class="keyword">if</span>(req.query.referer) &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">          .redirect(UtilitiesService</span><br><span class="line">            .joinQueryStr((req.query.referer || <span class="string">'/'</span>), &#123;</span><br><span class="line">              userInfo: wechatUser || &#123;&#125;,</span><br><span class="line">              unionid: (wechatUser || &#123;&#125;).unionid</span><br><span class="line">            &#125;)</span><br><span class="line">          );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        userInfo: wechatUser,</span><br><span class="line">        unionid: openid</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作portable版Cygwin</title>
      <link href="/2016/06/14/cygwin-backup/"/>
      <url>/2016/06/14/cygwin-backup/</url>
      
        <content type="html"><![CDATA[<p>制作portable版Cygwin和完整删除Cygwin<br><a id="more"></a></p><h2 id="制作portable版Cygwin"><a href="#制作portable版Cygwin" class="headerlink" title="制作portable版Cygwin"></a>制作portable版Cygwin</h2><h3 id="本地机器"><a href="#本地机器" class="headerlink" title="本地机器"></a>本地机器</h3><ol><li>压缩打包安装目录</li><li>导出注册表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cygwin下</span><br><span class="line">reg export HKLM\\SOFTWARE\\Cygwin cygwin.reg</span><br><span class="line"></span><br><span class="line"># cmd.exe下</span><br><span class="line">reg export HKLM\SOFTWARE\Cygwin cygwin.reg</span><br></pre></td></tr></table></figure></li></ol><h3 id="另一台机器"><a href="#另一台机器" class="headerlink" title="另一台机器"></a>另一台机器</h3><ol><li>解压缩安装目录</li><li>修改注册表相关根目录</li><li>导入注册表: <code>reg import cygwin.reg</code></li></ol><h2 id="完整删除Cygwin"><a href="#完整删除Cygwin" class="headerlink" title="完整删除Cygwin"></a>完整删除Cygwin</h2><ol><li>删除下载包目录</li><li>停止服务: <code>cygrunsrv -L</code>, <code>cygrunsrv -S</code>, <code>cygrunsrv -R</code></li><li>删除安装目录</li><li>删除注册表： <code>reg delete HKLM\SOFTWARE\Cygwin /f</code>, <code>reg delete HKCU\SOFTWARE\Cygwin /f</code></li><li>删除环境变量: <code>PATH</code>, <code>CYGWIN</code></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://segmentfault.com/a/1190000005650072" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005650072</a></li></ul><p><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下全局翻墙</title>
      <link href="/2016/04/09/windows-bypass-firewall/"/>
      <url>/2016/04/09/windows-bypass-firewall/</url>
      
        <content type="html"><![CDATA[<p>在windwos下使用shadowsocks + Proxifier 全局翻墙<br><a id="more"></a></p><h2 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址:"></a>软件下载地址:</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks下载</a><br><a href="https://www.proxifier.com/" target="_blank" rel="noopener">proxifier官网</a></p><h2 id="帐号-注册码-破解"><a href="#帐号-注册码-破解" class="headerlink" title="帐号/注册码/破解"></a>帐号/注册码/破解</h2><p><a href="http://www.ishadowsocks.net/" target="_blank" rel="noopener">shadowsocks免费帐号</a><br><a href="http://pan.baidu.com/s/1eQ1tD9g" target="_blank" rel="noopener">proxifier中文破解版windows版</a></p><p>proxifier注册码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C (Portable Edition)</span><br><span class="line">5EZ8G-C3WL5-B56YG-SCXM9-6QZAP (Standard Edition)</span><br><span class="line">P427L-9Y552-5433E-8DSR3-58Z68 (MAC)</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="shadowsocks配置"><a href="#shadowsocks配置" class="headerlink" title="shadowsocks配置:"></a>shadowsocks配置:</h3><figure class="image-box">                <img src="/img/firewall/1.png" alt="" title="" class="">                <p></p>            </figure>  <p><br></p><hr><h3 id="proxifier配置"><a href="#proxifier配置" class="headerlink" title="proxifier配置"></a>proxifier配置</h3><figure class="image-box">                <img src="/img/firewall/2.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/3.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/4.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/5.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/6.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/7.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/firewall/8.png" alt="" title="" class="">                <p></p>            </figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>Proxifier代理规则中必须把你的 shadowsocks客户端设置成direct</li><li>Proxifier中名称解析(即DNS解析) 必须设置成 通过代理解析主机地址 (否则会出现依然无法访问谷歌等问题)</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://www.jiyingss.com/117/" target="_blank" rel="noopener">http://www.jiyingss.com/117/</a></li></ul><p><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openshift使用记录</title>
      <link href="/2016/03/27/use-openshift/"/>
      <url>/2016/03/27/use-openshift/</url>
      
        <content type="html"><![CDATA[<p>coding演示平台开始收费,转战openshift, 在上面安装zsh等软件<br><a id="more"></a></p><h1 id="利用openshift自带的Node-js"><a href="#利用openshift自带的Node-js" class="headerlink" title="利用openshift自带的Node.js"></a>利用openshift自带的Node.js</h1><h2 id="1-注册-amp-amp-登录"><a href="#1-注册-amp-amp-登录" class="headerlink" title="1,注册&amp;&amp;登录"></a>1,注册&amp;&amp;登录</h2><figure class="image-box">                <img src="/img/openshift/1.png" alt="" title="" class="">                <p></p>            </figure><h2 id="2-创建应用-选择noejs版本"><a href="#2-创建应用-选择noejs版本" class="headerlink" title="2,创建应用,选择noejs版本"></a>2,创建应用,选择noejs版本</h2><figure class="image-box">                <img src="/img/openshift/2.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/openshift/3.png" alt="" title="" class="">                <p></p>            </figure><h2 id="3-详细内容填写-如果新手-可以在导入代码处留空-openshift会创建一个demo程序"><a href="#3-详细内容填写-如果新手-可以在导入代码处留空-openshift会创建一个demo程序" class="headerlink" title="3,详细内容填写(如果新手,可以在导入代码处留空,openshift会创建一个demo程序)"></a>3,详细内容填写(如果新手,可以在导入代码处留空,openshift会创建一个demo程序)</h2><figure class="image-box">                <img src="/img/openshift/4.png" alt="" title="" class="">                <p></p>            </figure><h2 id="4-点击-Create-Application后-等待较长时间-后才会进入管理面板"><a href="#4-点击-Create-Application后-等待较长时间-后才会进入管理面板" class="headerlink" title="4,点击 Create Application后, 等待较长时间 后才会进入管理面板"></a>4,点击 <code>Create Application</code>后, <strong>等待较长时间</strong> 后才会进入管理面板</h2><h1 id="DIY-当作linux服务器使用"><a href="#DIY-当作linux服务器使用" class="headerlink" title="DIY(当作linux服务器使用)"></a>DIY(当作linux服务器使用)</h1><h2 id="1-在创建应用时选择-DO-It-Yourself"><a href="#1-在创建应用时选择-DO-It-Yourself" class="headerlink" title="1,在创建应用时选择 DO-It-Yourself"></a>1,在创建应用时选择 DO-It-Yourself</h2><figure class="image-box">                <img src="/img/openshift/6.png" alt="" title="" class="">                <p></p>            </figure><h2 id="2-DIY之前的内容补充"><a href="#2-DIY之前的内容补充" class="headerlink" title="2,DIY之前的内容补充:"></a>2,DIY之前的内容补充:</h2><p>a: <code>openshift</code> 变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$OPENSHIFT_REPO_DIR</span>    //ssh提交代码的位置</span><br><span class="line"><span class="variable">$OPENSHIFT_DATA_DIR</span>    // 一些数据存储的位置</span><br><span class="line"><span class="variable">$OPENSHIFT_DIY_IP</span>     // 外网绑定IP</span><br></pre></td></tr></table></figure></p><p>b: 剩余容量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -h | sort -rh | head -10    // 查找前10的文件/文件夹</span><br><span class="line">quota -s                       // 查看总量</span><br></pre></td></tr></table></figure></p><h2 id="3-添加-设置-ssh-key"><a href="#3-添加-设置-ssh-key" class="headerlink" title="3,添加/设置 ssh key"></a>3,添加/设置 <code>ssh key</code></h2><figure class="image-box">                <img src="/img/openshift/7.png" alt="" title="" class="">                <p></p>            </figure><h2 id="4-链接openshift服务器"><a href="#4-链接openshift服务器" class="headerlink" title="4,链接openshift服务器"></a>4,链接openshift服务器</h2><figure class="image-box">                <img src="/img/openshift/8.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="/img/openshift/9.png" alt="" title="" class="">                <p></p>            </figure><h2 id="5-安装软件"><a href="#5-安装软件" class="headerlink" title="5,安装软件"></a>5,安装软件</h2><h3 id="设置HOME目录-某些目录无权限-需要设置到OPENSHIFT-DATA-DIR才能写入"><a href="#设置HOME目录-某些目录无权限-需要设置到OPENSHIFT-DATA-DIR才能写入" class="headerlink" title="设置HOME目录(某些目录无权限,需要设置到OPENSHIFT_DATA_DIR才能写入)"></a>设置HOME目录(某些目录无权限,需要设置到<code>OPENSHIFT_DATA_DIR</code>才能写入)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置目录</span></span><br><span class="line">HOME=<span class="variable">$OPENSHIFT_DATA_DIR</span></span><br><span class="line"><span class="comment"># 将目录设置写入bash_profile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export HOME=\"<span class="variable">$OPENSHIFT_DATA_DIR</span>\""</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="安装linuxbrew-openshift下无法使用-yum-和-apt-get"><a href="#安装linuxbrew-openshift下无法使用-yum-和-apt-get" class="headerlink" title="安装linuxbrew(openshift下无法使用 yum 和 apt-get)"></a>安装<a href="https://github.com/Linuxbrew/linuxbrew" target="_blank" rel="noopener">linuxbrew</a>(openshift下无法使用 <code>yum</code> 和 <code>apt-get</code>)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装  </span></span><br><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/linuxbrew/go/install)</span>"</span></span><br><span class="line"><span class="comment"># 环境配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="'</span><span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">'.linuxbrew/bin:$PATH"'</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.bash_profile</span><br><span class="line"><span class="comment"># 启用配置</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$OPENSHIFT_DATA_DIR</span>/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="6-安装zsh-和-oh-my-zsh"><a href="#6-安装zsh-和-oh-my-zsh" class="headerlink" title="6,安装zsh 和 oh-my-zsh"></a>6,安装zsh 和 oh-my-zsh</h2><p>a: 安装 zsh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 brew 安装 zsh 太慢了!!</span></span><br><span class="line"><span class="comment"># brew install zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用源码直接安装</span></span><br><span class="line">wget http://sourceforge.net/projects/zsh/files/zsh/5.2/zsh-5.2.tar.gz/download -O <span class="variable">$OPENSHIFT_DATA_DIR</span>/zsh-5.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar xzvf zsh-5.2.tar.gz &amp;&amp; <span class="built_in">cd</span> zsh-5.2</span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span><span class="string">""</span>.linuxbrew</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>b: 安装 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>, 需要删除官方脚本中下面4行:<br><figure class="image-box">                <img src="/img/openshift/10.png" alt="" title="" class="">                <p></p>            </figure></p><p>或者下载 <a href="/other/openshift-oh-my-zsh/openshift-oh-my-zsh.sh">修改好的脚本openshift-oh-my-zsh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget http://blog.xinshangshangxin.com/other/openshift-oh-my-zsh/openshift-oh-my-zsh.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>c: 设置环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认启动 zsh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'exec '</span><span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">'.linuxbrew/bin/zsh -l'</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.bash_profile</span><br><span class="line"><span class="comment"># 禁用oh-my-zsh 更新</span></span><br><span class="line">sed -i <span class="string">'s/^# DISABLE_AUTO_UPDATE="true"/DISABLE_AUTO_UPDATE="true"/g'</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 将 上面linuxbrew的环境变量加入 .zshrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="'</span><span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">'.linuxbrew/bin:$PATH"'</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.zshrc</span><br><span class="line"><span class="comment"># 启用zsh</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$OPENSHIFT_DATA_DIR</span>/.bash_profile</span><br></pre></td></tr></table></figure></p><h2 id="7-安装mongo"><a href="#7-安装mongo" class="headerlink" title="7,安装mongo"></a>7,安装mongo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.0.tgz</span><br><span class="line"><span class="comment"># 解压 &amp;&amp; 移动文件</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.2.0.tgz</span><br><span class="line">mkdir softer &amp;&amp; mv mongodb-linux-x86_64-3.2.0 softer/mongodb</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="'</span><span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">'softer/mongodb/bin:$PATH$PATH"'</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.zshrc</span><br><span class="line"><span class="comment"># 重新载入环境</span></span><br><span class="line"><span class="built_in">exec</span> zsh -l</span><br><span class="line"><span class="comment"># 创建mongodb存储路径</span></span><br><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; mkdir -p data/mongodb</span><br><span class="line"><span class="comment"># fork模式启动mongo</span></span><br><span class="line">mongod --bind_ip  <span class="variable">$OPENSHIFT_DIY_IP</span> --dbpath=<span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">""</span>data/mongodb --logpath <span class="variable">$OPENSHIFT_DATA_DIR</span><span class="string">""</span>data/mongodb.log  --fork</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行连接</span></span><br><span class="line">mongo --host <span class="variable">$OPENSHIFT_DIY_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dump</span></span><br><span class="line">mongodump --host <span class="variable">$OPENSHIFT_DIY_IP</span> [-d &lt;dnName&gt;] [--out &lt;outPath&gt;]</span><br><span class="line">mongodump --host <span class="variable">$OPENSHIFT_DIY_IP</span> --out ~/mongodump</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">mongorestore --host <span class="variable">$OPENSHIFT_DIY_IP</span> [-d &lt;dnName&gt;] &lt;restorePath&gt; [--drop]</span><br><span class="line">mongorestore --host <span class="variable">$OPENSHIFT_DIY_IP</span> ~/mongodump --drop</span><br></pre></td></tr></table></figure><h2 id="8-安装-nvm-node版本管理器"><a href="#8-安装-nvm-node版本管理器" class="headerlink" title="8,安装 nvm (node版本管理器)"></a>8,安装 nvm (node版本管理器)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export NVM_DIR=\"<span class="variable">$OPENSHIFT_DATA_DIR</span>.nvm\""</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  # This loads nvm'</span> &gt;&gt; <span class="variable">$OPENSHIFT_DATA_DIR</span>/.zshrc</span><br><span class="line"><span class="built_in">exec</span> zsh -l</span><br><span class="line">nvm install 0.12.7</span><br><span class="line">nvm <span class="built_in">alias</span> default 0.12.7</span><br></pre></td></tr></table></figure><h2 id="9-停止自带的ruby占用8080端口"><a href="#9-停止自带的ruby占用8080端口" class="headerlink" title="9,停止自带的ruby占用8080端口"></a>9,停止自带的ruby占用8080端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br><span class="line"><span class="comment"># 找到ruby的PID,kill掉</span></span><br><span class="line"><span class="built_in">kill</span> -9 xxxPID</span><br></pre></td></tr></table></figure><h2 id="10-删除无用文件"><a href="#10-删除无用文件" class="headerlink" title="10, 删除无用文件"></a>10, 删除无用文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongo 无用文件</span></span><br><span class="line">rm -rf ~/data/mongodb/journal</span><br><span class="line">rm ~/mongodb-linux-x86_64-3.2.0.tgz</span><br><span class="line"><span class="comment"># zsh 无用文件</span></span><br><span class="line">rm -r ~/zsh-5.2</span><br><span class="line">rm -r ~/zsh-5.2.tar.gz</span><br><span class="line"><span class="comment"># brew cache</span></span><br><span class="line">rm -r ~/.cache</span><br></pre></td></tr></table></figure><p><br><br><br></p><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> openshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs的几种文件路径</title>
      <link href="/2016/02/04/node-path/"/>
      <url>/2016/02/04/node-path/</url>
      
        <content type="html"><![CDATA[<p>NodeJs的几种文件路径<br><a id="more"></a></p><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><code>__dirname</code> : 总是返回被执行的 js 所在文件夹的绝对路径<br><code>__filename</code>: 总是返回被执行的 js 的绝对路径<br><code>process.cwd()</code>: 总是返回运行 node 命令时所在的文件夹的绝对路径<br><code>./</code>: 在 <code>require()</code> 中使用是跟 <code>__dirname</code>的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟 <code>process.cwd()</code> 效果相同，是相对于启动脚本所在目录的路径。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>只有在 <code>require()</code> 时才使用相对路径(<code>./, ../</code>) 的写法，其他地方一律使用绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前目录下</span></span><br><span class="line">path.dirname(__filename) + <span class="string">'/test.js'</span>;</span><br><span class="line"><span class="comment">// 相邻目录下</span></span><br><span class="line">path.resolve(__dirname, <span class="string">'../lib/common.js'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/imsobear/blog/issues/48" target="_blank" rel="noopener">https://github.com/imsobear/blog/issues/48</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx location 设置</title>
      <link href="/2016/01/20/nginx-location/"/>
      <url>/2016/01/20/nginx-location/</url>
      
        <content type="html"><![CDATA[<p>nginx location 设置<br><a id="more"></a></p><hr><h2 id="匹配顺序-和-location-的编辑顺序无关"><a href="#匹配顺序-和-location-的编辑顺序无关" class="headerlink" title="匹配顺序(和 location 的编辑顺序无关)"></a>匹配顺序(和 location 的编辑顺序无关)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location =            </span><br><span class="line">location 完整路径</span><br><span class="line">location ^~ 路径           </span><br><span class="line">location ~,~* 正则顺序  </span><br><span class="line">location 部分起始路径</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h2 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h2><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">精确的查找地址</td></tr><tr><td style="text-align:left">^~</td><td style="text-align:left">开头表示uri以某个常规字符串开头，不是正则匹配,表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录 </td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">开头表示区分大小写的正则匹配;</td></tr><tr><td style="text-align:left">~*</td><td style="text-align:left">开头表示不区分大小写的正则匹配</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">通用匹配, 如果没有其它匹配,任何请求都会匹配到</td></tr><tr><td style="text-align:left">@</td><td style="text-align:left">表示为一个location进行命名，即自定义一个location，这个location不能被外界所访问，只能用于Nginx产生的子请求，主要为error_page和try_files。</td></tr><tr><td style="text-align:left">!~</td><td style="text-align:left">不匹配的</td></tr><tr><td style="text-align:left">!~*</td><td style="text-align:left">不匹配的</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任意的空白符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配数字</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配单词的开始或结束</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配字符串的开始</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配字符串的结束</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">重复零次或更多次</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">重复一次或更多次</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">重复零次或一次</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">重复n次</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left">重复n次或更多次</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">重复n到m次</td></tr><tr><td style="text-align:left">*?</td><td style="text-align:left">重复任意次，但尽可能少重复</td></tr><tr><td style="text-align:left">+?</td><td style="text-align:left">重复1次或更多次，但尽可能少重复</td></tr><tr><td style="text-align:left">??</td><td style="text-align:left">重复0次或1次，但尽可能少重复</td></tr><tr><td style="text-align:left">{n,m}?</td><td style="text-align:left">重复n到m次，但尽可能少重复</td></tr><tr><td style="text-align:left">{n,}?</td><td style="text-align:left">重复n次以上，但尽可能少重复</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:left">[^x]</td><td style="text-align:left">匹配除了x以外的任意字符</td></tr><tr><td style="text-align:left">[^aeiou]</td><td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td></tr><tr><td style="text-align:left">捕获     (exp)</td><td style="text-align:left">匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td style="text-align:left">(?<name>exp)</name></td><td style="text-align:left">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td></tr><tr><td style="text-align:left">(?:exp)</td><td style="text-align:left">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td style="text-align:left">零宽断言     (?=exp)</td><td style="text-align:left">匹配exp前面的位置</td></tr><tr><td style="text-align:left">(?&lt;=exp)</td><td style="text-align:left">匹配exp后面的位置</td></tr><tr><td style="text-align:left">(?!exp)</td><td style="text-align:left">匹配后面跟的不是exp的位置</td></tr><tr><td style="text-align:left">(?&lt;!exp)</td><td style="text-align:left">匹配前面不是exp的位置</td></tr><tr><td style="text-align:left">注释     (?#comment)</td><td style="text-align:left">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">http://seanlook.com/2015/05/17/nginx-location-rewrite/</a></li><li><a href="http://blog.csdn.net/gzh0222/article/details/7845981" target="_blank" rel="noopener">http://blog.csdn.net/gzh0222/article/details/7845981</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信调试方法</title>
      <link href="/2016/01/10/wechat-debug/"/>
      <url>/2016/01/10/wechat-debug/</url>
      
        <content type="html"><![CDATA[<p>搜索总结的微信调试方法<br><a id="more"></a></p><hr><h2 id="微信官方提供了-微信web开发者工具-本文章仅作备份"><a href="#微信官方提供了-微信web开发者工具-本文章仅作备份" class="headerlink" title="微信官方提供了 微信web开发者工具 本文章仅作备份"></a>微信官方提供了 <code>微信web开发者工具</code> 本文章仅作备份</h2><p><a href="http://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html" target="_blank" rel="noopener">微信web开发者工具地址</a>; </p><h2 id="无服务器"><a href="#无服务器" class="headerlink" title="无服务器"></a>无服务器</h2><hr><h3 id="js-sdk代码调试"><a href="#js-sdk代码调试" class="headerlink" title="js-sdk代码调试"></a>js-sdk代码调试</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件:"></a>前提条件:</h4><blockquote><ol><li>微信端的 <code>接口配置信息</code> 必须已经验证通过(不管是怎么通过的) </li><li>手机必须处于和pc相同的局域网下</li><li>pc上有代理软件 (mac下有<code>charles</code>, windows下有 <code>fildder</code>)</li><li>有nginx或者类似工具</li></ol></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h4><blockquote><p>1.修改 <code>/etc/hosts</code>(或者使用 <code>Gas Mask</code> 软件来设置), 添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    和JS接口安全域名相符的调试页面网址</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.使用nginx 或者其他工具, 将 <code>调试页面网址</code> 转发到你正在开发的本机代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 此处为 nginx 设置</span><br><span class="line"># mac 下启动nginx 需要 `sudo`</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name ionicdemo.xinshangshangxin.com; # 修改成你配置的调试网址</span><br><span class="line">    location / &#123;</span><br><span class="line">      root /path/my/code;  # 修改为你的代码路径</span><br><span class="line">      try_files $uri $uri/ /index.html =404;</span><br><span class="line">      # index index.html index.htm;</span><br><span class="line">      error_page 404 /error.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.打开 <code>charles</code>, 开启 <code>mac OS X Proxy</code><br><figure class="image-box">                <img src="/img/wechat/01.png" alt="开启 mac OS X Proxy" title="" class="">                <p>开启 mac OS X Proxy</p>            </figure><br>4.点击 <code>Proxy Settings</code>, 查看/设置端口<br><figure class="image-box">                <img src="/img/wechat/02.png" alt="" title="" class="">                <p></p>            </figure></p></blockquote><blockquote><p>5.打开手机无线网络, 高级设置, 打开<code>手动HTTP代理</code>,<br>代理服务器主机名为局域网ip, 端口为上图设置的端口<br> <figure class="image-box">                <img src="/img/wechat/03.png" alt="" title="" class="">                <p></p>            </figure></p></blockquote><blockquote><p>6.手机端访问 你要调试的页面, 默认转发到你的pc端了~</p></blockquote><blockquote><p>借助某人的图来 说明下原理<br><figure class="image-box">                <img src="/img/wechat/04.png" alt="" title="" class="">                <p></p>            </figure></p></blockquote><hr><h3 id="服务器端代码调试"><a href="#服务器端代码调试" class="headerlink" title="服务器端代码调试"></a>服务器端代码调试</h3><blockquote><p>使用<a href="http://blog.qqbrowser.cc/" target="_blank" rel="noopener">微信官方插件</a>, 具体操作方法请看官方文档<a href="http://blog.qqbrowser.cc/tag/docs/" target="_blank" rel="noopener">http://blog.qqbrowser.cc/tag/docs/</a></p></blockquote><p><em>上面jssdk调试也可以使用此方法</em></p><hr><hr><h2 id="拥有自己的服务器和自己的域名"><a href="#拥有自己的服务器和自己的域名" class="headerlink" title="拥有自己的服务器和自己的域名"></a>拥有自己的服务器和自己的域名</h2><h3 id="暴力的方法"><a href="#暴力的方法" class="headerlink" title="暴力的方法"></a>暴力的方法</h3><blockquote><p> 代码全部上传到服务器上开启调试</p></blockquote><h3 id="快速修改代码的方法"><a href="#快速修改代码的方法" class="headerlink" title="快速修改代码的方法"></a>快速修改代码的方法</h3><blockquote><p>把服务器上的请求直接 proxy 到本地</p></blockquote><p>1.服务器上 <code>Nginx</code> 把 <code>wechat.xinshangshangxin.com</code> 的请求转发到某个端口(如 10000)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name wechat.xinshangshangxin.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//127.0.0.1:10000;</span></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在本地开一个到服务器的转发通道（要求服务器开启 sshd 服务）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 1000 为服务器端口;  8000 为本机端口</span><br><span class="line">ssh yourname@yourip -R <span class="number">10000</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><p>3.让本地开发环境监听 8000 端口; 这样就可以直接在本地边开发边测试了，当然别忘了根据微信的规则配置 OAuth2.0网页授权 等参数</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://www.zhihu.com/question/25456655" target="_blank" rel="noopener">https://www.zhihu.com/question/25456655</a></p></li><li><p><a href="http://blog.lazybee.me/wechat-development/" target="_blank" rel="noopener">http://blog.lazybee.me/wechat-development/</a></p></li></ul><hr><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下安装插件出现node-gyp error</title>
      <link href="/2016/01/09/windows-node-gyp-error/"/>
      <url>/2016/01/09/windows-node-gyp-error/</url>
      
        <content type="html"><![CDATA[<p>安装插件出现 ImportError: No module named gyp<br><a id="more"></a></p><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在windows下使用cygwin安装插件出现<code>ImportError: No module named gyp</code></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>使用了cygwin安装的python</li><li>Visual Studio2015未安装</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>安装 VS2015   </p><blockquote><p><a href="http://msdn.itellyou.cn/" target="_blank" rel="noopener">在msdn.itellyou上选择开发人员工具下的Visual Studio 2015 Update 1安装</a>  </p></blockquote></li><li><p>安装Python 2.7  </p><blockquote><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python 2.7必须为安装包安装,在<code>cygwin</code>中安装的<code>python</code>无效</a>  </p></blockquote></li><li><p>在<code>计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量</code>的  <code>PATH</code>添加 <code>path\Python27\python.exe;</code> (必须添加到<code>python.exe</code>)</p></li><li>在命令行中输入<code>npm config set python path\Python27\python.exe</code><br>(<code>cygwin</code>下也可以在 <code>.zshrc</code>中添加<code>export PYTHON=&quot;D:/Python27/python.exe&quot;</code>)</li><li><code>npm config set msvs_version 2015 --global</code></li></ol><p><em>至此,安装 <code>mongodb</code> 等插件就能正常编译了</em></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如果依然不行,请尝试下面设置后再次尝试</p><p><code>set VCTargetsPath=C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140</code></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p><a href="https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp/issues/629#issuecomment-153196245</a></p></li><li><p><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp</a></p></li><li><p><a href="https://github.com/nodejs/node-gyp/issues/807#issuecomment-163364030" target="_blank" rel="noopener">use set VCTargetsPath</a></p></li></ul><hr><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在cygwin中npm安装git packages 失败</title>
      <link href="/2016/01/07/cygwin-npm-error/"/>
      <url>/2016/01/07/cygwin-npm-error/</url>
      
        <content type="html"><![CDATA[<p>在cygwin中安装是出现路径不正确,安装失败<br><a id="more"></a></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>npm 官方不支持在cygwin中安装</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>替换 <code>node_modules\npm\lib\utils\git.js</code> 为下面内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handle some git configuration for windows</span></span><br><span class="line"></span><br><span class="line">exports.spawn = spawnGit</span><br><span class="line">exports.chainableExec = chainableExec</span><br><span class="line">exports.whichAndExec = whichAndExec</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).execFile</span><br><span class="line">  , spawn = <span class="built_in">require</span>(<span class="string">"./spawn"</span>)</span><br><span class="line">  , npm = <span class="built_in">require</span>(<span class="string">"../npm.js"</span>)</span><br><span class="line">  , which = <span class="built_in">require</span>(<span class="string">"which"</span>)</span><br><span class="line">  , git = npm.config.get(<span class="string">"git"</span>)</span><br><span class="line">  , assert = <span class="built_in">require</span>(<span class="string">"assert"</span>)</span><br><span class="line">  , log = <span class="built_in">require</span>(<span class="string">"npmlog"</span>)</span><br><span class="line">  , win32 = process.platform === <span class="string">"win32"</span></span><br><span class="line">  , cygwin = win32 &amp;&amp; (process.env.ORIGINAL_PATH || <span class="string">''</span>).indexOf(<span class="string">'/cygdrive/'</span>) != <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixGitArgs</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> win32 ? [<span class="string">"-c"</span>, <span class="string">"core.longpaths=true"</span>] : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execGit</span> (<span class="params">args, options, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(cygwin &amp;&amp; args) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="string">':\\'</span>.indexOf(args[i]) != <span class="number">1</span>) &#123;</span><br><span class="line">              args[i] = args[i].replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>).replace(<span class="regexp">/^([A-Za-z])\:\//</span>, <span class="string">'/cygdrive/$1/'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> fullArgs = prefixGitArgs().concat(args || [])</span><br><span class="line">  log.info(<span class="string">'git'</span>, fullArgs)</span><br><span class="line">  <span class="keyword">return</span> exec(git, fullArgs, options, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spawnGit</span> (<span class="params">args, options</span>) </span>&#123;</span><br><span class="line">  log.info(<span class="string">"git"</span>, args)</span><br><span class="line">  <span class="keyword">return</span> spawn(git, prefixGitArgs().concat(args || []), options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainableExec</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> [execGit].concat(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whichGit</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> which(git, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whichAndExec</span> (<span class="params">args, options, cb</span>) </span>&#123;</span><br><span class="line">  assert.equal(<span class="keyword">typeof</span> cb, <span class="string">"function"</span>, <span class="string">"no callback provided"</span>)</span><br><span class="line">  <span class="comment">// check for git</span></span><br><span class="line">  whichGit(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      err.code = <span class="string">"ENOGIT"</span></span><br><span class="line">      <span class="keyword">return</span> cb(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execGit(args, options, cb)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h1><ul><li><a href="https://github.com/npm/npm/issues/7357" target="_blank" rel="noopener">https://github.com/npm/npm/issues/7357</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> cygwin </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular 使用 multipart/form-data 上传文件, sails.js 接收文件</title>
      <link href="/2015/12/17/angular-form/"/>
      <url>/2015/12/17/angular-form/</url>
      
        <content type="html"><![CDATA[<p>angular multipart/form-data,  sails.js 接收文件出现取不到值<br><a id="more"></a></p><h2 id="angular-上传文件"><a href="#angular-上传文件" class="headerlink" title="angular 上传文件"></a>angular 上传文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'url'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transformRequest: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    angular.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>)</span>&#123;</span><br><span class="line">      formData.append(key, value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> formData;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    file: <span class="string">'xxxx'</span>,</span><br><span class="line">    otherData: <span class="string">'xxxxx'</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="sails-接收文件"><a href="#sails-接收文件" class="headerlink" title="sails 接收文件"></a>sails 接收文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    req.file(<span class="string">'file'</span>).upload(<span class="function"><span class="keyword">function</span>(<span class="params">err, newFiles</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err || !newFiles || !newFiles[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(newFiles[<span class="number">0</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    filePath = file.fd;</span><br><span class="line">    <span class="keyword">var</span> stream = fs.createReadStream(filePath);</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.unlink(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        sails.log.warn(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果仅有文件上传, 或者上传的文件较小,不会发生问题,<br>但是既上传文件又上传其他字段<br><figure class="image-box">                <img src="/img/angularjs/form_data.png" alt="" title="" class="">                <p></p>            </figure></p><p>会导致 sails 无法取得 requestNo 的数据</p><p>故 使用 <code>sails</code> 接收  <code>multipart/form-data</code> 时, 前端上传时文件必须放最后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">fd.append(<span class="string">'requestNo'</span>, data.requestNo);</span><br><span class="line"><span class="comment">// file文件必须放最后面</span></span><br><span class="line">fd.append(<span class="string">'file'</span>, data.file);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $http(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'url'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: fd,</span><br><span class="line">    transformRequest: angular.identity</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data &amp;&amp; data.data || &#123;&#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h1><ul><li><a href="http://stackoverflow.com/questions/29764633/sails-js-form-post-not-submitting-any-data" target="_blank" rel="noopener">http://stackoverflow.com/questions/29764633/sails-js-form-post-not-submitting-any-data</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
            <tag> sails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs ng-click 触发两次事件</title>
      <link href="/2015/12/17/ngClick-fires-twice-on-button/"/>
      <url>/2015/12/17/ngClick-fires-twice-on-button/</url>
      
        <content type="html"><![CDATA[<p>在 pc的chrome中正常, 在 chrome 的<code>device mode</code>中触发2次, 在手机端触发2次<br><a id="more"></a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>在 pc的chrome中正常, 在 chrome 的<code>device mode</code>中触发2次, 在手机端触发2次</p></blockquote><h2 id="触发原因-同时使用了-ionic-和-angular-material"><a href="#触发原因-同时使用了-ionic-和-angular-material" class="headerlink" title="触发原因: 同时使用了 ionic 和 angular-material"></a>触发原因: 同时使用了 ionic 和 angular-material</h2><blockquote><p>Note: ng-click is broken on touch devices and Chrome emulation of such. Chrome desktop is unaffected. The Codepen above: works fine using 0.6.1 or 0.7.0 – broken on 0.7.1.<br>I suspect it might be because of the hammer.js change on 0.7.1 - Ionic has a similar built-in version of hammer as well</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$mdGestureProvider </span>) </span>&#123;</span><br><span class="line">  $mdGestureProvider.skipClickHijack();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h1><ul><li><a href="https://github.com/driftyco/ionic/issues/1022" target="_blank" rel="noopener">https://github.com/driftyco/ionic/issues/1022</a></li><li><a href="https://github.com/angular/material/issues/1406" target="_blank" rel="noopener">https://github.com/angular/material/issues/1406</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]HTTP Status Codes</title>
      <link href="/2015/12/06/http-status-codes/"/>
      <url>/2015/12/06/http-status-codes/</url>
      
        <content type="html"><![CDATA[<p>HTTP Status Codes<br><a id="more"></a></p><h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><blockquote><p>表示临时响应并需要请求者继续执行操作的状态代码。</p></blockquote><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明 </th></tr></thead><tbody><tr><td style="text-align:left">100   （继续）</td><td style="text-align:left">请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。  </td></tr><tr><td style="text-align:left">101   （切换协议）</td><td style="text-align:left">请求者已要求服务器切换协议，服务器已确认并准备切换。</td></tr></tbody></table><h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx  （成功）"></a>2xx  （成功）</h2><blockquote><p>表示成功处理了请求的状态代码。</p></blockquote><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明 </th></tr></thead><tbody><tr><td style="text-align:left">200   （成功）</td><td style="text-align:left">服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 </td></tr><tr><td style="text-align:left">201   （已创建）</td><td style="text-align:left">请求成功并且服务器创建了新的资源。 </td></tr><tr><td style="text-align:left">202   （已接受）</td><td style="text-align:left">服务器已接受请求，但尚未处理。 </td></tr><tr><td style="text-align:left">203   （非授权信息）</td><td style="text-align:left">服务器已成功处理了请求，但返回的信息可能来自另一来源。 </td></tr><tr><td style="text-align:left">204   （无内容）</td><td style="text-align:left">服务器成功处理了请求，但没有返回任何内容。 </td></tr><tr><td style="text-align:left">205   （重置内容）</td><td style="text-align:left">服务器成功处理了请求，但没有返回任何内容。 </td></tr><tr><td style="text-align:left">206   （部分内容）</td><td style="text-align:left">服务器成功处理了部分 GET 请求。</td></tr></tbody></table><h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><blockquote><p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p></blockquote><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明 </th></tr></thead><tbody><tr><td style="text-align:left">300   （多种选择）</td><td style="text-align:left">针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </td></tr><tr><td style="text-align:left">301   （永久移动）</td><td style="text-align:left">请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 </td></tr><tr><td style="text-align:left">302   （临时移动）</td><td style="text-align:left">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </td></tr><tr><td style="text-align:left">303   （查看其他位置）</td><td style="text-align:left">请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 </td></tr><tr><td style="text-align:left">304   （未修改）</td><td style="text-align:left">自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </td></tr><tr><td style="text-align:left">305   （使用代理）</td><td style="text-align:left">请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </td></tr><tr><td style="text-align:left">307   （临时重定向）</td><td style="text-align:left">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td></tr></tbody></table><h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><blockquote><p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p></blockquote><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明 </th></tr></thead><tbody><tr><td style="text-align:left">400   （错误请求）</td><td style="text-align:left">服务器不理解请求的语法。 </td></tr><tr><td style="text-align:left">401   （未授权）</td><td style="text-align:left">请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </td></tr><tr><td style="text-align:left">403   （禁止）</td><td style="text-align:left">服务器拒绝请求。 </td></tr><tr><td style="text-align:left">404   （未找到）</td><td style="text-align:left">服务器找不到请求的网页。 </td></tr><tr><td style="text-align:left">405   （方法禁用）</td><td style="text-align:left">禁用请求中指定的方法。 </td></tr><tr><td style="text-align:left">406   （不接受）</td><td style="text-align:left">无法使用请求的内容特性响应请求的网页。 </td></tr><tr><td style="text-align:left">407   （需要代理授权）</td><td style="text-align:left">此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 </td></tr><tr><td style="text-align:left">408   （请求超时）</td><td style="text-align:left">服务器等候请求时发生超时。 </td></tr><tr><td style="text-align:left">409   （冲突）</td><td style="text-align:left">服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </td></tr><tr><td style="text-align:left">410   （已删除）</td><td style="text-align:left">如果请求的资源已永久删除，服务器就会返回此响应。 </td></tr><tr><td style="text-align:left">411   （需要有效长度）</td><td style="text-align:left">服务器不接受不含有效内容长度标头字段的请求。 </td></tr><tr><td style="text-align:left">412   （未满足前提条件）</td><td style="text-align:left">服务器未满足请求者在请求中设置的其中一个前提条件。 </td></tr><tr><td style="text-align:left">413   （请求实体过大）</td><td style="text-align:left">服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </td></tr><tr><td style="text-align:left">414   （请求的 URI 过长）</td><td style="text-align:left">请求的 URI（通常为网址）过长，服务器无法处理。 </td></tr><tr><td style="text-align:left">415   （不支持的媒体类型）</td><td style="text-align:left">请求的格式不受请求页面的支持。 </td></tr><tr><td style="text-align:left">416   （请求范围不符合要求）</td><td style="text-align:left">如果页面无法提供请求的范围，则服务器会返回此状态代码。 </td></tr><tr><td style="text-align:left">417   （未满足期望值）</td><td style="text-align:left">服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><blockquote><p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p></blockquote><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明 </th></tr></thead><tbody><tr><td style="text-align:left">500   （服务器内部错误）</td><td style="text-align:left">服务器遇到错误，无法完成请求。 </td></tr><tr><td style="text-align:left">501   （尚未实施）</td><td style="text-align:left">服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 </td></tr><tr><td style="text-align:left">502   （错误网关）</td><td style="text-align:left">服务器作为网关或代理，从上游服务器收到无效响应。 </td></tr><tr><td style="text-align:left">503   （服务不可用）</td><td style="text-align:left">服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </td></tr><tr><td style="text-align:left">504   （网关超时）</td><td style="text-align:left">服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </td></tr><tr><td style="text-align:left">505   （HTTP 版本不受支持）</td><td style="text-align:left">服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h1><ul><li><a href="http://www.cnblogs.com/shanyou/archive/2012/05/06/2486134.html" target="_blank" rel="noopener">http://www.cnblogs.com/shanyou/archive/2012/05/06/2486134.html</a></li><li><a href="http://www.restapitutorial.com/httpstatuscodes.html" target="_blank" rel="noopener">http://www.restapitutorial.com/httpstatuscodes.html</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硕鼠解析自动跳过广告</title>
      <link href="/2015/11/29/flvcd-no-ad/"/>
      <url>/2015/11/29/flvcd-no-ad/</url>
      
        <content type="html"><![CDATA[<p>硕鼠解析自动跳过广告<br><a id="more"></a></p><h2 id="早期的硕鼠广告"><a href="#早期的硕鼠广告" class="headerlink" title="早期的硕鼠广告"></a>早期的硕鼠广告</h2><blockquote><p>早期的硕鼠广告只是通过URL中带有 <code>go=1</code> 即可跳过广告, 最近发现已失效</p></blockquote><h2 id="目前的硕鼠广告"><a href="#目前的硕鼠广告" class="headerlink" title="目前的硕鼠广告"></a>目前的硕鼠广告</h2><blockquote><p>通过设置cookie判断是否已经观看广告</p></blockquote><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><ol><li><p>postman抓取页面 <a href="http://www.flvcd.com/parse.php?flag=&amp;go=1&amp;format=&amp;kw=http%3A%2F%2Fv.youku.com%2Fv_show%2Fid_XMTI4OTgxNTE2NA%3D%3D.html%3Ffrom%3Ds1.8-1-1.1%26s%3D19545" target="_blank" rel="noopener">http://www.flvcd.com/parse.php?flag=&amp;go=1&amp;format=&amp;kw=http%3A%2F%2Fv.youku.com%2Fv_show%2Fid_XMTI4OTgxNTE2NA%3D%3D.html%3Ffrom%3Ds1.8-1-1.1%26s%3D19545</a></p></li><li><p>观察代码,发现多个eval函数</p></li><li>将eval函数替换成 <code>document.write</code> 解析eval混淆后的代码</li><li>得到1个关键函数 <code>createSc</code> 和 2个 <code>document.cookie=</code></li><li>提取关键函数跳过广告</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement.innerHTML;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isParsed = <span class="regexp">/&lt;input type="hidden" name="inf" value="/</span>.test(html);</span><br><span class="line"><span class="keyword">if</span> (isParsed) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = ((html.match(<span class="regexp">/\='\w&#123;32,32&#125;'\;/</span>) || [])[<span class="number">0</span>] || <span class="string">''</span>).replace(<span class="string">'=\''</span>, <span class="string">''</span>).replace(<span class="string">'\';'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">var</span> time = ((html.match(<span class="regexp">/\=\d&#123;13,13&#125;/</span>) || [])[<span class="number">0</span>] || <span class="string">''</span>).replace(<span class="string">'='</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">parseCookie(key, time);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCookie</span>(<span class="params">key, time</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createSc</span>(<span class="params">a, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">'24227945943216730751837054267565'</span>;</span><br><span class="line">    t = <span class="built_in">Math</span>.floor(t / (<span class="number">600</span> * <span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> j = a.charCodeAt(i) ^ b.charCodeAt(i) ^ t;</span><br><span class="line">      j = j % <span class="string">'z'</span>.charCodeAt(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">var</span> c;</span><br><span class="line">      <span class="keyword">if</span> (j &lt; <span class="string">'0'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="built_in">String</span>.fromCharCode(<span class="string">'0'</span>.charCodeAt(<span class="number">0</span>) + j % <span class="number">9</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= <span class="string">'0'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; j &lt;= <span class="string">'9'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="built_in">String</span>.fromCharCode(j);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="string">'9'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; j &lt; <span class="string">'A'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="string">'9'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= <span class="string">'A'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; j &lt;= <span class="string">'Z'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="built_in">String</span>.fromCharCode(j);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="string">'Z'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; j &lt; <span class="string">'a'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="string">'Z'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= <span class="string">'z'</span>.charCodeAt(<span class="number">0</span>) &amp;&amp; j &lt;= <span class="string">'z'</span>.charCodeAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        c = <span class="built_in">String</span>.fromCharCode(j);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c = <span class="string">'z'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ret += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> g = createSc(key, time);</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  date.setTime(date.getTime() + <span class="number">300</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">document</span>.cookie = <span class="string">'go='</span> + g + <span class="string">';expires='</span> + date.toGMTString();</span><br><span class="line">  <span class="built_in">document</span>.cookie = <span class="string">'avdGggggtt='</span> + time + <span class="string">';expires='</span> + date.toGMTString();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location.reload();</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整脚本地址"><a href="#完整脚本地址" class="headerlink" title="完整脚本地址:"></a>完整脚本地址:</h1><ul><li><a href="https://github.com/xinshangshangxin/youkuvod/tree/flvcd" target="_blank" rel="noopener">github</a></li><li><a href="https://greasyfork.org/zh-CN/scripts/14267-flvcdnoad" target="_blank" rel="noopener">greasyfork</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> youkuvod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make: &#39;test&#39; is up to date</title>
      <link href="/2015/11/17/make-show-up-to-date/"/>
      <url>/2015/11/17/make-show-up-to-date/</url>
      
        <content type="html"><![CDATA[<p>make test一直提示 up to date的解决方法<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make <span class="built_in">test</span></span><br><span class="line">=&gt; make: `<span class="built_in">test</span><span class="string">' is up to date.</span></span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><blockquote><p>在Makefile中添加 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: all <span class="built_in">test</span> clean</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://stackoverflow.com/questions/3931741/why-does-make-think-the-target-is-up-to-date" target="_blank" rel="noopener">http://stackoverflow.com/questions/3931741/why-does-make-think-the-target-is-up-to-date</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> make </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cygwin下zsh安装</title>
      <link href="/2015/10/30/cygwin-zsh/"/>
      <url>/2015/10/30/cygwin-zsh/</url>
      
        <content type="html"><![CDATA[<p>cygwin下zsh安装<br><a id="more"></a></p><p>相关文章<br><a href="http://blog.xinshangshangxin.com/2015/02/22/ConEmu%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/">ConEmu设置当前目录打开右键菜单</a><br><a href="http://blog.xinshangshangxin.com/2015/05/10/cygwin%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/">cygwin配置记录</a></p><h2 id="安装-apt-cyg-类似linux的-apt-get"><a href="#安装-apt-cyg-类似linux的-apt-get" class="headerlink" title="安装 apt-cyg(类似linux的 apt-get)"></a>安装 <a href="https://github.com/transcode-open/apt-cyg" target="_blank" rel="noopener"><code>apt-cyg</code></a>(类似linux的 <code>apt-get</code>)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lynx -<span class="built_in">source</span> rawgit.com/transcode-open/apt-cyg/master/apt-cyg &gt; apt-cyg</span><br><span class="line">install apt-cyg /bin</span><br></pre></td></tr></table></figure><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><blockquote><p>mac/linux 有 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>, 在cygwin有<a href="https://github.com/haithembelhaj/oh-my-cygwin" target="_blank" rel="noopener">oh-my-cygwin</a>;安装<code>oh-my-cygwin</code>命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.github.com/haithembelhaj/oh-my-cygwin/master/oh-my-cygwin.sh -O - | sh</span><br></pre></td></tr></table></figure><blockquote><p>安装过程中出现 <code>apt-cyg</code> 安装失败(可能是脚本里面地址写错了);但是上面已经安装过了 <code>apt-cyg</code>, 故注释安装 <code>apt-cyg</code>的代码,修改脚本,文件名为 <code>oh-my-cygwin.sh</code>, 内容为:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd home</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">SIMPLE_BACKUP_SUFFIX=<span class="string">".orig"</span></span><br><span class="line">APT_CYG=<span class="string">"<span class="variable">$(mktemp /tmp/apt-cyg.XXXXXXXX)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # install apt-cyg</span></span><br><span class="line"><span class="comment"># wget --no-check-certificate "https://github.com/john-peterson/apt-cyg/raw/path/apt-cyg" -O "$&#123;APT_CYG&#125;"</span></span><br><span class="line"><span class="comment"># chmod +x "$&#123;APT_CYG&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install some stuff like vim and git</span></span><br><span class="line">apt-cyg install zsh mintty vim curl git openssh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># install OH MY ZSH</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create initial /etc/zshenv</span></span><br><span class="line">[[ ! -e /etc/zshenv ]] &amp;&amp; <span class="built_in">echo</span> <span class="built_in">export</span> PATH=/usr/bin:\<span class="variable">$PATH</span> &gt; /etc/zshenv</span><br><span class="line"></span><br><span class="line">install --backup ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#setting up vim</span></span><br><span class="line">VIMRC_EXAMPLE=`find /usr/share/vim -<span class="built_in">type</span> f -name vimrc_example.vim | head -n 1`</span><br><span class="line"><span class="keyword">if</span> [ ! -f ~/.vimrc ] &amp;&amp; [ -n <span class="string">"<span class="variable">$&#123;VIMRC_EXAMPLE&#125;</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  install <span class="string">"<span class="variable">$&#123;VIMRC_EXAMPLE&#125;</span>"</span> ~/.vimrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install apt-cyg</span></span><br><span class="line">install --backup <span class="string">"<span class="variable">$&#123;APT_CYG&#125;</span>"</span> /bin/apt-cyg</span><br><span class="line"></span><br><span class="line"><span class="comment"># setting up zsh as default</span></span><br><span class="line">sed -i <span class="string">"s/<span class="variable">$USER</span>\:\/bin\/bash/<span class="variable">$USER</span>\:\/bin\/zsh/g"</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># et voila just start it</span></span><br><span class="line">/usr/bin/env zsh</span><br></pre></td></tr></table></figure><blockquote><p>然后执行 <code>./oh-my-cygwin.sh</code>后成功安装</p></blockquote><h2 id="在-ConEmu-下设置窗口默认打开-zsh"><a href="#在-ConEmu-下设置窗口默认打开-zsh" class="headerlink" title="在 ConEmu 下设置窗口默认打开 zsh"></a>在 <code>ConEmu</code> 下设置窗口默认打开 <code>zsh</code></h2><p><code>SET CHERE_INVOKING=1 &amp; &quot;你的cygwin安装目录\bin\zsh -l -i&quot; -cur_console:t:&quot;cygwin terminal&quot;</code></p><p><img src="/img/conemu/11.png" alt="设置 ConEmu下设置窗口默认打开zsh"></p><h2 id="在-ConEmu-下设置右键当前目录打开-zsh"><a href="#在-ConEmu-下设置右键当前目录打开-zsh" class="headerlink" title="在 ConEmu 下设置右键当前目录打开 zsh"></a>在 <code>ConEmu</code> 下设置右键当前目录打开 <code>zsh</code></h2><p><code>SET CHERE_INVOKING=1 &amp; &quot;你的cygwin安装目录\bin\zsh -l -i&quot; -cur_console:t:&quot;cygwin terminal&quot;</code></p><figure class="image-box">                <img src="/img/conemu/12.png" alt="在ConEmu下设置右键当前目录打开zsh" title="" class="">                <p>在ConEmu下设置右键当前目录打开zsh</p>            </figure><h2 id="在-ConEmu-下设置-只打开一个窗口-全部以标签形式打开"><a href="#在-ConEmu-下设置-只打开一个窗口-全部以标签形式打开" class="headerlink" title="在 ConEmu 下设置 只打开一个窗口, 全部以标签形式打开"></a>在 <code>ConEmu</code> 下设置 只打开一个窗口, 全部以标签形式打开</h2><p><img src="/img/conemu/13.png" alt="在 ConEmu下设置 只打开一个窗口"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ConEmu </tag>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在已忽略文件夹中不忽略指定文件夹</title>
      <link href="/2015/10/24/exclude-everything-except-a-specific-directory/"/>
      <url>/2015/10/24/exclude-everything-except-a-specific-directory/</url>
      
        <content type="html"><![CDATA[<p>网上搜索到的答案有很多是错误的,故记录之<br><a id="more"></a></p><ul><li>在已忽略文件夹中不忽略指定文件夹<code>忽略themes文件夹所有内容, 除了 themes/jacman/文件夹</code></li></ul><blockquote><p><strong><code>/*</code>  不可省略!</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">themes/*</span><br><span class="line">!themes/jacman/</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>(英文原文: ) Example to exclude everything except a specific directory foo/bar (note the /* - without the slash, the wildcard would also exclude everything within foo/bar):</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># exclude everything except directory foo/bar</span><br><span class="line">/*</span><br><span class="line">!/foo</span><br><span class="line">/foo/*</span><br><span class="line">!/foo/bar</span><br></pre></td></tr></table></figure><ul><li>其它注意点</li></ul><ol><li>空行不匹配任何内容,所以可以作为块分隔符；</li><li><code>#</code> 开头表示注释,如果相匹配 <code>#</code>,可以在前面加一个反斜杠,即 <code>\#</code></li><li>除非加了反斜杠,否则一连串的空格会被忽略；</li><li>如果在匹配的内容前面加上 <code>!</code> ,则这些匹配过的部分将被移出,如果要匹配以  <code>!</code>  开头的内容,需要加上反斜杠,如  <code>\!important.txt</code></li><li>如果一个匹配 pattern 后面有一个斜杠,如 <code>foo/</code>,则默认会匹配所有（包含父子文件夹）中的 foo 文件夹内容</li><li>如果一个匹配 pattern 不包含斜杠,如 foo,Git 会将其作为一个 shell 的查找命令匹配内容</li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://www.barretlee.com/blog/2015/09/06/set-gitignore-after-add-file/" target="_blank" rel="noopener">此文章为错误说明已忽略文件夹中不忽略指定文件夹写法</a></li><li><a href="http://my.oschina.net/longyuan/blog/521098" target="_blank" rel="noopener">http://my.oschina.net/longyuan/blog/521098</a></li><li><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">https://git-scm.com/docs/gitignore</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 安装插件无权限</title>
      <link href="/2015/10/24/npm-throws-error-without-sudo/"/>
      <url>/2015/10/24/npm-throws-error-without-sudo/</url>
      
        <content type="html"><![CDATA[<p>安装插件出现 Error: EACCES, open ‘….’<br><a id="more"></a></p><ul><li>需要设置权限写文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="string">`whoami`</span> ~<span class="regexp">/.npm</span></span><br></pre></td></tr></table></figure><ul><li>尝试安装插件, 如果出错,继续执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="string">`whoami`</span> /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure><ul><li>如果依然有错, 可能需要</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="string">`whoami`</span> /usr/local</span><br></pre></td></tr></table></figure><ul><li>还是报错,请 <code>sudo</code> 执行命令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install ...</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://stackoverflow.com/questions/16151018/npm-throws-error-without-sudo" target="_blank" rel="noopener">http://stackoverflow.com/questions/16151018/npm-throws-error-without-sudo</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Agreeing to the Xcode/iOS license requires admin privileges</title>
      <link href="/2015/10/03/Agreeing-to-the-Xcode-iOS-license-requires-admin-privileges/"/>
      <url>/2015/10/03/Agreeing-to-the-Xcode-iOS-license-requires-admin-privileges/</url>
      
        <content type="html"><![CDATA[<p>解决升级了xcode后出现的问题<br><a id="more"></a></p><ol><li>打开终端，输入  <code>sudo xcodebuild -license</code></li><li>终端提示敲回车键<code>(enter)</code>打开许可协议</li><li>终端提示 按下  <code>space</code> 键阅读许可协议，按<code>q</code> 不阅读</li><li>最终，终端会出现三个选项，<code>agree 、print、cancel</code>，输入<code>agree</code>，然后回车</li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://blog.csdn.net/yabusai/article/details/37690783" target="_blank" rel="noopener">http://blog.csdn.net/yabusai/article/details/37690783</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]promises 很酷，但很多人并没有理解就在用了</title>
      <link href="/2015/09/29/promise-problem/"/>
      <url>/2015/09/29/promise-problem/</url>
      
        <content type="html"><![CDATA[<p>promises详解<br><a id="more"></a></p><p>JavaScript 开发者们，是时候承认了，我们在使用<code>promises</code>的时候，会写出许多有问题的<code>promises</code>代码.但并不是 <code>promises</code>本身有问题，被<a href="https://promisesaplus.com/" target="_blank" rel="noopener">A+ 标准</a>,定义的<code>promises</code> 是极好的  </p><p> 在过去的几年中，笔者看到了很多程序员在调用PouchDB或者其他promise化的API时遇到了很多困难。这让笔者认识到，在JavaScript程序员之中，只有少数人是真正理解了promise规范的。如果你觉得这不可思议，那么考虑下我最近<a href="https://twitter.com/nolanlawson/status/578948854411878400" target="_blank" rel="noopener">在Twitter上的写的一个比较难的题目</a>：</p><p><strong>Q：下面四个使用promise的语句之间的不同点在哪儿？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">doSomething().then(doSomethingElse());</span><br><span class="line"></span><br><span class="line">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure><p>如果你知道这个问题的答案，那么恭喜你，你已经是一个promise大师并且可以直接关闭这个网页了。  </p><p>但是对于不能回答这个问题的程序员中99.9%的人，别担心，你们不是少数派。没有人能够在笔者的tweet上完全正确的回答这个问题，而且对于第三条语句的最终答案也令我感到震惊，即便我是出题人。  </p><p>答案在这篇博文的底部，但是首先，笔者必须先介绍为何promise显得难以理解，为什么我们当中无论是新手或者是很接近专家水准的人都有被promise折磨的经历。同时，笔者也会给出自认为能够快速、准确理解promise的方法。而且笔者确信读过这篇文章之后，理解promise不会那么难了。  </p><p>在此之前，我们先了解一下有关promise的一些基本设定。  </p><p><strong><code>promise</code>从哪里来？</strong></p><p>如果你读过有关<code>promise</code>的文章，你会发现文章中一定会提到回调深坑，不说别的，在视觉上，回调金字塔会让你的代码最终超过屏幕的宽度。<br><code>promise</code>是能够解决这个问题的，但是它解决的问题不仅仅是缩进。在讨论到如何解决回调金字塔问题的时候，我们遇到真正的难题是回调函数剥夺了程序员使用<code>return</code>和<code>throw</code>的能力。而程序的执行流程的基础建立于一个函数在执行过程中调用另一个函数时产生的副作用。(译者注：个人对这里副作用的理解是，函数调用函数会产生函数调用栈，而回调函数是不运行在栈上的，因此不能使用<code>return</code>和<code>throw</code>)。</p><p>事实上，回调函数会做一些更邪恶的事情，它们剥夺我们在栈上执行代码的能力，而在其他语言当中，我们始终都能够在栈上执行代码。编写不在栈上运行的代码就像驾驶没有刹车的汽车一样，在你真正需要它之前，你是不会理解你有多需要它。</p><p><code>promise</code>被设计为能够让我们重新使用那些编程语言的基本要素：<code>return</code>，<code>throw</code>，栈。在想要使用<code>promise</code>之前，我们首先要学会正确使用它。</p><p>新手常见错误</p><p>一些人尝试使用漫画的方式解释<code>promise</code>，或者是像是解释名词一样解释它：它表示同步代码中的值，并且能在代码中被传递。</p><p>笔者并没有觉得这些解释对理解<code>promise</code>有用。笔者自己的理解是：<code>promise</code>是关于代码结构和代码运行流程的。因此，笔者认为展示一些常见错误，并告诉大家如何修正它才是王道。</p><p>扯远一点，对于<code>promise</code>不同的人有不同的理解，为了本文的最终目的，我在这里只讨论<code>promise</code>的官方规范，在较新版本的浏览器会作为<code>window</code>对象的一个属性被暴露出来。然而并不是所有的浏览器都支持这一特性，但是到目前为止有许多对于规范的实现，比如这个有着很嚣张的名字的<code>promise</code>库：<code>lie</code>，同时它还非常精简。</p><h3 id="新手错误No-1：回调金字塔"><a href="#新手错误No-1：回调金字塔" class="headerlink" title="新手错误No.1：回调金字塔"></a>新手错误No.1：回调金字塔</h3><p>PouchDB有许多promise风格的API，程序员在写有关PouchDB的代码的时候，常常将promise用的一塌糊涂。下面给出一种很常见的糟糕写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">remotedb.allDocs(&#123;</span><br><span class="line">  include_docs: <span class="literal">true</span>,</span><br><span class="line">  attachments: <span class="literal">true</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docs = result.rows;</span><br><span class="line">  docs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    localdb.put(element.doc).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">"Pulled doc with id "</span> + element.doc._id + <span class="string">" and added to local db."</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err.status == <span class="number">409</span>) &#123;</span><br><span class="line">        localdb.get(element.doc._id).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">          localdb.remove(resp._id, resp._rev).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line"><span class="comment">// et cetera...</span></span><br></pre></td></tr></table></figure><p>你确实可以将promise当做回调函数来使用，但这却是一种杀鸡用牛刀的行为。不过这么做也是可行的。 你可能会认为这种错误是那些刚入行的新手才会犯的。但是笔者在<a href="http://devblog.blackberry.com/2015/05/connecting-to-couchbase-with-pouchdb/" target="_blank" rel="noopener">黑莓的开发者博客上</a>曾经看到类似的代码。过去的书写回调函数的习惯是很难改变的。</p><p>下面给出一种代码风格更好的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">remotedb.allDocs(...).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfAllDocs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> localdb.put(...);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfPut</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> localdb.get(...);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resultOfGet</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> localdb.put(...);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这就是<code>promise</code>的链式调用，它体现promise的强大之处，每个函数在上一个promise的状态变为resolved的时候才会被调用，并且能够得到上一个promise的输出结果。稍后还有详细的解释。</p><p>新手错误2：怎样用<code>forEach()</code>处理<code>promise</code></p><p>这个问题是大多数人掌握<code>promise</code>的拦路虎，当这些人想在代码中使用他们熟悉的<code>forEach()</code>方法或者是写一个<code>for</code>循环，亦或是<code>while</code>循环的时候，都会为如何使用<code>promise</code>而疑惑不已。他们会写下这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// I want to remove() all docs</span></span><br><span class="line">db.allDocs(&#123;<span class="attr">include_docs</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  result.rows.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">    db.remove(row.doc);  </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I naively believe all docs have been removed() now!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码的问题在于第一个回调函数实际上返回的是<code>undefined</code>，也就意味着第二个函数并不是在所有的<code>db.remove()</code>执行结束之后才执行。事实上，第二个函数的执行不会有任何延时，它执行的时候被删除的doc数量可能为任意整数。  </p><p>这段代码看起来是能够正常工作的，因此这个bug也具有一定的隐藏性。写下这段代码的人设想PouchDB已经删除了这些docs，可以更新UI了。这个bug会在一定几率下出现，或者是特定的浏览器。而且一旦出现，这种bug是很难调试的。</p><p>总结起来说，出现这个bug并不是<code>promise</code>的错，这个黑锅应该<code>forEach()/for/while</code>来背。这时候你需要的是<code>Promise.all()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.allDocs(&#123;<span class="attr">include_docs</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(result.rows.map(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> db.remove(row.doc);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">arrayOfResults</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// All docs have really been removed() now!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="新手错误3：忘记添加catch-方法"><a href="#新手错误3：忘记添加catch-方法" class="headerlink" title="新手错误3：忘记添加catch()方法"></a>新手错误3：忘记添加catch()方法</h3><p>这是一个很常见的错误。很多程序员对他们代码中的<code>promise</code>调用十分自信，觉得代码永远不会抛出一个<code>error</code>，也可能他们只是简单的忘了加<code>catch()</code>方法。不幸的是，不加<code>catch()</code>方法会让回调函数中抛出的异常被吞噬，在你的控制台是看不到相应的错误的，这对调试来说是非常痛苦的。</p><p>为了避免这种糟糕的情况，我已经养成了在自己的<code>promise</code>调用链最后添加如下代码的习惯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> anotherPromise();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> yetAnotherPromise();</span><br><span class="line">&#125;).catch(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)); <span class="comment">// &lt;-- this is badass</span></span><br></pre></td></tr></table></figure><p>即使你并不打算在代码中处理异常，在代码中添加catch()也是一个谨慎的编程风格的体现。在某种情况下你原先的假设出错的时候，这会让你的调试工作轻松一些。</p><p>新手错误4：使用<code>deferred</code></p><p>这类型错误笔者经常看到，在这里我也不想重复它了。简而言之，promise经过了很长一段时间的发展，有一定的历史包袱。JavaScript社区用了很长的时间才纠正了发展道路上的一些错误。在早些时候，jQuery和Angular都在使用’deferred’类型的promise。而在最新的ES6的Promise标准中，这种实现方式已经被替代了，同时，一些Promise的库，比如Q，bluebid，lie也是参照ES6的标准来实现的。</p><p>如果你还在代码中使用deferred的话，那么你就是走在错误的道路上了，这里笔者给出一些修正的办法。</p><p>首先，绝大多数的库都给出了将第三方库的方法包装成promise对象的方法。<br>举例来说，Angular的(<code>q</code>模块可以使用)<code>q.when()</code>完成这一包装过程。因此，在Angular中，包装PouchDB的promise API的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$q.when(db.put(doc)).then(<span class="comment">/* ... */</span>); <span class="comment">// &lt;-- this is all the code you need</span></span><br></pre></td></tr></table></figure></p><p>另一种方法就是使用暴露给程序员的构造函数。<code>promise</code>的构造函数能够包装那些非<code>promise</code>的API。<br>下面给出一个例子，在该例中将node.js提供的fs.readFile()方法包装成promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'myfile.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(file);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为什么这是一种反模式更多的信息可以查看： <a href="https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern" target="_blank" rel="noopener">the Bluebird wiki page on promise anti-patterns</a>.</p></blockquote><h3 id="新手常见错误＃5-使用其副作用而不是return"><a href="#新手常见错误＃5-使用其副作用而不是return" class="headerlink" title="新手常见错误＃5:使用其副作用而不是return"></a>新手常见错误＃5:使用其副作用而不是return</h3><p>下面的代码有什么问题？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  someOtherPromise();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Gee, I hope someOtherPromise() has resolved!</span></span><br><span class="line">  <span class="comment">// Spoiler alert: it hasn't.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Ok，现在是时候讨论所有需要了解的关于<code>promise</code>的知识点了。理解了这一个知识点，笔者提到的一些错误你都不会犯了。</p><p>就像我之前说过的，promise的神奇之处在于让我们能够在回调函数里面使用return和throw。但是实践的时候是什么样子呢？</p><p>每一个promise对象都会提供一个then方法或者是catch方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I'm inside a then() function!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们在这里能做什么呢？有三种事可以做：</p><ol><li>返回另一个promise；</li><li>返回一个同步值（或者undefined</li><li>抛出一个同步错误。</li></ol><p>理解这三种情况之后，你就会理解promise了。</p><h3 id="1-返回另一个promise对象"><a href="#1-返回另一个promise对象" class="headerlink" title="1.返回另一个promise对象"></a>1.返回另一个promise对象</h3><p>在有关promise的相关文章中，这种写法很常见，就像上文提到的构成promise链的一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I got a user account!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码里面的return非常关键，没有这个return的话，getUserAccountById只是一个普通的被别的函数调用的函数。下一个回调函数会接收到undefined而不是userAccount</p><h3 id="2-返回一个同步的值或者是undefined"><a href="#2-返回一个同步的值或者是undefined" class="headerlink" title="2.返回一个同步的值或者是undefined"></a>2.返回一个同步的值或者是undefined</h3><p>返回一个undefined大多数情况下是错误的，但是返回一个同步的值确实是一个将同步代码转化成promise风格代码的好方法。举个例子，现在在内存中有users。我们可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inMemoryCache[user.id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> inMemoryCache[user.id];    <span class="comment">// returning a synchronous value!</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id); <span class="comment">// returning a promise!</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I got a user account!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第二个回调函数并不关心userAccount是通过同步的方式得到的还是异步的方式得到的，而第一个回调函数即可以返回同步的值又可以返回异步的值。<br>不幸的是，如果不显式调用return语句的话，javaScript里的函数会返回undefined。这也就意味着在你想返回一些值的时候，不显式调用return会产生一些副作用。<br>出于上述原因，笔者养成了一个个人习惯就是在then方法内部永远显式的调用return或者throw。笔者也推荐你这样做。</p><h3 id="3-抛出一个同步的错误"><a href="#3-抛出一个同步的错误" class="headerlink" title="3.抛出一个同步的错误"></a>3.抛出一个同步的错误</h3><p>说到throw，这又体现了promise的功能强大。在用户退出的情况下，我们的代码中会采用抛出异常的方式进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (user.isLoggedOut()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'user logged out!'</span>); <span class="comment">// throwing a synchronous error!</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inMemoryCache[user.id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> inMemoryCache[user.id];       <span class="comment">// returning a synchronous value!</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id);    <span class="comment">// returning a promise!</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I got a user account!</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Boo, I got an error!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果用户已经登出的话，catch()会收到一个同步的错误，如果有promise对象的状态变为rejected的话，它还会收到一个异步的错误。catch()的回调函数不用关心错误是异步的还是同步的。</p><p>在使用promise的时候抛出异常在开发阶段很有用，它能帮助我们定位代码中的错误。比方说，在then函数内部调用JSON.parse（），如果JSON对象不合法的话，可能会抛出异常，在回调函数中，这个异常会被吞噬，但是在使用promise之后，我们就可以捕获到这个异常了。</p><h2 id="进阶错误"><a href="#进阶错误" class="headerlink" title="进阶错误"></a>进阶错误</h2><p>接下来我们讨论一下使用promise的边界情况。</p><p>下面的错误笔者将他们归类为“进阶错误”，因为这些错误发生在那些已经相对熟练使用promise的程序员身上。但是为了解决本文开头提出的问题，还是有必要对其进行讨论。</p><h3 id="进阶错误1：不了解Promise-resolve"><a href="#进阶错误1：不了解Promise-resolve" class="headerlink" title="进阶错误1：不了解Promise.resolve()"></a>进阶错误1：不了解Promise.resolve()</h3><p>就像之前所说的，promise能够将同步代码包装成异步的形式。然而，如果你经常写出如下的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(someSynchronousValue);</span><br><span class="line">&#125;).then(<span class="comment">/* ... */</span>);</span><br></pre></td></tr></table></figure><p>你可以使用Promise.resolve()将上述代码精简。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(someSynchronousValue).then(<span class="comment">/* ... */</span>);</span><br></pre></td></tr></table></figure><p>在捕获同步异常的时候这个做法也是很有效的。我在编写API的时候已经养成了使用Promise.resolve()的习惯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">somePromiseAPI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomethingThatMayThrow();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">  &#125;).then(<span class="comment">/* ... */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，有可能抛出错误的代码都有可能因为错误被吞噬而对你的工作造成困扰。但是如果你用Promise.resolve()包装了代码的话，你永远都可以在代码后面加上catch()。</p><p>相同的，使用Promise.reject()可以立即返回一个状态为rejected的promise对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'some awful error'</span>));</span><br></pre></td></tr></table></figure><h3 id="进阶错误2：cacth-和then-null-…-并不完全相同"><a href="#进阶错误2：cacth-和then-null-…-并不完全相同" class="headerlink" title="进阶错误2：cacth()和then(null, …)并不完全相同"></a>进阶错误2：cacth()和then(null, …)并不完全相同</h3><p>笔者提到过过cacth()是then(null, …)的语法糖，因此下面两个代码片段是等价的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">somePromise().catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">somePromise().then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，这并不意味着下面的两个代码片段是等价的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someOtherPromise();</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someOtherPromise();</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你不理解的话，那么请思考一下如果第一个回调函数抛出一个错误会发生什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oh noes'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I caught your error! :)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oh noes'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// I didn't catch your error! :(</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结论就是，当使用then(resolveHandler, rejectHandler)，rejectHandler不会捕获在resolveHandler中抛出的错误。</p><p>因为，笔者的个人习惯是从不使用then方法的第二个参数，转而使用catch()方法。但是也有例外，就是在笔者写异步的Mocha的测试用例的时候，如果想确认一个错误被抛出的话，代码是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should throw an error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingThatThrows().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'I expected an error!'</span>);</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    should.exist(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>说到测试，将<a href="http://mochajs.org/" target="_blank" rel="noopener">Mocha</a> 和 <a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a> 联合使用是一种很好的测试promise API的方案。</p><p>. The <a href="https://github.com/pouchdb/plugin-seed" target="_blank" rel="noopener">pouchdb-plugin-seed</a> 项目有很多你<a href="https://github.com/pouchdb/plugin-seed/blob/master/test/test.js" target="_blank" rel="noopener">可以入手的简单的测试。</a></p><h3 id="进阶错误3：promise-vs-promise-factories"><a href="#进阶错误3：promise-vs-promise-factories" class="headerlink" title="进阶错误3：promise vs promise factories"></a>进阶错误3：promise vs promise factories</h3><p>某些情况下你想一个接一个的执行一系列promise，这时候你想要一个类似于Promise.all()的方法，但是Proimise.all()是并行执行的，不符合要求。你可能一时脑抽写下这样的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  promises.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">    result = result.then(promise);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不幸的是，这段代码不会按照你所想的那样执行，那些promise对象里的异步调用还是会并行的执行。原因是你根本不应当在promise对象组成的数组这个层级上操作。对于每个promise对象来说，一旦它被创建，相关的异步代码就开始执行了。因此，这里你真正想要的是一个promise工厂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promiseFactories</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  promiseFactories.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promiseFactory</span>) </span>&#123;</span><br><span class="line">    result = result.then(promiseFactory);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个promise工厂非常简单，它就是一个返回promise对象的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromiseFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> somethingThatCreatesAPromise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么可以达到目的呢？因为promise工厂只有在调用的时候才会创建promise对象。它和then()方法的工作方式很像，事实上，它们就是一样的东西。</p><h3 id="进阶错误4：如果我想要两个promise的结果应当如何做呢？"><a href="#进阶错误4：如果我想要两个promise的结果应当如何做呢？" class="headerlink" title="进阶错误4：如果我想要两个promise的结果应当如何做呢？"></a>进阶错误4：如果我想要两个promise的结果应当如何做呢？</h3><p>很多时候，一个promise的执行是依赖另一个promise的。但是在某些情况下，我们想得到两个promise的执行结果，比方说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// dangit, I need the "user" object too!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了避免产生回调金字塔，我们可能会在外层作用域存储user对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user;</span><br><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  user = result;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// okay, I have both the "user" and the "userAccount"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码能够到达想要的效果，但是这种实现有一点不正式的成分在里面，我的建议是，这时候需要抛开成见，拥抱回调金字塔：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// okay, I have both the "user" and the "userAccount"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至少，是暂时拥抱回调金字塔。如果缩进真的成为了你代码中的一个大问题，那么你可以像每一个JavaScript程序员从开始写代码起就被教导的一样，将其中的部分抽出来作为一个单独的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUserAndUserAccount</span>(<span class="params">user, userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomething(user, userAccount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUser</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> onGetUserAndUserAccount(user, userAccount);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserByName(<span class="string">'nolan'</span>)</span><br><span class="line">  .then(onGetUser)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// at this point, doSomething() is done, and we are back to indentation 0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>随着你的promise代码越来越复杂，你会将越来越多的代码作为函数抽离出来。笔者发现这会促进代码风格变得优美：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">putYourRightFootIn()</span><br><span class="line">  .then(putYourRightFootOut)</span><br><span class="line">  .then(putYourRightFootIn)  </span><br><span class="line">  .then(shakeItAllAbout);</span><br></pre></td></tr></table></figure><p>That’s what promises are all about.</p><p>这就是promise的最终目的。</p><h3 id="进阶错误5：promise坠落现象"><a href="#进阶错误5：promise坠落现象" class="headerlink" title="进阶错误5：promise坠落现象"></a>进阶错误5：promise坠落现象</h3><p>这个错误我在前文中提到的问题中间接的给出了。这个情况比较深奥，或许你永远写不出这样的代码，但是这种写法还是让笔者感到震惊。 你认为下面的代码会输出什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>)).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你认为输出的是bar，那么你就错了。实际上它输出的是foo！</p><p>产生这样的输出是因为你给then方法传递了一个非函数（比如promise对象）的值，代码会这样理解：then(null)，因此导致前一个promise的结果产生了坠落的效果。你可以自己测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="literal">null</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>让我们回到之前讲解promise vs promise factoriesde的地方。简而言之，如果你直接给then方法传递一个promise对象，代码的运行是和你所想的不一样的。then方法应当接受一个函数作为参数。因此你应当这样书写代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这次会如我们预期的那样返回bar。</p><p>所以要提醒你自己：永远给then()传递一个函数参数。</p><h2 id="解决疑惑"><a href="#解决疑惑" class="headerlink" title="解决疑惑"></a>解决疑惑</h2><p>现在我们已经学习了关于promises要知道的所有的东西（或者接近于此），我们应该能够解决我在这篇文章开始时提出的疑惑了。</p><p>下面给出前文题目的解答</p><h3 id="Puzzle＃1"><a href="#Puzzle＃1" class="headerlink" title="Puzzle＃1:"></a>Puzzle＃1:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure><p>Answer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(<span class="literal">undefined</span>)</span><br><span class="line">                  |------------------|</span><br><span class="line">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class="line">                                     |------------------|</span><br></pre></td></tr></table></figure><h3 id="Puzzle-2"><a href="#Puzzle-2" class="headerlink" title="Puzzle #2"></a>Puzzle #2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure><p>Answer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(<span class="literal">undefined</span>)</span><br><span class="line">                  |------------------|</span><br><span class="line">                  finalHandler(<span class="literal">undefined</span>)</span><br><span class="line">                  |------------------|</span><br></pre></td></tr></table></figure><h3 id="Puzzle-3"><a href="#Puzzle-3" class="headerlink" title="Puzzle #3"></a>Puzzle #3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse())</span><br><span class="line">  .then(finalHandler);</span><br></pre></td></tr></table></figure><p>Answer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">doSomethingElse(<span class="literal">undefined</span>)</span><br><span class="line">|---------------------------------|</span><br><span class="line">                  finalHandler(resultOfDoSomething)</span><br><span class="line">                  |------------------|</span><br></pre></td></tr></table></figure><h3 id="Puzzle-4"><a href="#Puzzle-4" class="headerlink" title="Puzzle #4"></a>Puzzle #4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse)</span><br><span class="line">  .then(finalHandler);</span><br></pre></td></tr></table></figure><p>Answer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(resultOfDoSomething)</span><br><span class="line">                  |------------------|</span><br><span class="line">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class="line">                                     |------------------|</span><br></pre></td></tr></table></figure><p>如果这些答案仍然没有讲通，那么我鼓励重新阅读文章，或者去定义doSomething()以及doSomethingElse()然后在你的浏览器中自己尝试。</p><p>需要说明的是，在上述的例子中，我都假设doSomething()和doSomethingElse()返回一个promise对象，这些promise对象都代表了一个异步操作，这样的操作会在当前event loop之外结束，比如说有关IndexedDB，network的操作，或者是使用setTimeout。这里给出<a href="http://jsbin.com/tuqukakawo/1/edit?js,console,output" target="_blank" rel="noopener">JSBin上的示例</a>。</p><p>Promises更多的使用说明，请参考我的promise主要用法背忘单。 <a href="https://gist.github.com/nolanlawson/6ce81186421d2fa109a4" target="_blank" rel="noopener">promise protips cheat sheet</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.all is good for executing many promises at once</span></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  promise1,</span><br><span class="line">  promise2</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.resolve is good for wrapping synchronous code</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (somethingIsNotRight()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"I will be rejected asynchronously!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"This string will be resolved asynchronously!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute some promises one after the other.</span></span><br><span class="line"><span class="comment">// this takes an array of promise factories, i.e.</span></span><br><span class="line"><span class="comment">// an array of functions that RETURN a promise</span></span><br><span class="line"><span class="comment">// (not an array of promises themselves; those would execute immediately)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sequentialize</span>(<span class="params">promiseFactories</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> chain = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  promiseFactories.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promiseFactory</span>) </span>&#123;</span><br><span class="line">    chain = chain.then(promiseFactory);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.race is good for setting a timeout:</span></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(reject, <span class="number">10000</span>); <span class="comment">// timeout after 10 secs</span></span><br><span class="line">  &#125;),</span><br><span class="line">  doSomethingThatMayTakeAwhile()</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise finally util similar to Q.finally</span></span><br><span class="line"><span class="comment">// e.g. promise.then(...).catch().then(...).finally(...)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finally</span> (<span class="params">promise, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise2 = cb();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promise2.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> promise2.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise2 = cb();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promise2.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> promise2.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> reason;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> reason;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最后再说两句"><a href="#最后再说两句" class="headerlink" title="最后再说两句"></a>最后再说两句</h2><p>promise是个好东西。如果你还在使用传统的回调函数的话，我建议你迁移到promise上。这样你的代码会更简介，更优雅，可读性也更强。</p><p>有这样的观点：promise是不完美的。promise确实比使用回调函数好，但是，如果你有别的选择的话，这两种方式最好都不要用。</p><p>尽管相比回调函数有许多优点，promise仍然是难于理解的，并且使用起来很容易出错。新手和老鸟都会经常将promise用的乱七八糟。不过说真的，这不是他们的错，应该甩锅给promise。因为它和我们在同步环境的代码很像，但仅仅是像，是一个优雅的替代品。</p><p>在同步环境下，你无需学习这些令人费解的规则和一些新的API。你可以随意使用像return，catch，throw这样的关键字以及for循环。你不需要时刻在脑中保持两个相并列的编程思想。</p><p>等待async/await</p><p>笔者在了解了ES7中的async和await关键字，以及它们是如何将promise的思想融入到语言本身当中之后，写了这样一篇博文用ES7驯服异步这个猛兽。使用ES7，我们将没有必要再写catch()这样的伪同步的代码，我们将能使用try/catch/return这样的关键字，就像刚开始学计算机那样。</p><p>这对JavaScript这门语言来说是很好的，因为到头来，只要没有工具提醒我们，这些promise的反模式会持续出现。</p><p>从JavaScript发展历史中距离来说，笔者认为JSLint和JSHint对社区的贡献要大于JavaScript:The Good Parts，尽管它们实际上包含的信息是相同的。区别就在于使用工具可以告诉程序员代码中所犯的错误，而阅读却是让你了解别人犯的错误。</p><p>ES7中的async和await关键字的美妙之处在于，你代码中的错误将会成为语法错误或者是编译错误，而不是细微的运行时错误。到了那时，我们会完全掌握promise究竟能做什么，以及在ES5和ES6中如何合理的应用。</p><p>更新：已经有人跟我指出Bluebird 3.0能打印出警告来避免我在这篇文章中所鉴定的一些错误。所以在我们还在等待ES7的时候使用Bluebird是另一个很棒的选择。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="noopener">(英文原文)we-have-a-problem-with-promises</a></li><li><a href="http://web.jobbole.com/82601/" target="_blank" rel="noopener">(中文翻译)promises 很酷，但很多人并没有理解就在用了</a></li><li><a href="http://web.jobbole.com/82950/" target="_blank" rel="noopener">(中文翻译)谈谈使用promise时候的一些反模式</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git文件名大小写敏感</title>
      <link href="/2015/09/20/git%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/"/>
      <url>/2015/09/20/git%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>因为git文件名大小写产生的问题及设置<br><a id="more"></a></p><h2 id="git默认"><a href="#git默认" class="headerlink" title="git默认"></a>git默认</h2><p>git默认是不区分文件名的大小写,即:<br>第一次文件名为 A.js,<br>修改文件名为  a.js<br>git默认为未修改文件</p><h2 id="配置git识别大小写"><a href="#配置git识别大小写" class="headerlink" title="配置git识别大小写"></a>配置git识别大小写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.ignorecase false</span><br></pre></td></tr></table></figure><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p>在上面设置并commit文件之后, 使用 <code>git rebase -i HEAD~2</code>会提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the following untracked working tree files would be overwritten by checkout:</span><br></pre></td></tr></table></figure></p><p>解决办法:</p><ul><li>重新设置大小写<strong>不</strong>敏感,</li><li>再次执行<code>git rebase -i HEAD~2</code></li><li>设置大小写敏感</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://yijiebuyi.com/blog/e96eccc4e6f7168e0ce92fa9c79f0d23.html" target="_blank" rel="noopener">http://yijiebuyi.com/blog/e96eccc4e6f7168e0ce92fa9c79f0d23.html</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node命令行和控制台参数获取</title>
      <link href="/2015/09/19/node%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96/"/>
      <url>/2015/09/19/node%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>node命令行和控制台参数获取笔记<br><a id="more"></a></p><h2 id="命令行参数的原始写法"><a href="#命令行参数的原始写法" class="headerlink" title="命令行参数的原始写法"></a>命令行参数的原始写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span> = process.argv.splice(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>process是一个全局对象，argv返回的是一组包含命令行参数的数组。第一项为’node’，第二项为执行的js的完整路径，后面是附加在命令行后的参数</p></blockquote><h2 id="yargs-模块"><a href="#yargs-模块" class="headerlink" title="yargs 模块"></a>yargs 模块</h2><p><a href="https://github.com/bcoe/yargs" target="_blank" rel="noopener">https://github.com/bcoe/yargs</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">  .option(<span class="string">'n'</span>, &#123;</span><br><span class="line">    alias : <span class="string">'name'</span>,</span><br><span class="line">    demand: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'tom'</span>,</span><br><span class="line">    describe: <span class="string">'your name'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .argv;</span><br><span class="line"><span class="built_in">console</span>.log(argv.n);</span><br></pre></td></tr></table></figure><h2 id="commander-js-模块"><a href="#commander-js-模块" class="headerlink" title="commander.js 模块"></a>commander.js 模块</h2><p><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">https://github.com/tj/commander.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .version(<span class="string">'0.0.1'</span>)</span><br><span class="line">  .option(<span class="string">'-p, --peppers'</span>, <span class="string">'Add peppers'</span>)</span><br><span class="line">  .option(<span class="string">'-P, --pineapple'</span>, <span class="string">'Add pineapple'</span>)</span><br><span class="line">  .option(<span class="string">'-b, --bbq-sauce'</span>, <span class="string">'Add bbq sauce'</span>)</span><br><span class="line">  .option(<span class="string">'-c, --cheese [type]'</span>, <span class="string">'Add the specified type of cheese [marble]'</span>, <span class="string">'marble'</span>)</span><br><span class="line">  .parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'you ordered a pizza with:'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.peppers) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'  - peppers'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (program.pineapple) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'  - pineapple'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (program.bbqSauce) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'  - bbq'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'  - %s cheese'</span>, program.cheese);</span><br></pre></td></tr></table></figure><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">process.stdin.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> chunk = process.stdin.read();</span><br><span class="line">  <span class="keyword">if</span> (chunk !== <span class="literal">null</span>) &#123;</span><br><span class="line">    process.stdout.write(<span class="string">'data: '</span> + chunk);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.stdin.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.stdout.write(<span class="string">'end'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="可执行脚本"><a href="#可执行脚本" class="headerlink" title="可执行脚本"></a>可执行脚本</h2><ul><li>使用 JavaScript 语言,写一个可执行脚本hello</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure><ul><li>修改 hello 的权限</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">755</span> hello</span><br></pre></td></tr></table></figure><ul><li>执行脚本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure><ul><li>把 hello 前面的路径去除: 在当前目录下新建 <code>package.json</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hello"</span>,</span><br><span class="line">  <span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"hello"</span>: <span class="string">"hello"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行 <code>npm link</code> 命令</li><li>现在再执行 hello就不用输入路径了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html</a></li><li><a href="https://nodejs.org/api/process.html#process_process_stdin" target="_blank" rel="noopener">https://nodejs.org/api/process.html#process_process_stdin</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2</title>
      <link href="/2015/09/13/iTerm2/"/>
      <url>/2015/09/13/iTerm2/</url>
      
        <content type="html"><![CDATA[<p>iTerm2折腾笔记<br><a id="more"></a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.iterm2.com/" target="_blank" rel="noopener">https://www.iterm2.com/</a></p><h2 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h2><ul><li>保存ssh远程登录指令(1)</li><li>打开新窗口自动定位到使用tab键所在的目录(2)</li></ul><figure class="image-box">                <img src="/img/iterm2/3.png" alt="shang" title="" class="">                <p>shang</p>            </figure><ul><li>每次新打开终端都会固定出现在屏幕的顶端且不会有窗口边框</li></ul><figure class="image-box">                <img src="/img/iterm2/1.png" alt="shang" title="" class="">                <p>shang</p>            </figure><ul><li>背景透明度</li></ul><figure class="image-box">                <img src="/img/iterm2/2.png" alt="shang" title="" class="">                <p>shang</p>            </figure><ul><li>使用 <code>option</code> + ‘-&gt;’ 在单词间跳转</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 设置左 <span class="string">`option`</span></span><br><span class="line"><span class="number">2.</span> Keyboard Shortcut: ⌥←</span><br><span class="line">Action: Send Escape Sequence</span><br><span class="line">Esc+: b</span><br><span class="line"><span class="number">3.</span> Keyboard Shortcut: ⌥→</span><br><span class="line">Action: Send Escape Sequence</span><br><span class="line">Esc+: f</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="/img/iterm2/4.png" alt="shang" title="" class="">                <p>shang</p>            </figure><ul><li>全局快捷键<figure class="image-box">                <img src="/img/iterm2/7.png" alt="shang" title="" class="">                <p>shang</p>            </figure></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="标签页操作"><a href="#标签页操作" class="headerlink" title="标签页操作"></a>标签页操作</h3><ul><li>新建标签页: <code>Command + T</code></li><li>关闭标签页: <code>Command + W</code></li><li>窗口切换: <code>Command + 方向键  或   Command + 窗口编号</code></li></ul><h3 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h3><ul><li>垂直分割: <code>Command + D</code></li><li>水平分割: <code>Shift + Command + D</code></li><li>前一个面板: <code>Command + [</code></li><li>后一个面板: <code>Command + ]</code></li><li>切换到上/下/左/右面板: <code>Option + Command + 上下左右方向键</code></li></ul><h3 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h3><ul><li><p><code>⌘ + f</code>查找。支持正则。<br>其中查找的内容会被自动复制(鼠标去选中的内容也会自动复制,也可以鼠标中键直接粘贴)<br>键入搜索关键词，然后用<code>shift+tab</code>或者<code>tab</code>左右自动补全<br><code>option + enter</code> 则自动将搜索结果键入,并且复制到剪贴板</p></li><li><p><code>⌘ + opt + e</code> Expose标签</p></li></ul><figure class="image-box">                <img src="/img/iterm2/8.png" alt="shang" title="" class="">                <p>shang</p>            </figure><ul><li><p><code>Command + /</code>: 查看当前终端中光标的位置</p></li><li><p><code></code>⌘ + opt + b` :快照回放, 对你的操作根据时间轴进行回放. 可以拖动下方的时间轴，也可以按左右方向键</p></li><li><p><code>Command + shift + H</code> iterm2将自动列出剪切板的历史记录</p></li></ul><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul><li>进入和退出全屏: <code>Command + Enter</code></li><li>开启和关闭背景半透明: <code>Command + U</code></li><li>清屏（其实是滚到新的一屏，并没有清空）: <code>Command + R</code></li><li>清屏: <code>Ctrl+L</code></li><li>清空当前行，无论光标在什么位置: <code>ctrl + U</code></li><li>到行首: <code>ctrl + A  或 fn + 左方向键</code></li><li>到行末: <code>ctrl + E 或 fn + 右方向键</code></li><li>搜索命令历史: <code>ctrl + R</code></li><li>调整字体大小: <code>⌘ + —/+/0</code></li><li>命令自动补全: <code>Command + ;</code>（很少用这个)</li></ul><h2 id="文本选取"><a href="#文本选取" class="headerlink" title="文本选取"></a>文本选取</h2><ul><li>常见的点击并拖拽方式</li><li>双击选取整个单词</li><li>三击选取整行</li><li>选取某一部分，按住Shift，再点击某处，可以选取整个矩形内的文本（类似Windows下按住Shift可以批量选取图标）</li><li>按住Command + Option，可以用鼠标画出一个矩形，用类似截图的方式选取文本 另外，还可以使用鼠标完成以下操作： </li><li>按住Command然后点击某个URL，会在浏览器中打开这个URL，</li><li>点击某个文件夹，会在Finder里打开这个文件夹</li><li>点击某个文件名，会打开这个文件（文本文件支持MacVim，TextMate和BBEdit，如果后面跟随一个冒号和行号，文件会在行号处打开，其它格式的文件似乎不能调用默认程序打开） </li></ul><h2 id="标签变色"><a href="#标签变色" class="headerlink" title="标签变色"></a>标签变色</h2><blockquote><p>iTerm2 的标签的颜色会变化,以指示该 tab 当前的状态.当该标签有新输出的时候,<br>标签会变成洋红色;新的输出长时间没有查看,标签会变成红色.可在设置中关掉该功能</p></blockquote><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><p>自行研究 <a href="http://iterm2colorschemes.com/" target="_blank" rel="noopener">http://iterm2colorschemes.com/</a></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://coderwall.com/p/h6yfda/use-and-to-jump-forwards-backwards-words-in-iterm-2-on-os-x" target="_blank" rel="noopener">https://coderwall.com/p/h6yfda/use-and-to-jump-forwards-backwards-words-in-iterm-2-on-os-x</a></li><li><a href="http://pengjunjie.com/articles/mac-soft-iterm2/" target="_blank" rel="noopener">http://pengjunjie.com/articles/mac-soft-iterm2/</a></li><li><a href="http://wulfric.me/2015/08/iterm2/" target="_blank" rel="noopener">http://wulfric.me/2015/08/iterm2/</a></li><li><a href="http://www.wangyuxiong.com/archives/52137" target="_blank" rel="noopener">http://www.wangyuxiong.com/archives/52137</a></li><li><a href="http://xingrz.me/2013/2013-06-19/terminal-zhuangbility.html" target="_blank" rel="noopener">http://xingrz.me/2013/2013-06-19/terminal-zhuangbility.html</a></li></ul><hr><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]AngularJS中的Provider们：Service和Factory等的区别</title>
      <link href="/2015/08/30/%E8%BD%AC-AngularJS%E4%B8%AD%E7%9A%84Provider%E4%BB%AC%EF%BC%9AService%E5%92%8CFactory%E7%AD%89%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2015/08/30/%E8%BD%AC-AngularJS%E4%B8%AD%E7%9A%84Provider%E4%BB%AC%EF%BC%9AService%E5%92%8CFactory%E7%AD%89%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>AngularJS中的Provider们：Service和Factory等的区别<br><a id="more"></a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>看了很多文章可能还是不太说得出<code>AngularJS</code>中的几个创建供应商(<code>provider</code>)的方法(<code>factory(),service(),provider()</code>)到底有啥区别，啥时候该用啥，之前一直傻傻分不清楚，现在来总结一下。  </p><p>下文中泛指统一用中文，英文即为特指$provide方法中对应方法创建出的东东</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">供应商==&gt;泛指provider</span><br><span class="line">服务==&gt;泛指service</span><br><span class="line"></span><br><span class="line">provider==&gt;provider()方法创建的东东</span><br><span class="line">service==&gt;service()方法创建的东东</span><br></pre></td></tr></table></figure><h2 id="先说说供应商（-provide）"><a href="#先说说供应商（-provide）" class="headerlink" title="先说说供应商（$provide）"></a>先说说供应商（<code>$provide</code>）</h2><p><code>$provide</code>服务负责告诉Angular如何创造一个新的可注入的东西：即服务。服务会被叫做供应商的东西来定义，你可以使用<code>$provide</code>来创建一个供应商。你需要使用<code>$provide</code>中的<code>provider()</code>方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得<code>$provide</code>服务。</p><p>上面的描述是官方wiki的翻译版，如果有些绕的话，看下这张图：<br><figure class="image-box">                <img src="/img/provider/provider1.png" alt="" title="" class="">                <p></p>            </figure></p><ul><li><code>$provide</code>是一个服务，在<code>Auto</code>模块中</li><li>这个服务下面有好多方法，是用来定义供应商</li><li>而供应商是用来提供服务的，被注入来注入去的东西就是供应商们提供的服务了</li></ul><p>下面是一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myMod.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.provider(<span class="string">'greeting'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello, "</span> + name);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个例子可以说是最终形态，先大概看下</p><h2 id="定义供应商的方法们"><a href="#定义供应商的方法们" class="headerlink" title="定义供应商的方法们"></a>定义供应商的方法们</h2><p><code>AngularJS</code>用<code>$provide</code>去定义一个供应商,这个<code>$provide</code>有5个用来创建供应商的方法：</p><ul><li>constant</li><li>value</li><li>service</li><li>factory</li><li>provider</li><li>decorator 我没有说我也是，我只是路过o(╯□╰)o</li></ul><h3 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h3><p>定义常量用的，这货定义的值当然就不能被改变，它可以被注入到任何地方，但是不能被装饰器(<code>decorator</code>)装饰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.constant(<span class="string">'movieTitle'</span>, <span class="string">'The Matrix'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movieTitle</span>) </span>&#123;</span><br><span class="line">  expect(movieTitle).toEqual(<span class="string">'The Matrix'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>语法糖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.constant(<span class="string">'movieTitle'</span>, <span class="string">'The Matrix'</span>);</span><br></pre></td></tr></table></figure><h3 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h3><p>这货可以是<code>string,number</code>甚至<code>function</code>,它和<code>constant</code>的不同之处在于<br>它可以被修改，不能被注入到<code>config</code>中，但是它可以被<code>decorator</code>装饰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.value(<span class="string">'movieTitle'</span>, <span class="string">'The Matrix'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movieTitle</span>) </span>&#123;</span><br><span class="line">  expect(movieTitle).toEqual(<span class="string">'The Matrix'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>语法糖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.value(<span class="string">'movieTitle'</span>, <span class="string">'The Matrix'</span>);</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>它是一个可注入的构造器，在<code>AngularJS</code>中它是单例的，用它在<code>Controller</code>中通信或者共享数据都很合适</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span> ,[]);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.service(<span class="string">'movie'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="string">'The Matrix'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movie</span>) </span>&#123;</span><br><span class="line">  expect(movie.title).toEqual(<span class="string">'The Matrix'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>语法糖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.service(<span class="string">'movie'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = <span class="string">'The Matrix'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在service里面可以不用返回东西，因为AngularJS会调用new关键字来创建对象。但是返回一个自定义对象好像也不会出错。</p><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>它是一个可注入的<code>function</code>，它和<code>service</code>的区别就是：<code>factory</code>是普通<code>function</code>，而<code>service</code>是一个构造器(<code>constructor</code>)，这样<code>Angular</code>在调用<code>service</code>时会用<code>new</code>关键字，而调用<code>factory</code>时只是调用普通的<code>function</code>，所以<code>factory</code>可以返回任何东西，而<code>service</code>可以不返回(可查阅new关键字的作用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.factory(<span class="string">'movie'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'The Matrix'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movie</span>) </span>&#123;</span><br><span class="line">  expect(movie.title).toEqual(<span class="string">'The Matrix'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>语法糖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.factory(<span class="string">'movie'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title: <span class="string">'The Matrix'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>factory</code>可以返回任何东西，它实际上是一个只有<code>$get</code>方法的<code>provider</code></p><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p><code>provider</code>是他们的老大，上面的几乎(除了<code>constant</code>)都是<code>provider</code>的封装，<code>provider</code>必须有一个<code>$get</code>方法，当然也可以说<code>provider</code>是一个可配置的<code>factory</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line"> </span><br><span class="line">app.provider(<span class="string">'movie'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> version;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setVersion: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      version = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    $get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          title: <span class="string">'The Matrix'</span> + <span class="string">' '</span> + version</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">movieProvider</span>) </span>&#123;</span><br><span class="line">  movieProvider.setVersion(<span class="string">'Reloaded'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movie</span>) </span>&#123;</span><br><span class="line">  expect(movie.title).toEqual(<span class="string">'The Matrix Reloaded'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意这里<code>confi</code>g方法注入的是<code>movieProvider</code>，上面定义了一个供应商叫<code>movie</code>，但是注入到<code>config</code>中不能直接写<code>movie</code>，因为前文讲了注入的那个东西就是服务，是供应商提供出来的，而<code>config</code>中又只能注入供应商（两个例外是<code>$provide</code>和<code>$injector</code>），所以用驼峰命名法写成<code>movieProvider</code>，<code>Angular</code>就会帮你注入它的供应商。（更详细可参考文末官方wiki翻译版中的配置<code>provider</code>）</p><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>这个比较特殊，它不是<code>provider</code>,它是用来装饰其他<code>provider</code>的，而前面也说过，他不能装饰<code>Constant</code>，因为实际上<code>Constant</code>不是通过<code>provider()</code>方法创建的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line"> </span><br><span class="line">app.value(<span class="string">'movieTitle'</span>, <span class="string">'The Matrix'</span>);</span><br><span class="line"> </span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">  $provide.decorator(<span class="string">'movieTitle'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$delegate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $delegate + <span class="string">' - starring Keanu Reeves'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">movieTitle</span>) </span>&#123;</span><br><span class="line">  expect(movieTitle).toEqual(<span class="string">'The Matrix - starring Keanu Reeves'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>所有的供应商都只被实例化一次，也就说他们都是单例的</li><li>除了constant，所有的供应商都可以被装饰器(decorator)装饰</li><li>value就是一个简单的可注入的值</li><li>service是一个可注入的构造器</li><li>factory是一个可注入的方法</li><li>decorator可以修改或封装其他的供应商，当然除了constant</li><li>provider是一个可配置的factory</li></ul><p>最后来看一张对比图：</p><figure class="image-box">                <img src="/img/provider/provider2.png" alt="" title="" class="">                <p></p>            </figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://segmentfault.com/a/1190000003096933" target="_blank" rel="noopener">(转载自)http://segmentfault.com/a/1190000003096933</a></li><li><a href="http://blog.xebia.com/2013/09/01/differences-between-providers-in-angularjs/" target="_blank" rel="noopener">Differences Between Providers in AngularJS</a></li><li><a href="https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection" target="_blank" rel="noopener">官方wiki：Understanding Dependency Injection</a></li><li><a href="http://www.html-js.com/article/1980" target="_blank" rel="noopener">官方wiki翻译版：理解依赖注入</a></li><li><a href="http://my.oschina.net/tommyfok/blog/299231" target="_blank" rel="noopener">AngularJS中的Provider</a></li><li><a href="http://hellobug.github.io/blog/angularjs-providers/" target="_blank" rel="noopener">伤不起的provider们</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]MongoDB命令行操作</title>
      <link href="/2015/08/18/%E8%BD%AC-MongoDB%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/2015/08/18/%E8%BD%AC-MongoDB%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>MongoDB命令行操作<br><a id="more"></a></p><p>2.1 查看服务器上的数据库  </p><blockquote><p>show dbs  </p></blockquote><p>2.2 切换数据库<br>切换到temp数据库(从默认的test数据库)  </p><blockquote><p>use temp  </p></blockquote><p>2.3 查看当前数据库中的所有集合  </p><blockquote><p>show collections  </p></blockquote><p>2.4 创建数据库  </p><p><strong>mongo中创建数据库采用的也是use命令，如果use后面跟的数据库名不存在，那么mongo将会新建该数据库。不过，实际上只执行use命令后，mongo是不会新建该数据库的，直到你像该数据库中插入了数据</strong></p><blockquote><p>use test2 </p></blockquote><p><code>switched to db test2</code></p><blockquote><p>show dbs  </p></blockquote><p><code>到这里并没有看到刚才新建的test2数据库</code></p><blockquote><p>db.hello.insert({“name”:”testdb”})</p></blockquote><p><code>该操作会在test2数据库中新建一个hello集合，并在其中插入一条记录。</code></p><blockquote><p>show dbs </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test    (empty)  </span><br><span class="line">test2   <span class="number">0.203125</span>GB</span><br></pre></td></tr></table></figure><blockquote><p>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello  </span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><p><code>这样，便可以看到mongo的确创建了test2数据库，其中有一个hello集合。</code> </p><p>2.5 删除数据库  </p><blockquote><p>db.dropDatabase()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"dropped"</span> : <span class="string">"test2"</span>, <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>2.6 查看当前数据库  </p><blockquote><p>db   </p></blockquote><p><code>test2</code><br><code>可以看出删除test2数据库之后，当前的db还是指向它，只有当切换数据库之后，test2才会彻底消失</code> </p><p>3.1 新建collection  </p><blockquote><p>db.createCollection(“Hello”)  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello  </span><br><span class="line">system.indexes  </span><br><span class="line">从上面<span class="number">2.4</span>也可以看出，直接向一个不存在的collection中插入数据也能创建一个collection。</span><br></pre></td></tr></table></figure><blockquote><p>db.hello2.insert({“name”:”lfqy”})<br>show collections   </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello  </span><br><span class="line">hello2  </span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><p>3.2 删除collection  </p><blockquote><p>db.Hello.drop()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>  </span><br><span class="line">返回<span class="literal">true</span>说明删除成功，<span class="literal">false</span>说明没有删除成功。</span><br></pre></td></tr></table></figure><blockquote><p>db.hello.drop()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>  </span><br><span class="line">不存在名为hello的collection，因此，删除失败。</span><br></pre></td></tr></table></figure><p>3.3 重命名collection  </p><p><code>将hello2集合重命名为HELLO</code></p><blockquote><p>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello2  </span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><blockquote><p>db.hello2.renameCollection(“HELLO”)  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HELLO  </span><br><span class="line">system.indexes</span><br></pre></td></tr></table></figure><p>3.4 查看当前数据库中的所有collection </p><blockquote><p>show collections  </p></blockquote><p>3.5 索引操作<br><code>在HELLO集合上，建立对ID字段的索引，1代表升序</code></p><blockquote><p>db.HELLO.ensureIndex({ID:1})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在HELLO集合上，建立对ID字段、Name字段和Gender字段建立索引</span><br></pre></td></tr></table></figure><blockquote><p>db.HELLO.ensureIndex({ID:1,Name:1,Gender:-1})<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看HELLO集合上的所有索引</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>db.HELLO.getIndexes()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除索引用db.collection.dropIndex()，有一个参数，可以是建立索引时指定的字段，也可以是getIndex看到的索引名称。</span><br></pre></td></tr></table></figure><blockquote><p>db.HELLO.dropIndex( “IDIdx” )<br>db.HELLO.dropIndex({ID:1})  </p></blockquote><p>3.6 为集合中的每一条记录添加一个字段<br><code>为user集合中的每一条记录添加一个名为ex的字段，并赋值为barrymore</code></p><blockquote><p>db.user.update({},{$set:{“ex”:”barrymore”}},false,true)  </p></blockquote><p>3.7 重命名字段<br><code>将集合中的所有记录的gender字段的名字修改为sex</code></p><blockquote><p>db.user.update({},{$rename:{“gender”:”sex”}},false,true)  </p></blockquote><p>3.8 删除字段<br><code>删除集合中所有记录的ex字段</code></p><blockquote><p>db.user.update({},{“$unset”:{“ex”:1}},false,true)  </p></blockquote><p>4.1 向user集合中插入两条记录  </p><blockquote><p>db.user.insert({‘name’:’Gal Gadot’,’gender’:’female’,’age’:28,’salary’:11000})<br>db.user.insert({‘name’:’Mikie Hara’,’gender’:’female’,’age’:26,’salary’:7000})  </p></blockquote><p>4.2 同样也可以用save完成类似的插入操作  </p><blockquote><p>db.user.save({‘name’:’Wentworth Earl Miller’,’gender’:’male’,’age’:41,’salary’:33000})</p></blockquote><p>5.1 查找集合中的所有记录</p><blockquote><p>db.user.find()  </p></blockquote><p>5.2 查找集合中的符合条件的记录</p><p>5.2.1 单一条件<br>5.2.1.1 Exact Equal:<br><code>查询age为了23的数据</code></p><blockquote><p>db.user.find({“age”:23})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;</span><br></pre></td></tr></table></figure><p>5.2.1.2 Great Than:  </p><p><code>查询salary大于5000的数据</code></p><blockquote><p>db.user.find({salary:{$gt:5000}})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5.2.1.3 Fuzzy Match  </span></span><br><span class="line"><span class="string">`</span>查询name中包含<span class="string">'a'</span>的数据<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; db.user.find(&#123;name:/a/&#125;)  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br></pre></td></tr></table></figure><p><code>查询name以G打头的数据</code></p><blockquote><p>db.user.find({name:/^G/})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br></pre></td></tr></table></figure><p>5.2.2 多条件”与”<br><code>查询age小于30，salary大于6000的数据</code></p><blockquote><p>db.user.find({age:{$lt:30},salary:{$gt:6000}})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br></pre></td></tr></table></figure><p>5.2.3 多条件”或”<br><code>查询age小于25，或者salary大于10000的记录</code></p><blockquote><p>db.user.find({$or:[{salary:{$gt:10000}},{age:{$lt:25}}]})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br></pre></td></tr></table></figure><p>5.2.4不等于查询<br><code>查询年龄不等于23的记录(这里返回结果中，会包含没有年龄字段的记录)</code></p><blockquote><p>db.user.find({“age”:{ $ne: 23}})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11050</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7050</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"524562d681c83a5bf26fc286"</span>), <span class="string">"gender"</span> : <span class="string">"female1"</span>, <span class="string">"salary"</span> : <span class="number">50</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"524563e881c83a5bf26fc287"</span>), <span class="string">"gender"</span> : <span class="string">"x"</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245648081c83a5bf26fc288"</span>), <span class="string">"gender"</span> : <span class="string">"x"</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245648e81c83a5bf26fc289"</span>), <span class="string">"age"</span> : <span class="string">"x"</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"524564c181c83a5bf26fc28a"</span>), <span class="string">"age"</span> : <span class="string">"x"</span>, <span class="string">"gender"</span> : <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><p>5.2.5 利用正则表达式的查询<br><code>查询名字中含有字母E的记录(i表示忽略大小写)</code></p><blockquote><p>db.user.find({name:/E/i})  </p></blockquote><p><code>也可以用：</code>  </p><blockquote><p>db.user.find({name:{$regex:’E’,$options:’i’}})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"salary"</span> : <span class="number">7050</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br></pre></td></tr></table></figure><p><code>查询名字中含有字母E的记录(默认区分大小写)</code></p><blockquote><p>db.user.find({name:/E/})  </p></blockquote><p><code>等价于：</code>  </p><blockquote><p>db.user.find({name:{$regex:’E’}})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br></pre></td></tr></table></figure><p><code>查询某个字段以“.0”结尾的记录</code></p><blockquote><p>db.user.find(name:/.0$/)  </p></blockquote><p><strong>这里的”//“中的内容表示是正则表达式，”.”需要转义，”$”符号表示结尾</strong></p><p>5.3 查找符合条件的第一条记录</p><blockquote><p>db.user.findOne({$or:[{salary:{$gt:10000}},<br>{age:{$lt:25}}]})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"lfqy"</span>,  </span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"male"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">23</span>,  </span><br><span class="line">    <span class="string">"salary"</span> : <span class="number">15</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.4 查询记录的指定字段</p><p><code>查询user集合中所有记录的name,age,salary,sex_orientation字段</code></p><blockquote><p>db.user.find({},{name:1,age:1,salary:1,sex_orientation:true})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里的1表示显示此列的意思，也可以用true表示。<br>可以看到，默认_id，字段都是显示的。如果要其不显示，只需将其显示指定为false:</strong></p><blockquote><p>db.user.find({},{name:1,age:1,salary:1,sex_orientation:true,_id:false})  </p></blockquote><p>5.5 查询指定字段的数据，并去重</p><p><code>查询gender字段的数据，并去掉重复数据</code></p><blockquote><p>db.user.distinct(‘gender’)  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">"male"</span>, <span class="string">"female"</span> ]</span><br></pre></td></tr></table></figure><p>5.6 对查询结果集的操作</p><p>5.6.1 pretty print  </p><p><code>为了方便，mongo也提供了pretty print工具db.collection.pretty()或者是db.collection.forEach(printjson)</code></p><blockquote><p>db.user.find().pretty()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"lfqy"</span>,  </span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"male"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">23</span>,  </span><br><span class="line">    <span class="string">"salary"</span> : <span class="number">15</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>,  </span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"female"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">28</span>,  </span><br><span class="line">    <span class="string">"salary"</span> : <span class="number">11000</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>,  </span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"female"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">26</span>,  </span><br><span class="line">    <span class="string">"salary"</span> : <span class="number">7000</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>,  </span><br><span class="line">    <span class="string">"gender"</span> : <span class="string">"male"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">41</span>,  </span><br><span class="line">    <span class="string">"salary"</span> : <span class="number">33000</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>),  </span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"not known"</span>,  </span><br><span class="line">    <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>,  </span><br><span class="line">    <span class="string">"age"</span> : <span class="number">13</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.6.2 指定结果集显示的条目<br>5.6.2.1 显示结果集中的前3条记录  </p><blockquote><p>db.user.find().limit(3)  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br></pre></td></tr></table></figure><p>5.6.2.2 查询第1条以后的所有数据  </p><blockquote><p>db.user.find().skip(1)  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br></pre></td></tr></table></figure><p>5.6.2.3 对结果集排序<br><code>升序</code></p><blockquote><p>db.user.find().sort({salary:1})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br></pre></td></tr></table></figure><p><code>降序</code></p><blockquote><p>db.user.find().sort({salary:-1})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52442736d8947fb501000001"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">15</span> &#125;</span><br></pre></td></tr></table></figure><p><code>也可以将排序依据的字段，写在一个list里面，如下：</code></p><blockquote><p>db.user.find().sort([(“salary”,1),(“name”,-1)]) </p></blockquote><p>5.7 统计查询结果中记录的条数</p><p>5.7.1 统计集合中的所有记录条数  </p><blockquote><p>db.user.find().count()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>5.7.2 查询符合条件的记录数  </p><p><code>查询salary小于4000或大于10000的记录数</code></p><blockquote><p>db.user.find({$or: [{salary: {$lt:4000}}, {salary: {$gt:10000}}]}).count()  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>5.8 查询存在(或不存在)指定字段的记录</p><p><code>查询不存在age字段，但是有gender字段，并且ex为barrymore的记录</code></p><blockquote><p>db.user.find({“age”:{$exists:false},”gender”:{$exists:true},”ex”:”barrymore”})  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"524562d681c83a5bf26fc286"</span>), <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"female1"</span>, <span class="string">"salary"</span> : <span class="number">50</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"524563e881c83a5bf26fc287"</span>), <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"x"</span> &#125;  </span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245648081c83a5bf26fc288"</span>), <span class="string">"ex"</span> : <span class="string">"barrymore"</span>, <span class="string">"gender"</span> : <span class="string">"x"</span> &#125;</span><br></pre></td></tr></table></figure><p>6.1 删除整个集合中的所有数据</p><blockquote><p>db.test.insert({name:”asdf”})<br>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book  </span><br><span class="line">system.indexes  </span><br><span class="line">test  </span><br><span class="line">user</span><br></pre></td></tr></table></figure><p><code>到这里新建了一个集合，名为test。</code><br><code>删除test中的所有记录。</code></p><blockquote><p>db.test.remove()<br>show collections  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book  </span><br><span class="line">system.indexes  </span><br><span class="line">test  </span><br><span class="line">user</span><br></pre></td></tr></table></figure><blockquote><p>db.test.find()</p></blockquote><p><code>可见test中的记录全部被删除</code></p><p><strong>注意db.collection.remove()和drop()的区别，remove()只是删除了集合中所有的记录，而集合中原有的索引等信息还在，而drop()则把集合相关信息整个删除(包括索引)</strong></p><p>6.2 删除集合中符合条件的所有记录</p><blockquote><p>db.user.remove({name:’lfqy’})</p></blockquote><blockquote><p>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.find()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455cc825e437dfea8fd4f8"</span>), <span class="string">"name"</span> : <span class="string">"2"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455d8a25e437dfea8fd4fa"</span>), <span class="string">"name"</span> : <span class="string">"1"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>db.user.remove( {salary :{$lt:10}})<br>db.user.find()</p></blockquote><figure class="highlight plain"><figcaption><span>"_id" : ObjectId("52453cfb25e437dfea8fd4f4"), "name" : "Gal Gadot", "gender" : "female", "age" : 28, "salary" : 11000 &#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;52453d8525e437dfea8fd4f5&quot;), &quot;name&quot; : &quot;Mikie Hara&quot;, &quot;gender&quot; : &quot;female&quot;, &quot;age&quot; : 26, &quot;salary&quot; : 7000 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;52453e2125e437dfea8fd4f6&quot;), &quot;name&quot; : &quot;Wentworth Earl Miller&quot;, &quot;gender&quot; : &quot;male&quot;, &quot;age&quot; : 41, &quot;salary&quot; : 33000 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;52454155d8947fb70d000000&quot;), &quot;name&quot; : &quot;not known&quot;, &quot;sex_orientation&quot; : &quot;male&quot;, &quot;age&quot; : 13, &quot;salary&quot; : 30000 &#125;</span><br></pre></td></tr></table></figure><p>6.3  删除集合中符合条件的一条记录</p><blockquote><p>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455de325e437dfea8fd4fb"</span>), <span class="string">"name"</span> : <span class="string">"1"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455de925e437dfea8fd4fc"</span>), <span class="string">"name"</span> : <span class="string">"2"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.remove({salary :{$lt:10}},1)<br>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455de925e437dfea8fd4fc"</span>), <span class="string">"name"</span> : <span class="string">"2"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p><code>当然，也可以是db.user.remove({salary :{$lt:10}},true)</code></p><p>7 更新操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(查询条件, </span><br><span class="line">更新内容,</span><br><span class="line">[默认是<span class="literal">false</span>，不存在update的记录,不插入,<span class="literal">true</span>为插入], </span><br><span class="line">[默认<span class="literal">false</span>,只更新找到的第一条记录，如果这个参数为<span class="literal">true</span>,就把按条件查出来多条记录全部更新。] )</span><br></pre></td></tr></table></figure></p><p>7.1 赋值更新</p><blockquote><p>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.update({name:’lfqy’},{$set:{age:23}},false,true)<br>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br><span class="line">db.user.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.update({name:’lfqy1’},{$set:{age:23}},true,true)<br>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245610881c83a5bf26fc285"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"name"</span> : <span class="string">"lfqy1"</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.update({name:’lfqy’},{$set:{interest:”NBA”}},false,true)<br>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245610881c83a5bf26fc285"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"name"</span> : <span class="string">"lfqy1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>7.2 增值更新</p><blockquote><p>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245610881c83a5bf26fc285"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"name"</span> : <span class="string">"lfqy1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>db.user.update({gender:’female’},{$inc:{salary:50}},false,true)<br>db.user.find()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453cfb25e437dfea8fd4f4"</span>), <span class="string">"name"</span> : <span class="string">"Gal Gadot"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">28</span>, <span class="string">"salary"</span> : <span class="number">11050</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453d8525e437dfea8fd4f5"</span>), <span class="string">"name"</span> : <span class="string">"Mikie Hara"</span>, <span class="string">"gender"</span> : <span class="string">"female"</span>, <span class="string">"age"</span> : <span class="number">26</span>, <span class="string">"salary"</span> : <span class="number">7050</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52453e2125e437dfea8fd4f6"</span>), <span class="string">"name"</span> : <span class="string">"Wentworth Earl Miller"</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">41</span>, <span class="string">"salary"</span> : <span class="number">33000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52454155d8947fb70d000000"</span>), <span class="string">"name"</span> : <span class="string">"not known"</span>, <span class="string">"sex_orientation"</span> : <span class="string">"male"</span>, <span class="string">"age"</span> : <span class="number">13</span>, <span class="string">"salary"</span> : <span class="number">30000</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245610881c83a5bf26fc285"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"name"</span> : <span class="string">"lfqy1"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"52455f8925e437dfea8fd4fd"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5245607525e437dfea8fd4fe"</span>), <span class="string">"age"</span> : <span class="number">23</span>, <span class="string">"gender"</span> : <span class="string">"male"</span>, <span class="string">"interest"</span> : <span class="string">"NBA"</span>, <span class="string">"name"</span> : <span class="string">"lfqy"</span>, <span class="string">"salary"</span> : <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>关于更新操作（db.collection.update(criteria, objNew, upsert, multi )），要说明的是，如果upsert为true，那么在没有找到符合更新条件的情况下，mongo会在集合中插入一条记录其值满足更新条件的记录(其中的字段只有更新条件中涉及的字段，字段的值满足更新条件)，然后将其更新（注意，如果更新条件是$lt这种不等式条件，那么upsert插入的记录只会包含更新操作涉及的字段，而不会有更新条件中的字段。这也很好理解，因为没法为这种字段定值，mongo索性就不取这些字段）。如果符合条件的记录中没有要更新的字段，那么mongo会为其创建该字段，并更新。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://blog.csdn.net/xia7139/article/details/12570569" target="_blank" rel="noopener">http://blog.csdn.net/xia7139/article/details/12570569</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在sails中使用gulp代替grunt个人总结</title>
      <link href="/2015/08/16/%E5%9C%A8sails%E4%B8%AD%E4%BD%BF%E7%94%A8gulp%E4%BB%A3%E6%9B%BFgrunt%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2015/08/16/%E5%9C%A8sails%E4%B8%AD%E4%BD%BF%E7%94%A8gulp%E4%BB%A3%E6%9B%BFgrunt%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>grunt的速度太慢,尝试使用gulp替换grunt的使用记录<br><a id="more"></a></p><h1 id="在sails中使用gulp代替grunt"><a href="#在sails中使用gulp代替grunt" class="headerlink" title="在sails中使用gulp代替grunt"></a>在sails中使用gulp代替grunt</h1><h2 id="现成的依赖包-https-github-com-Karnith-sails-generate-new-gulp"><a href="#现成的依赖包-https-github-com-Karnith-sails-generate-new-gulp" class="headerlink" title="现成的依赖包: https://github.com/Karnith/sails-generate-new-gulp"></a>现成的依赖包: <a href="https://github.com/Karnith/sails-generate-new-gulp" target="_blank" rel="noopener">https://github.com/Karnith/sails-generate-new-gulp</a></h2><ul><li>首先安装依赖项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sails-generate-backend-gulp</span><br><span class="line">npm install -g sails-generate-gulpfile</span><br><span class="line">npm install -g sails-generate-frontend-gulp</span><br><span class="line">npm install -g sails-generate-new-gulp</span><br></pre></td></tr></table></figure><ul><li>在工作目录下添加文件 <code>.sailsrc</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;generators&quot;: &#123;</span><br><span class="line">        &quot;modules&quot;: &#123;</span><br><span class="line">            &quot;new&quot;: &quot;sails-generate-new-gulp&quot;,</span><br><span class="line">            &quot;frontend&quot;: &quot;sails-generate-frontend-gulp&quot;,</span><br><span class="line">            &quot;backend&quot;: &quot;sails-generate-backend-gulp&quot;,</span><br><span class="line">            &quot;gulpfile&quot;: &quot;sails-generate-gulpfile&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在上面的工作目录下创建一个基于gulp的sails项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sails new &lt;project name&gt;</span><br></pre></td></tr></table></figure><p><strong>比原来的sails_grunt项目,多出了文件 <code>api/hooks/gulp/index.js</code>(用于 sails lift时使用gulp作为默认),修改了 <code>.sailsrc</code> 和 <code>package.json</code></strong></p><h2 id="我的一些修改和添加"><a href="#我的一些修改和添加" class="headerlink" title="我的一些修改和添加"></a>我的一些修改和添加</h2><h3 id="使用-del-来删除文件-文件夹"><a href="#使用-del-来删除文件-文件夹" class="headerlink" title="使用 del 来删除文件/文件夹"></a>使用 <code>del</code> 来删除文件/文件夹</h3><p><code>npm install --save-dev del</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 tasks/config 下 修改 clean.js文件</span></span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">gulp, plugins, growl</span>) </span>&#123;</span><br><span class="line">  gulp.task(<span class="string">'clean:dev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'.tmp/public/**/*'</span>], cb);     <span class="comment">// 改成你的路径</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'clean:build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'deployment/**/*'</span>], cb);     <span class="comment">// 改成你的路径</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="html2js"><a href="#html2js" class="headerlink" title="html2js"></a>html2js</h3><p><code>npm install --save-dev gulp-html2js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 tasks/config 下 新建 html2js.js文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">gulp, plugins, growl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'html2jsfrontend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'assets/frontend/**/*.html'</span>])  <span class="comment">// 路径需要修改</span></span><br><span class="line">      .pipe(plugins.html2js(&#123;</span><br><span class="line">        outputModuleName: <span class="string">'Frontend'</span>,               <span class="comment">// 需要修改</span></span><br><span class="line">        base: <span class="string">'assets/'</span>,</span><br><span class="line">        useStrict: <span class="literal">true</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(plugins.concat(<span class="string">'template-frontend.js'</span>))  <span class="comment">// 生成的文件名</span></span><br><span class="line">      .pipe(gulp.dest(<span class="string">'.tmp/public/frontend/'</span>));     <span class="comment">// dest的目录</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'html2jsapp'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'assets/app/**/*.html'</span>])       <span class="comment">// 路径需要修改</span></span><br><span class="line">      .pipe(plugins.html2js(&#123;</span><br><span class="line">        outputModuleName: <span class="string">'App'</span>,            <span class="comment">// 需要修改</span></span><br><span class="line">        base: <span class="string">'assets/'</span>,</span><br><span class="line">        useStrict: <span class="literal">true</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(plugins.concat(<span class="string">'template-app.js'</span>))</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'.tmp/public/app'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'html2js'</span>, [<span class="string">'html2jsfrontend'</span>, <span class="string">'html2jsapp'</span>]);  <span class="comment">// 之所以这样写,是因为gulp正确的实现异步：接收一个回调函数或者返回一个 promise 对象或者事件流（event stream）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="添加jshint"><a href="#添加jshint" class="headerlink" title="添加jshint"></a>添加jshint</h3><p><code>npm install --save-dev map-stream gulp-jshint</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 tasks/config 下 新建 jshint.js文件</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">require</span>(<span class="string">'map-stream'</span>),</span><br><span class="line">  events = <span class="built_in">require</span>(<span class="string">'events'</span>),</span><br><span class="line">  emmitter = <span class="keyword">new</span> events.EventEmitter(),</span><br><span class="line">  path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsHintErrorReporter = <span class="function"><span class="keyword">function</span>(<span class="params">file, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> map(<span class="function"><span class="keyword">function</span>(<span class="params">file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!file.jshint.success) &#123;</span><br><span class="line">      file.jshint.results.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err);</span><br><span class="line">          <span class="comment">// Error message</span></span><br><span class="line">          <span class="keyword">var</span> msg = [</span><br><span class="line">            path.basename(file.path),</span><br><span class="line">            <span class="string">'Line: '</span> + err.error.line,</span><br><span class="line">            <span class="string">'Reason: '</span> + err.error.reason</span><br><span class="line">          ];</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Emit this error event</span></span><br><span class="line">          emmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(msg.join(<span class="string">'\n'</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cb(<span class="literal">null</span>, file);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">gulp, plugins, growl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([</span><br><span class="line">        <span class="string">'api/controllers/*.js'</span>,</span><br><span class="line">        <span class="string">'api/services/**/*.js'</span>,</span><br><span class="line">        <span class="string">'api/policies/*.js'</span>,</span><br><span class="line">        <span class="string">'api/models/*.js'</span></span><br><span class="line">      ])</span><br><span class="line">      .pipe(plugins.jshint(<span class="string">'.jshintrc_api'</span>, &#123;</span><br><span class="line">        fail: <span class="literal">true</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(plugins.jshint.reporter(<span class="string">'default'</span>)) <span class="comment">// Console output</span></span><br><span class="line">      .pipe(jsHintErrorReporter()) <span class="comment">// If error pop up a notify alert</span></span><br><span class="line">      .on(<span class="string">'error'</span>, plugins.notify.onError(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error.message;</span><br><span class="line">      &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'assets'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'改成你的路径!!'</span>])              <span class="comment">// 改成你的路径</span></span><br><span class="line">      .pipe(plugins.jshint(<span class="string">'.jshintrc'</span>, &#123;</span><br><span class="line">        fail: <span class="literal">true</span></span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(plugins.jshint.reporter(<span class="string">'default'</span>)) <span class="comment">// Console output</span></span><br><span class="line">      .pipe(jsHintErrorReporter()) <span class="comment">// If error pop up a notify alert</span></span><br><span class="line">      .on(<span class="string">'error'</span>, plugins.notify.onError(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error.message;</span><br><span class="line">      &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'jshint'</span>, [<span class="string">'api'</span>, <span class="string">'assets'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="添加-ng-annotate"><a href="#添加-ng-annotate" class="headerlink" title="添加 ng-annotate"></a>添加 <code>ng-annotate</code></h3><p><code>npm install --save-dev gulp-ng-annotate</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 tasks/config 下 新建ng-annotate.js文件</span></span><br><span class="line"><span class="keyword">var</span> ngAnnotate = <span class="built_in">require</span>(<span class="string">'gulp-ng-annotate'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">gulp, plugins, growl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'ngAnnotateapp'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'app/**/*.js'</span>, <span class="string">'*.js'</span>], &#123;</span><br><span class="line">        cwd: <span class="string">'.tmp/public'</span>,</span><br><span class="line">        base: <span class="string">'.tmp/public'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(ngAnnotate())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'.tmp/public'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'ngAnnotatefrontend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'frontend/**/*.js'</span>, <span class="string">'*.js'</span>], &#123;</span><br><span class="line">        cwd: <span class="string">'.tmp/public'</span>,</span><br><span class="line">        base: <span class="string">'.tmp/public'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .pipe(ngAnnotate())</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'.tmp/public'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.task(<span class="string">'ngAnnotate'</span>, [<span class="string">'ngAnnotateapp'</span>, <span class="string">'ngAnnotatefrontend'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="修改-sails-linker-gulp-js"><a href="#修改-sails-linker-gulp-js" class="headerlink" title="修改 sails-linker-gulp.js"></a>修改 <code>sails-linker-gulp.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 tasks/config 下 修改 sails-linker-gulp.js文件</span></span><br><span class="line"><span class="comment">// 直接仿写原来的即可</span></span><br></pre></td></tr></table></figure><h3 id="修改-api-register-下文件-以注册上面添加的内容"><a href="#修改-api-register-下文件-以注册上面添加的内容" class="headerlink" title="修改 api/register 下文件,以注册上面添加的内容"></a>修改 <code>api/register</code> 下文件,以注册上面添加的内容</h3><p><code>buildProd.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">gulp, plugins</span>) </span>&#123;</span><br><span class="line">  gulp.task(<span class="string">'buildProd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    plugins.sequence(</span><br><span class="line">      <span class="string">'compileAssets'</span>,</span><br><span class="line">      <span class="string">'ngAnnotate'</span>,                        <span class="comment">// 添加 ngAnnotate</span></span><br><span class="line">      <span class="string">'concat:js'</span>,</span><br><span class="line">      <span class="string">'concat:css'</span>,</span><br><span class="line">      <span class="string">'uglify:dist'</span>,</span><br><span class="line">      <span class="string">'cssmin:dist'</span>,</span><br><span class="line">      <span class="string">'linkAssetsBuildProd'</span>,</span><br><span class="line">      <span class="string">'clean:build'</span>,</span><br><span class="line">      <span class="string">'copy:build'</span>,</span><br><span class="line">      cb</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>compileAssets.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">gulp, plugins</span>) </span>&#123;</span><br><span class="line">gulp.task(<span class="string">'compileAssets'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">plugins.sequence(</span><br><span class="line"><span class="string">'clean:dev'</span>,</span><br><span class="line"><span class="string">'jshint'</span>,                              <span class="comment">// 添加jshint</span></span><br><span class="line"><span class="string">'jst:dev'</span>,</span><br><span class="line"><span class="string">'less:dev'</span>,</span><br><span class="line"><span class="string">'sync:dev'</span>,</span><br><span class="line"><span class="string">'copy:dev'</span>,</span><br><span class="line"><span class="string">'coffee:dev'</span>,</span><br><span class="line"><span class="string">'html2js'</span>,       <span class="comment">// 添加html2js</span></span><br><span class="line">cb</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="一些个人见解"><a href="#一些个人见解" class="headerlink" title="一些个人见解"></a>一些个人见解</h2><h3 id="使用-grunt-而不是-gulp"><a href="#使用-grunt-而不是-gulp" class="headerlink" title="使用 grunt 而不是 gulp"></a>使用 grunt 而不是 gulp</h3><ul><li>grunt基于配置, 所以项目变化,修改的tasks 不多, gulp是 ‘将配置写入代码’, 所以项目切换,修改文件很多  </li></ul><blockquote><p>15/08/24 update:<br>gulp 也可以基于配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./tasks/config.js'</span>);</span><br><span class="line"></span><br><span class="line">gulp</span><br><span class="line">  .src(config.less.src, config.less.opt)</span><br><span class="line">  .pipe(less(&#123;</span><br><span class="line">    expand: <span class="literal">true</span>,</span><br><span class="line">    ext: <span class="string">'.css'</span></span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(config.less.dest));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'less'</span>: &#123;</span><br><span class="line">    <span class="string">'src'</span>: [</span><br><span class="line">      <span class="string">'styles/**/*.less'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'opt'</span>: &#123;</span><br><span class="line">      <span class="string">'cwd'</span>: <span class="string">'static'</span>,</span><br><span class="line">      <span class="string">'base'</span>: <span class="string">'static'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'dest'</span>: <span class="string">'sites/public'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>grunt进行大项目的jshint比gulp快的多, 所以如果需要jshint,并且文件很多,建议不要切换</li><li>grunt的uglify比gulp得uglify快的多得多,所以项目越大,建议不要切换</li><li>不想折腾,直接官方的上</li></ul><h3 id="使用-gulp-而不是-grunt"><a href="#使用-gulp-而不是-grunt" class="headerlink" title="使用 gulp 而不是 grunt"></a>使用 gulp 而不是 grunt</h3><ul><li>无法忍受 grunt 慢(每次修改前端文件,都要刷新2遍才有效果)</li><li>jshint单独处理或者在开发时不使用jshint</li><li>小项目,而不是文件数目很多的大项目有</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/Karnith/sails-generate-new-gulp" target="_blank" rel="noopener">https://github.com/Karnith/sails-generate-new-gulp</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> sails </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7月angular使用笔记</title>
      <link href="/2015/08/02/7%E6%9C%88angular%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/08/02/7%E6%9C%88angular%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>7月使用angular总结,包括一些库/规范/代码记录<br><a id="more"></a></p><h1 id="angular使用笔记"><a href="#angular使用笔记" class="headerlink" title="angular使用笔记"></a>angular使用笔记</h1><h2 id="一些库的使用"><a href="#一些库的使用" class="headerlink" title="一些库的使用"></a>一些库的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;XXXXX&apos;, [</span><br><span class="line">  &apos;ngResource&apos;,// restful请求的封装</span><br><span class="line">  &apos;ui.router&apos;,// 基于状态导航</span><br><span class="line">  &apos;ui.bootstrap&apos;// bootstrap 的 angular版</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><h2 id="一些规范"><a href="#一些规范" class="headerlink" title="一些规范"></a>一些规范</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app    </span><br><span class="line">├── components   // 写一些公共用的模板,方法</span><br><span class="line">│    ├── entity</span><br><span class="line">│    │  └── entities-factory.js  // restful 请求目录</span><br><span class="line">│    │</span><br><span class="line">│    └──  notification// 公用方法</span><br><span class="line">│       ├── notification-drtv.js  (directive)</span><br><span class="line">│       ├── notification.tpl.html</span><br><span class="line">│       └── notification-service.js</span><br><span class="line">│       </span><br><span class="line">│</span><br><span class="line">├── home// 为每一个 state 都分割成一个文件夹</span><br><span class="line">│  ├── home.html</span><br><span class="line">│  ├── home-controller.js</span><br><span class="line">│  └── home-routers.js</span><br><span class="line">│</span><br><span class="line">│       </span><br><span class="line">├──  news</span><br><span class="line">│    ├── news-list.html</span><br><span class="line">│   ├── news-controller.js</span><br><span class="line">│   └── news-routers.js    </span><br><span class="line">│</span><br><span class="line">├── public    // 此处存放不需要权限验证的页面</span><br><span class="line">│</span><br><span class="line">└── member    // 此处存放所有需要权限验证的页面</span><br></pre></td></tr></table></figure><h2 id="一些代码的记录"><a href="#一些代码的记录" class="headerlink" title="一些代码的记录"></a>一些代码的记录</h2><blockquote><p><code>entities-factory.js</code> <strong>存放所有的restful请求</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'XXXX'</span>)</span><br><span class="line"> .factory(<span class="string">'newsEntity'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$resource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $resource(</span><br><span class="line">      <span class="string">'api/v1/news/:id'</span>,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="string">'@id'</span>&#125;,<span class="comment">// 组合url为  api/v1/news/123</span></span><br><span class="line">      &#123;<span class="attr">update</span>: &#123;<span class="attr">method</span>: <span class="string">'PUT'</span>&#125;&#125;<span class="comment">// 增加 restful的update</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ........</span></span><br></pre></td></tr></table></figure><blockquote><p>news-routers.js <strong>每个state都有一个自己的路由</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'XXXXX'</span>)</span><br><span class="line">  .config(<span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider</span>) </span>&#123;</span><br><span class="line">    $stateProvider</span><br><span class="line">      .state(<span class="string">'home.news'</span>, &#123;</span><br><span class="line">        url: <span class="string">'/news'</span>,</span><br><span class="line">        template: <span class="string">'&lt;div ui-view&gt;&lt;/div&gt;'</span>,    <span class="comment">// template和abstract 联合使用,只是作为父状态存在</span></span><br><span class="line">        abstract: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .state(<span class="string">'home.news.list'</span>, &#123;</span><br><span class="line">        url: <span class="string">''</span>,</span><br><span class="line">        controller: <span class="string">'NewsListCtrl'</span>,   <span class="comment">// 直接在 routers中指定 controller, 无需再 html中指定</span></span><br><span class="line">        templateUrl: <span class="string">'app/news/news-list.html'</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">          NewsList: <span class="function"><span class="keyword">function</span>(<span class="params">newsEntity</span>) </span>&#123;    <span class="comment">// newsEntity定义在components的entity的entities-factory.js            return newsEntity.query().$promise;    // 返回数组数据的promise</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .state(<span class="string">'home..news.add'</span>, &#123;</span><br><span class="line">        url: <span class="string">'/add'</span>,</span><br><span class="line">        controller: <span class="string">'SingleNewsCtrl'</span>,</span><br><span class="line">        templateUrl: <span class="string">'app/news/news-add-edit.html'</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">          News: <span class="function"><span class="keyword">function</span>(<span class="params">newsEntity</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> newsEntity();          <span class="comment">// 通过new一个对象来使用restful的$save</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .state(<span class="string">'home.news.edit'</span>, &#123;</span><br><span class="line">        url: <span class="string">'/edit/:id'</span>,         <span class="comment">// 此处的 /:id 是用于 ui.router 传递 id参数</span></span><br><span class="line">        controller: <span class="string">'SingleNewsCtrl'</span>,</span><br><span class="line">        templateUrl: <span class="string">'app/news/news-add-edit.html'</span>,</span><br><span class="line">        resolve: &#123;</span><br><span class="line">          News: <span class="function"><span class="keyword">function</span>(<span class="params">newsEntity, $stateParams</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log($stateParams.id);        <span class="comment">// 此处得到 id</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> newsEntity(&#123;<span class="attr">id</span>: $stateParams.id&#125;).$get();  <span class="comment">// 从服务器获取此id的数据</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>notification <strong>公用的方法</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// notification.tpl.html</span><br><span class="line">// 此处使用了 ui.bootstrap</span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">class</span>=<span class="string">"center-block col-sm-6"</span> <span class="attr">ng-repeat</span>=<span class="string">"notification in notifications"</span> <span class="attr">type</span>=<span class="string">"&#123;&#123;types[notification.type]&#125;&#125;"</span> <span class="attr">close</span>=<span class="string">"close($index)"</span>&gt;</span>&#123;&#123;notification.message&#125;&#125;<span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notification-service.js</span></span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'XXXXXXX'</span>)</span><br><span class="line">  .service(<span class="string">'notificationService'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$timeout</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> notifications = [], svc = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getNotifications = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> notifications;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.removeNotification = <span class="function"><span class="keyword">function</span> (<span class="params">notification</span>) </span>&#123;</span><br><span class="line">      notifications.splice(notifications.indexOf(notification), <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.error = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> notification = &#123; <span class="attr">type</span>: <span class="string">'error'</span>, <span class="attr">message</span>: message &#125;;</span><br><span class="line">      notifications.push(notification);</span><br><span class="line">      $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        svc.removeNotification(notification);</span><br><span class="line">      &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> notification = &#123; <span class="attr">type</span>: <span class="string">'info'</span>, <span class="attr">message</span>: message &#125;;</span><br><span class="line">      notifications.push(notification);</span><br><span class="line">      $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        svc.removeNotification(notification);</span><br><span class="line">      &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notification-drtv.js </span></span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'XXXXX'</span>)</span><br><span class="line">.directive(<span class="string">'notificationBar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">'EA'</span>,</span><br><span class="line">    templateUrl: <span class="string">'app/components/notification/notification-bar.tpl.html'</span>,</span><br><span class="line">    controller: <span class="function"><span class="keyword">function</span> (<span class="params">$scope, notificationService</span>) </span>&#123;</span><br><span class="line">      $scope.notifications = notificationService.getNotifications();</span><br><span class="line">      $scope.types = &#123;</span><br><span class="line">        error: <span class="string">'danger'</span>,</span><br><span class="line">        warn: <span class="string">'warning'</span>,</span><br><span class="line">        info: <span class="string">'info'</span></span><br><span class="line">      &#125;;</span><br><span class="line">      $scope.close = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        $scope.notifications.splice(index, <span class="number">1</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>CRM开发</li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sails初学笔记</title>
      <link href="/2015/07/25/sails%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/07/25/sails%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>初次sails使用的一些笔记<br><a id="more"></a></p><h2 id="全局下安装Sails"><a href="#全局下安装Sails" class="headerlink" title="全局下安装Sails"></a>全局下安装Sails</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install sails -g</span><br></pre></td></tr></table></figure><h2 id="在空路径下-新建一个项目"><a href="#在空路径下-新建一个项目" class="headerlink" title="在空路径下,新建一个项目"></a>在空路径下,新建一个项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sails <span class="keyword">new</span> newApp</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sails lift</span><br></pre></td></tr></table></figure><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">├── api    </span><br><span class="line">│   ├── controllers  </span><br><span class="line">│   │       控制层，该层是Http请求的入口</span><br><span class="line">│   │       sails官方建议该层只处理请求的转发和页面的渲染,</span><br><span class="line">│   │       具体的逻辑实现应该交给Service层.</span><br><span class="line">│   │</span><br><span class="line">│   ├── models</span><br><span class="line">│   │     模型层</span><br><span class="line">│   │</span><br><span class="line">│   ├── policies</span><br><span class="line">│   │     过滤层,该层在Controller层之前对Http请求做处理</span><br><span class="line">│   │     在这一层中，可以定于一些规则来过滤Http请求,</span><br><span class="line">│   │     比如身份认证什么的.</span><br><span class="line">│   │</span><br><span class="line">│   ├── responses</span><br><span class="line">│   │</span><br><span class="line">│   │     http响应的方法都放这里</span><br><span class="line">│   │     例如服务器错误、请求错误、404错误等</span><br><span class="line">│   │     定义在responses文件夹里面的方法，</span><br><span class="line">│   │     都会赋值到controller层的req对象中</span><br><span class="line">│   │</span><br><span class="line">│   │</span><br><span class="line">│   └── services</span><br><span class="line">│        服务层,该层包含逻辑处理的方法</span><br><span class="line">│        所有Service都可以全局性访问</span><br><span class="line">│</span><br><span class="line">├── views</span><br><span class="line">│        视图层,存放视图模版文件的地方</span><br><span class="line">│</span><br><span class="line">├── assets</span><br><span class="line">│       资源文件夹</span><br><span class="line">│       在Sails启动的时候,</span><br><span class="line">│       会启动某一个Grunt任务,</span><br><span class="line">│       把assets文件夹里的内容或压缩或编译</span><br><span class="line">│       或复制到根目录下的.tmp目录</span><br><span class="line">│   </span><br><span class="line">├── config </span><br><span class="line">│     │   配置文件夹</span><br><span class="line">│     │   访问方法  sails.config.XXX</span><br><span class="line">│     │ </span><br><span class="line">│     ├── adapters.js</span><br><span class="line">│     │     本地数据库配置</span><br><span class="line">│     │</span><br><span class="line">│     ├── csrf.js</span><br><span class="line">│     │       跨域加密</span><br><span class="line">│     │</span><br><span class="line">│     ├── session.js</span><br><span class="line">│     │       session配置</span><br><span class="line">│     │</span><br><span class="line">│     ├──  routes.js</span><br><span class="line">│     │     routes路由配置</span><br><span class="line">│     │</span><br><span class="line">│     ├── env  在实际开发中,常配置数据库等信息</span><br><span class="line">|     │    │</span><br><span class="line">│     |    └── development.js</span><br><span class="line">|     │    │</span><br><span class="line">│     |    └── production.js</span><br><span class="line">│     │</span><br><span class="line">│     └── cors.js</span><br><span class="line">│          跨域配置</span><br><span class="line">│    </span><br><span class="line">├── tasks</span><br><span class="line">│       Grunt的配置和任务注册</span><br><span class="line">│    </span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── Gruntfile.js</span><br><span class="line">├── README.md</span><br><span class="line">└── app.js</span><br></pre></td></tr></table></figure><p>同时创建model和对应的Controller的命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sails generate api API_NAME</span><br></pre></td></tr></table></figure></p><p>Sails中的路由: <code>blueprint</code></p><h2 id="RESTful-routes"><a href="#RESTful-routes" class="headerlink" title="RESTful routes"></a>RESTful routes</h2><p>当路径诸如：/:modelIdentity 或者 /:modelIdentity/:id的时候，blueprint会根据HTTP的动作（GET、POST、DELETE、PUT等）来分配到相应的Controller下相应的Action来处理。例如一个POST请求/user会创建一个用户，一个DELETE请求/user/123会删除id为123的用户。</p><h2 id="Shortcut-routes"><a href="#Shortcut-routes" class="headerlink" title="Shortcut routes"></a>Shortcut routes</h2><p>生产环境下需要关闭</p><h2 id="Action-routes"><a href="#Action-routes" class="headerlink" title="Action routes"></a>Action routes</h2><p>这种路由会自动的为Controller层的每一个Action创建一个路由，例如你的Controller层有一个FooController.js，里面有一个Actionbar，那么请求/foo/bar就会分配到barAction。</p><p>当然Sails也会提供自定义的路由，用户可以在config/routes.js和config/polices.js这两个配置文件中选择关闭或者打开blueprint提供的路由，和定义自己的路由。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://cnodejs.org/topic/553c7b4a1a6e36a27780ee65" target="_blank" rel="noopener">https://cnodejs.org/topic/553c7b4a1a6e36a27780ee65</a></li><li><a href="https://cnodejs.org/topic/555c3c82e684c4c8088a0ca1" target="_blank" rel="noopener">https://cnodejs.org/topic/555c3c82e684c4c8088a0ca1</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> sails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(适配器模式)</title>
      <link href="/2015/07/05/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/07/05/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(适配器模式)<br><a id="more"></a></p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><strong>作用: 解决两个软件实体间的接口不兼容问题</strong></p><h2 id="百度地图和谷歌地图渲染"><a href="#百度地图和谷歌地图渲染" class="headerlink" title="百度地图和谷歌地图渲染"></a>百度地图和谷歌地图渲染</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> baiduMapAdapter = &#123;</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baiduMap.display();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">        map.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderMap(googleMap); <span class="comment">// 开始渲染谷歌地图</span></span><br><span class="line">renderMap(baiduMapAdapter); <span class="comment">//开始渲染百度地图</span></span><br></pre></td></tr></table></figure><h2 id="地址坐标转换"><a href="#地址坐标转换" class="headerlink" title="地址坐标转换"></a>地址坐标转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> guangdongCity = &#123;</span><br><span class="line">    shenzhen: <span class="number">11</span>,</span><br><span class="line">    guangzhou: <span class="number">12</span>,</span><br><span class="line">    zhuhai: <span class="number">13</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getGuangdongCity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> guangdongCity = [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'shenzhen'</span>,</span><br><span class="line">            id: <span class="number">11</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            name: <span class="string">'guangzhou'</span>,</span><br><span class="line">            id: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> guangdongCity;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染广东省地图'</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">JSON</span>.stringify(fn()));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addressAdapter = <span class="function"><span class="keyword">function</span>(<span class="params">oldAddressfn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> address = &#123;&#125;,</span><br><span class="line">        oldAddress = oldAddressfn();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = oldAddress[i++];) &#123;</span><br><span class="line">        address[c.name] = c.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">render(addressAdapter(getGuangdongCity));</span><br></pre></td></tr></table></figure><h2 id="适配器模式-装饰者模式-代理模式和外观模式区别"><a href="#适配器模式-装饰者模式-代理模式和外观模式区别" class="headerlink" title="适配器模式,装饰者模式,代理模式和外观模式区别"></a>适配器模式,装饰者模式,代理模式和外观模式区别</h2><ul><li>适配器模式主要用来解决两个已有接口之间不匹配问题,它不考虑这些接口是怎么实现的,也不考虑它们将来可能会如何演化.适配器模式不需要改变已有的接口,就能使它们协同工作</li><li>装饰者模式的作用是为了给对象增加功能,不会改变已有的接口,通常包装一次</li><li>代理模式是为了控制对对象的防风,不会改变已有的接口,通常包装一次</li><li>外观模式定义了一个新的接口</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(状态模式)</title>
      <link href="/2015/07/03/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/07/03/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(状态模式)<br><a id="more"></a></p><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p><strong>定义:允许一个对象在其内部状态改变时改变它的行为,对象看起来似乎修改了它的类</strong></p><blockquote><ol><li>第一部分的意思: 将状态封装成独立的类,并将请求委托给当前的状态对象,当对象的内部状态改变时,会带来不同的行为变化</li><li>第二部分的意思: 从客户角度来看,我们使用的对象,在不同状态下具有截然不同的行为</li></ol></blockquote><h2 id="JavaScript版本的状态机"><a href="#JavaScript版本的状态机" class="headerlink" title="JavaScript版本的状态机"></a>JavaScript版本的状态机</h2><p><em>状态模式是状态机的实现之一</em></p><p><strong>通过Function.prototype.call直接把请求委托给某个字面对象来执行</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currState = FSM.off; <span class="comment">// 设置当前状态</span></span><br><span class="line">    <span class="keyword">this</span>.button = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    button.innerHTML = <span class="string">'已关灯'</span>;</span><br><span class="line">    <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.currState.buttonWasPressed.call(_this); <span class="comment">// 把请求委托给FSM状态机</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSM = &#123;</span><br><span class="line">    off: &#123;</span><br><span class="line">        buttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'关灯'</span>);</span><br><span class="line">            <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次按我开灯'</span>;</span><br><span class="line">            <span class="keyword">this</span>.currState = FSM.on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">        buttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'开灯'</span>);</span><br><span class="line">            <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次按我关灯'</span>;</span><br><span class="line">            <span class="keyword">this</span>.currState = FSM.off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light();</span><br><span class="line">light.init();</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="/img/design/light.png" alt="light" title="" class="">                <p>light</p>            </figure><hr><p><strong>把变量封闭在闭包内</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> delegate = <span class="function"><span class="keyword">function</span>(<span class="params">client, delegation</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 将客户的操作委托给delegation对象</span></span><br><span class="line">        buttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegation.buttonWasPressed.apply(client, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSM = &#123;</span><br><span class="line">    off: &#123;</span><br><span class="line">        buttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'关灯'</span>);</span><br><span class="line">            <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次按我开灯'</span>;</span><br><span class="line">            <span class="keyword">this</span>.currState = FSM.on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">        buttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'开灯'</span>);</span><br><span class="line">            <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次按我关灯'</span>;</span><br><span class="line">            <span class="keyword">this</span>.currState = FSM.off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offState = delegate(<span class="keyword">this</span>, FSM.off);</span><br><span class="line">    <span class="keyword">this</span>.onState = delegate(<span class="keyword">this</span>, FSM.on);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.currState = <span class="keyword">this</span>.offState;</span><br><span class="line">    <span class="keyword">this</span>.button = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    button.innerHTML = <span class="string">'已关灯'</span>;</span><br><span class="line">    <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.currState.buttonWasPressed.call(_this); <span class="comment">// 把请求委托给FSM状态机</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light();</span><br><span class="line">light.init();</span><br></pre></td></tr></table></figure></p><h2 id="表驱动的有限状态机"><a href="#表驱动的有限状态机" class="headerlink" title="表驱动的有限状态机"></a>表驱动的有限状态机</h2><p><strong>我们可以在表中很清楚的看到下一个状态是由当前状态和行为共同决定的</strong></p><table><thead><tr><th style="text-align:center">当前状态 → 条件↓</th><th style="text-align:center">状态A</th><th style="text-align:center">状态B</th><th style="text-align:center">状态C</th></tr></thead><tbody><tr><td style="text-align:center">条件X</td><td style="text-align:center">……</td><td style="text-align:center">…..</td><td style="text-align:center">……</td></tr><tr><td style="text-align:center">条件Y</td><td style="text-align:center">……</td><td style="text-align:center">状态C</td><td style="text-align:center">……</td></tr><tr><td style="text-align:center">条件Z</td><td style="text-align:center">……</td><td style="text-align:center">…..</td><td style="text-align:center">……</td></tr></tbody></table><p>github上有对应的库实现:<br><a href="https://github.com/jakesgordon/javascript-state-machine" target="_blank" rel="noopener">https://github.com/jakesgordon/javascript-state-machine</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://github.com/jakesgordon/javascript-state-machine --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://upload.xinshangshangxin.com/state-machine-2.3.5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fsm = StateMachine.create(&#123;</span></span><br><span class="line"><span class="javascript">            initial: <span class="string">'off'</span>,</span></span><br><span class="line"><span class="undefined">            events: [</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">'buttonWasPressed'</span>, <span class="attr">from</span>: <span class="string">'off'</span>, <span class="attr">to</span>: <span class="string">'on'</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">'buttonWasPressed'</span>, <span class="attr">from</span>: <span class="string">'on'</span>, <span class="attr">to</span>: <span class="string">'off'</span>&#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            callbacks: &#123;</span></span><br><span class="line"><span class="javascript">                onbuttonWasPressed: <span class="function"><span class="keyword">function</span>(<span class="params">event, from, to, msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span>(<span class="params">eventName, from, to, args, errorCode, errorMessage</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// 从一种状态试图切换到一种不可能的到达的状态的时候</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        button.innerHTML = <span class="string">'test'</span>;</span></span><br><span class="line"><span class="javascript">        button = <span class="built_in">document</span>.body.appendChild(button);</span></span><br><span class="line"><span class="javascript">        button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            fsm.buttonWasPressed();</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="/img/design/fsm.png" alt="fsm" title="" class="">                <p>fsm</p>            </figure><h2 id="状态模式和策略模式的关系"><a href="#状态模式和策略模式的关系" class="headerlink" title="状态模式和策略模式的关系"></a>状态模式和策略模式的关系</h2><ol><li>状态模式和策略模式 都封装了一系列算法或者行为, 都有一个上下文,一些策略或者状态类,上下文把请求委托给这些类来执行</li><li>策略模式中各个策略类之间的是平等又平行的,它们之间没有任何联系,所以客户必须熟知这些策略类的作用,一边客户可以随时主动切换算法</li><li>状态模式中,状态和状态所对应的行为是早已被封装好的,状态之间的切换也是早被规定完成,”改变行为”这件事的发生在状态模式内部,对客户来说,并不需要了解这些细节</li></ol><p><strong>虽然状模式一开始并不是非常容易理解,但我们有必须去好好掌握这种设计模式</strong></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(装饰者模式)</title>
      <link href="/2015/07/02/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/07/02/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(装饰者模式)<br><a id="more"></a></p><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p><strong>在不改变对象自身的基础上,在程序运行期间给对象动态的添加职责</strong></p><h2 id="用AOP装饰函数"><a href="#用AOP装饰函数" class="headerlink" title="用AOP装饰函数"></a>用AOP装饰函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testAfter = test.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">testAfter();<span class="comment">//0 1 2 3 4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> before = <span class="function"><span class="keyword">function</span>(<span class="params">fn, beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> after = <span class="function"><span class="keyword">function</span>(<span class="params">fn, afterfn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a = after(a, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a();  <span class="comment">// 2  3  4</span></span><br></pre></td></tr></table></figure><h2 id="用aop动态改变函数的参数"><a href="#用aop动态改变函数的参数" class="headerlink" title="用aop动态改变函数的参数"></a>用aop动态改变函数的参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);         <span class="comment">// &#123; name: 'shang', token: 'token' &#125;</span></span><br><span class="line">    <span class="comment">// 正真请求略</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'token'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax = ajax.before(<span class="function"><span class="keyword">function</span>(<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">    param.token = getToken();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'url'</span>, &#123;<span class="attr">name</span>: <span class="string">'shang'</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>用AOP的方式给ajax函数动态装饰上token参数,保证了ajax函数是一个相对纯净的函数,提高了ajax函数的可复用性</strong></p><h2 id="插件式表单验证"><a href="#插件式表单验证" class="headerlink" title="插件式表单验证"></a>插件式表单验证</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submitBtn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> submitBtn = <span class="built_in">document</span>.getElementById(<span class="string">'submitBtn'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) === <span class="literal">false</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> validate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (username.value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'用户名不能为空'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (password.value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'密码不能为空'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formSubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> param = &#123;</span></span><br><span class="line"><span class="undefined">                username: username.value,</span></span><br><span class="line"><span class="undefined">                password: password.value</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'提交数据: '</span> + <span class="built_in">JSON</span>.stringify(param));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ajax;</span></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        formSubmit = formSubmit.before(validate);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        submitBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            formSubmit();</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>因为函数通过 <code>Function.prototype.before</code> 或者 <code>Function.prototype.after</code> 被装饰之后,返回的实际上是一个新的函数,如果原函数上保存了一些属性,那么这些属性会丢失</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func.a = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">func = func.after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(func.a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="2"><li>这种装饰方式也叠加了函数的作用域,如果装饰的链条过长,性能上也会收到一些影响</li></ol><h2 id="装饰者模式和代理模式"><a href="#装饰者模式和代理模式" class="headerlink" title="装饰者模式和代理模式"></a>装饰者模式和代理模式</h2><p><strong>相同</strong></p><ul><li>都描述了怎样为对象提供一定程度上的间接引用</li><li>它们的实现部分都保留可对另外一个对象的引用,并向那个对象发送请求</li></ul><p><strong>区别</strong></p><blockquote><ul><li>代理模式的目的是:当直接访问本体不方便或者不符合需要时,为这个本体提供一个替代者.本体定义了关键功能,而代理提供或拒绝对它的访问,或者在访问本体之前做一些额外的事情</li><li>装饰者模式的作用就是为了对象动态加入行为</li></ul></blockquote><blockquote><ul><li>代理模式强调的一种管理(proxy和它实体之间的关系),这种关系在一开始就可以被确定</li><li>装饰者模式用于一开始不能确定对象的全部功能</li></ul></blockquote><blockquote><ul><li>代理模式通常只有一层代理-对象的引用</li><li>装饰者模式经常会形成一条常常的装饰链</li></ul></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong></p></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(中介者模式)</title>
      <link href="/2015/07/01/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/07/01/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(中介者模式)<br><a id="more"></a></p><h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p><strong>中介者模式的作用是解除对象和对象之间的紧耦合关系.</strong></p><h2 id="泡泡堂游戏-实例"><a href="#泡泡堂游戏-实例" class="headerlink" title="泡泡堂游戏-实例"></a>泡泡堂游戏-实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params">name, teamColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;               <span class="comment">// 角色名称</span></span><br><span class="line">    <span class="keyword">this</span>.teamColor = teamColor;     <span class="comment">// 队伍颜色</span></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'alive'</span>;           <span class="comment">// 玩家生存状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' won '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' lost'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'dead'</span>;</span><br><span class="line">    PlayerDirector.ReceiveMessage(<span class="string">'playerDead'</span>, <span class="keyword">this</span>);  <span class="comment">// 给中介者发送消息,玩家死亡</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    PlayerDirector.ReceiveMessage(<span class="string">'removePlayer'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Player.prototype.changeTeam = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    PlayerDirector.ReceiveMessage(<span class="string">'changeTeam'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PlayerFactory = <span class="function"><span class="keyword">function</span>(<span class="params">name, teamColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newPlayer = <span class="keyword">new</span> Player(name, teamColor);</span><br><span class="line">    PlayerDirector.ReceiveMessage(<span class="string">'addPlayer'</span>, newPlayer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newPlayer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PlayerDirector = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> operations = &#123;&#125;;  <span class="comment">//中介者可以执行的操作;</span></span><br><span class="line"></span><br><span class="line">    operations.addPlayer = <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">        <span class="comment">// 如果给颜色的玩家没有成立队伍,则新建一个队伍</span></span><br><span class="line">        players[teamColor] = players[teamColor] || [];</span><br><span class="line">        players[teamColor].push(player);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    operations.removePlayer = <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">        <span class="keyword">var</span> teamPlayers = players[teamColor];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = teamPlayers.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (teamPlayers[i] === player) &#123;</span><br><span class="line">                teamPlayers.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    operations.changeTeam = <span class="function"><span class="keyword">function</span>(<span class="params">player, newTeamColor</span>) </span>&#123;</span><br><span class="line">        operations.removePlayer(player);</span><br><span class="line">        player.teamColor = <span class="keyword">new</span> newTeamColor;</span><br><span class="line">        operations.addPlayer(player);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    operations.playerDead = <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">        <span class="keyword">var</span> teamPlayers = players[teamColor];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> all_dead = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, p; p = teamPlayers[i++]; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.state !== <span class="string">'dead'</span>) &#123;</span><br><span class="line">                all_dead = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (all_dead) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, p; p = teamPlayers[i++]; ) &#123;</span><br><span class="line">                p.lose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> color <span class="keyword">in</span> players) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color !== teamColor) &#123;</span><br><span class="line">                    <span class="keyword">var</span> teamPlayers = players[color];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, p; p = teamPlayers[i++];) &#123;</span><br><span class="line">                        p.win();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ReceiveMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        operations[message].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ReceiveMessage: ReceiveMessage</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> player1 = PlayerFactory(<span class="string">'red1'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> player2 = PlayerFactory(<span class="string">'red2'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> player3 = PlayerFactory(<span class="string">'red3'</span>, <span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">var</span> player4 = PlayerFactory(<span class="string">'red4'</span>, <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> player5 = PlayerFactory(<span class="string">'blue1'</span>, <span class="string">'blue'</span>);</span><br><span class="line"><span class="keyword">var</span> player6 = PlayerFactory(<span class="string">'blue2'</span>, <span class="string">'blue'</span>);</span><br><span class="line"><span class="keyword">var</span> player7 = PlayerFactory(<span class="string">'blue3'</span>, <span class="string">'blue'</span>);</span><br><span class="line"><span class="keyword">var</span> player8 = PlayerFactory(<span class="string">'blue4'</span>, <span class="string">'blue'</span>);</span><br><span class="line"></span><br><span class="line">player1.die();</span><br><span class="line">player2.die();</span><br><span class="line">player3.die();</span><br><span class="line">player4.die();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> red1 lost</span></span><br><span class="line"><span class="comment"> red2 lost</span></span><br><span class="line"><span class="comment"> red3 lost</span></span><br><span class="line"><span class="comment"> red4 lost</span></span><br><span class="line"><span class="comment"> blue1 won</span></span><br><span class="line"><span class="comment"> blue2 won</span></span><br><span class="line"><span class="comment"> blue3 won</span></span><br><span class="line"><span class="comment"> blue4 won </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>如果对象之间的复杂耦合确实导致调用和维护出现了困难,而且这些耦合度随项目的变化呈指数增长曲线,那我们就可以考虑用中介者模式重构代码</strong></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(职责链模式)</title>
      <link href="/2015/06/30/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/30/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(职责链模式)<br><a id="more"></a></p><h1 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h1><p><strong>定义: 使多个对象都有机会处理请求,从而避免请求发送这和接受这之间的耦合关系,将这些对象练成一条链,并沿着这条链传递该请求,直到有一个对象处理它为止</strong></p><h2 id="商品购买-职责链实例"><a href="#商品购买-职责链实例" class="headerlink" title="商品购买-职责链实例"></a>商品购买-职责链实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预定,得到100优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        order200(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200 定金预定,得到50优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        orderNomal(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNomal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买,无优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 普通购买,无优惠卷</span></span><br><span class="line">order500(<span class="number">3</span>, <span class="literal">false</span>, <span class="number">0</span>);  <span class="comment">// 库存不足</span></span><br></pre></td></tr></table></figure><h2 id="灵活可拆分的职责链节点"><a href="#灵活可拆分的职责链节点" class="headerlink" title="灵活可拆分的职责链节点"></a>灵活可拆分的职责链节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预定,得到100优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200 定金预定,得到50优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNomal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买,无优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fn = fn;</span><br><span class="line">    <span class="keyword">this</span>.successor = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span>(<span class="params">successor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor = successor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNomal);</span><br><span class="line"></span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder200);</span><br><span class="line">chainOrder200.setNextSuccessor(chainOrderNormal);</span><br><span class="line"></span><br><span class="line">chainOrder500.passRequest(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>); <span class="comment">// 普通购买,无优惠卷</span></span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong></p><ol><li>解耦了请求发送者和N个接受者之间的复杂关系</li><li>链中的节点对象可以灵活的拆分重组</li><li>可以手动指定其实节点</li></ol><p><strong>缺点</strong></p><ul><li>避免过长的职责链带来的性能损耗</li></ul><h2 id="利用aop实现职责链"><a href="#利用aop实现职责链" class="headerlink" title="利用aop实现职责链"></a>利用aop实现职责链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'500定金预定,得到100优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'200 定金预定,得到50优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderNomal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType, pay, stock</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买,无优惠卷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = order500.after(order200).after(orderNomal);</span><br><span class="line"></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">500</span>); <span class="comment">// 普通购买,无优惠卷</span></span><br></pre></td></tr></table></figure><p><strong>增加了函数的作用域,如果链条太长,会对性能有较大的影响</strong></p><h2 id="获取文件上传对象-职责链实例"><a href="#获取文件上传对象-职责链实例" class="headerlink" title="获取文件上传对象-职责链实例"></a>获取文件上传对象-职责链实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'TXFTNActivex.FTMUpload'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123;  <span class="comment">// supportFlash未实现</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file"&gt;'</span>;</span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUploadObj = getActiveUploadObj.after(getFlashUploadObj).after(getFormUploadObj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getUploadObj());</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo3中hexo g生成速度过慢</title>
      <link href="/2015/06/29/hexo3%E4%B8%ADhexo-g%E7%94%9F%E6%88%90%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2/"/>
      <url>/2015/06/29/hexo3%E4%B8%ADhexo-g%E7%94%9F%E6%88%90%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<p>hexo g 时间过长<br><a id="more"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hexo 3 中的 highlight.js 会试图分析 `` ` 中的代码内容可能属于哪种语言,内容越长,分析时间就越长</span><br><span class="line"></span><br><span class="line">在Hexo 2 自带的语法高亮插件 highlight.js 在遇到没有语言说明的代码时是统一当成纯文本</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><p>在没有语言说明符的代码段后面加上 类似<code>js</code> 的说明符;</p><p>考虑到有很多md文件,所以拿node.js写了自动修改 <a href="https://gist.github.com/xinshangshangxin/2fa9cecf2423185bcb3a" target="_blank" rel="noopener">hexo3_speed_up</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node speed_up.js [md文件夹(source/_posts)或文件路径(默认为当前文件夹)] [说明符(默认为js)]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userPath = path.resolve(process.argv[<span class="number">2</span>] || <span class="string">'./'</span>);</span><br><span class="line"><span class="keyword">var</span> codeStyle = process.argv[<span class="number">3</span>] || <span class="string">'js'</span>;</span><br><span class="line"></span><br><span class="line">explorer(userPath);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">explorer</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    fs.stat(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">            fs.readdir(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//err 为错误 , files 文件名列表包含文件夹与文件</span></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'error:\n'</span> + err);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">                    fs.stat(path + <span class="string">'/'</span> + file, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(err);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">                            <span class="comment">// 如果是文件夹遍历</span></span><br><span class="line">                            explorer(path + <span class="string">'/'</span> + file);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 读出所有的文件</span></span><br><span class="line">                            <span class="keyword">var</span> fileName = path + <span class="string">'/'</span> + file;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="regexp">/.*\.md$/</span>.test(fileName) &amp;&amp; !<span class="regexp">/node_modules/</span>.test(fileName)) &#123;</span><br><span class="line">                                <span class="comment">//console.log(fileName);</span></span><br><span class="line">                                changeContext(fileName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            changeContext(userPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeContext</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    eachLine(filename, <span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/```.*/</span>.test(line)) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/```\s*$/</span>.test(line)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    line = <span class="string">'```'</span> + codeStyle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(line);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fs.writeFile(filename, arr.join(<span class="string">'\n'</span>) + <span class="string">'\n'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'修改 '</span> + filename + <span class="string">' 成功~'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****以下代码来自 https://github.com/nickewing/line-reader/blob/master/lib/line_reader.js*****/</span></span><br><span class="line"><span class="comment">// 这样 就不需要 安装 node_modules了</span></span><br><span class="line"><span class="keyword">var</span> StringDecoder = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>).StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LineReader</span>(<span class="params">fd, cb, separator, encoding, bufferSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> filePosition = <span class="number">0</span>,</span><br><span class="line">        encoding = encoding || <span class="string">'utf8'</span>,</span><br><span class="line">        separator = separator || <span class="string">'\n'</span>,</span><br><span class="line">        bufferSize = bufferSize || <span class="number">1024</span>,</span><br><span class="line">        buffer = <span class="keyword">new</span> Buffer(bufferSize),</span><br><span class="line">        bufferStr = <span class="string">''</span>,</span><br><span class="line">        decoder = <span class="keyword">new</span> StringDecoder(encoding),</span><br><span class="line">        closed = <span class="literal">false</span>,</span><br><span class="line">        eof = <span class="literal">false</span>,</span><br><span class="line">        separatorIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!closed) &#123;</span><br><span class="line">            fs.close(fd, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            closed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">readToSeparator</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">readChunk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fs.read(fd, buffer, <span class="number">0</span>, bufferSize, filePosition, <span class="function"><span class="keyword">function</span>(<span class="params">err, bytesRead</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> separatorAtEnd;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bytesRead &lt; bufferSize) &#123;</span><br><span class="line">                    eof = <span class="literal">true</span>;</span><br><span class="line">                    close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                filePosition += bytesRead;</span><br><span class="line"></span><br><span class="line">                bufferStr += decoder.write(buffer.slice(<span class="number">0</span>, bytesRead));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (separatorIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    separatorIndex = bufferStr.indexOf(separator);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                separatorAtEnd = separatorIndex === bufferStr.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (bytesRead &amp;&amp; (separatorIndex === <span class="number">-1</span> || separatorAtEnd) &amp;&amp; !eof) &#123;</span><br><span class="line">                    readChunk();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    cb();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        readChunk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hasNextLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bufferStr.length &gt; <span class="number">0</span> || !eof;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nextLine</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret = bufferStr.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line"></span><br><span class="line">            bufferStr = bufferStr.substring(separatorIndex + separator.length);</span><br><span class="line">            separatorIndex = <span class="number">-1</span>;</span><br><span class="line">            cb(ret);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (separatorIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            separatorIndex = bufferStr.indexOf(separator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (separatorIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eof) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hasNextLine()) &#123;</span><br><span class="line">                    separatorIndex = bufferStr.length;</span><br><span class="line">                    getLine();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No more lines to read.'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                readToSeparator(getLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            getLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hasNextLine = hasNextLine;</span><br><span class="line">    <span class="keyword">this</span>.nextLine = nextLine;</span><br><span class="line">    <span class="keyword">this</span>.close = close;</span><br><span class="line"></span><br><span class="line">    readToSeparator(cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params">filename, cb, separator, encoding, bufferSize</span>) </span>&#123;</span><br><span class="line">    fs.open(filename, <span class="string">'r'</span>, <span class="built_in">parseInt</span>(<span class="string">'666'</span>, <span class="number">8</span>), <span class="function"><span class="keyword">function</span>(<span class="params">err, fd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reader;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader = <span class="keyword">new</span> LineReader(fd, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cb(reader);</span><br><span class="line">        &#125;, separator, encoding, bufferSize);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachLine</span>(<span class="params">filename, cb, separator, encoding, bufferSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> finalFn,</span><br><span class="line">        asyncCb = cb.length == <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">finish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (finalFn &amp;&amp; <span class="keyword">typeof</span> finalFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">            finalFn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open(filename, <span class="function"><span class="keyword">function</span>(<span class="params">reader</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">newRead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (reader.hasNextLine()) &#123;</span><br><span class="line">                setImmediate(readNext);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">continueCb</span>(<span class="params">continueReading</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (continueReading !== <span class="literal">false</span>) &#123;</span><br><span class="line">                newRead();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">readNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            reader.nextLine(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> last = !reader.hasNextLine();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (asyncCb) &#123;</span><br><span class="line">                    cb(line, last, continueCb);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cb(line, last) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                        newRead();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        finish();</span><br><span class="line">                        reader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newRead();</span><br><span class="line">    &#125;, separator, encoding, bufferSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        then: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">            finalFn = cb;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://hahack.com/codes/hexo-3-speed-up/" target="_blank" rel="noopener">http://hahack.com/codes/hexo-3-speed-up/</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(享元模式)</title>
      <link href="/2015/06/29/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/29/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(享元模式)<br><a id="more"></a></p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p><strong>享元模式是一种用于性能优化的模式</strong></p><h2 id="内部状态与外部状态"><a href="#内部状态与外部状态" class="headerlink" title="内部状态与外部状态"></a>内部状态与外部状态</h2><blockquote><p>享元模式要求将对象的属性划分为内部状态和外部状态(状态在这里通常指属性);</p><blockquote><ul><li>内部状态存储于对象内部</li><li>内部状态可以被一些对象共享</li><li>内部状态独立于具体的场景,通常不会改变</li><li>外部状态取决于具体的场景,并根据场景而变化,外部状态不能被共享</li></ul></blockquote></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******剥离外部状态***********/</span></span><br><span class="line"><span class="keyword">var</span> Upload = <span class="function"><span class="keyword">function</span>(<span class="params">uploadType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uploadType = uploadType;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Upload.prototype.delFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    uploadManager.setExternalState(id, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fileSize &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">'确定删除文件吗? '</span> + <span class="keyword">this</span>.fileName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******工厂进行对象实例化***********/</span></span><br><span class="line"><span class="keyword">var</span> UploadFactory = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> createdFlyWeightObjs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        create: <span class="function"><span class="keyword">function</span>(<span class="params">uploadType</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (createdFlyWeightObjs[uploadType]) &#123;</span><br><span class="line">                <span class="keyword">return</span> createdFlyWeightObjs[uploadType];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> createdFlyWeightObjs[uploadType] = <span class="keyword">new</span> Upload(uploadType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******管理器封装外部状态***********/</span></span><br><span class="line"><span class="keyword">var</span> uploadManager = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uploadDatabase = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">id, uploadType, fileName, fileSize</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> flyWeightObj = UploadFactory.create(uploadType);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            dom.innerHTML = <span class="string">'&lt;span&gt;文件名: '</span> + fileName + <span class="string">'  文件大小:  '</span> + fileSize + <span class="string">'&lt;/span&gt;'</span></span><br><span class="line">                + <span class="string">'&lt;button class="delFile"&gt;删除&lt;/button&gt;'</span>;</span><br><span class="line"></span><br><span class="line">            dom.querySelector(<span class="string">'.delFile'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                flyWeightObj.delFile(id);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(dom);</span><br><span class="line"></span><br><span class="line">            uploadDatabase[id] = &#123;</span><br><span class="line">                fileName: fileName,</span><br><span class="line">                fileSize: fileSize,</span><br><span class="line">                dom: dom</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> flyWeightObj;</span><br><span class="line">        &#125;,</span><br><span class="line">        setExternalState: <span class="function"><span class="keyword">function</span>(<span class="params">id, flyWeightObj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> uploadData = uploadDatabase[id];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i  <span class="keyword">in</span> uploadData) &#123;</span><br><span class="line">                flyWeightObj[i] = uploadData[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******触发上传动作函数***********/</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.startUpload = <span class="function"><span class="keyword">function</span>(<span class="params">uploadType, files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file; file = files[i++]; ) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadObj = uploadManager.add(++id, uploadType, file.fileName, file.fileSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">startUpload(<span class="string">'plugin'</span>, [&#123;</span><br><span class="line">    fileName: <span class="string">'1.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">1000</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    fileName: <span class="string">'2.html'</span>,</span><br><span class="line">    fileSize: <span class="number">3000</span></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">startUpload(<span class="string">'flash'</span>, [&#123;</span><br><span class="line">    fileName: <span class="string">'4.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">1000</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    fileName: <span class="string">'5.html'</span>,</span><br><span class="line">    fileSize: <span class="number">3000</span></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="/img/design/fileupload.png" alt="效果" title="" class="">                <p>效果</p>            </figure><h2 id="享元模式的适用性"><a href="#享元模式的适用性" class="headerlink" title="享元模式的适用性"></a>享元模式的适用性</h2><ol><li>一个程序中使用了大量相似的对象</li><li>由于使用了大量对象,造成了很大的内存开销</li><li>对象的大多数状态都可以变成外部状态</li><li>剥离对象的外部状态之后,可以使用相对较少的共享对象取代大量对象</li><li>有多少种内部状态的组合,系统中国便存在多少个共享对象</li></ol><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p><strong>享元模式的过程是剥离外部状态,并把外部状态保存到其它地方,在合适的时刻再把外部状态组装进共享对象</strong><br><strong>对象池维护一个装载空闲对象的池子,如果需要对象时,不是直接new,而是转从对象池里获取;对象池没有分离外部状态和内部状态这个过程</strong></p><h2 id="iframe加载-对象池实例"><a href="#iframe加载-对象池实例" class="headerlink" title="iframe加载-对象池实例"></a>iframe加载-对象池实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectPoolFactory = <span class="function"><span class="keyword">function</span>(<span class="params">createObjFn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> objPool = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        create: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(objPool.length);</span><br><span class="line">            <span class="keyword">return</span> (objPool.length === <span class="number">0</span></span><br><span class="line">                ? createObjFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">                : objPool.shift());</span><br><span class="line">        &#125;,</span><br><span class="line">        revover: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            objPool.push(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframeFactory = objectPoolFactory(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    iframe.onload= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iframe.onload = <span class="literal">null</span>; <span class="comment">//防止iframe重复加载的bug</span></span><br><span class="line">        iframeFactory.revover(iframe);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframe1 = iframeFactory.create();</span><br><span class="line">iframe1.src=<span class="string">'http://je.ishang.club/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframe2 = iframeFactory.create();</span><br><span class="line">iframe2.src=<span class="string">'http://blog.xinshangshangxin.com/'</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iframe3 = iframeFactory.create();</span><br><span class="line">    iframe3.src=<span class="string">'http://nggather.coding.io/'</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>结果只有2个iframe</p></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用总结(转)</title>
      <link href="/2015/06/28/docker%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93-%E8%BD%AC/"/>
      <url>/2015/06/28/docker%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93-%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>docker使用总结(转)<br><a id="more"></a></p><p><strong><a href="http://weibo.com/p/1001603855970483702516" target="_blank" rel="noopener">转载自http://weibo.com/p/1001603855970483702516</a></strong></p><h2 id="安装注意"><a href="#安装注意" class="headerlink" title="安装注意"></a>安装注意</h2><ol><li>不要直接用apt-get安装docker,apt-get安装的版本有些低.<br>安装用<code>curl -sSL https://get.docker.com/ubuntu/ | sudo sh</code> 可以安装最新版</li><li><p>docker对linux内核版本有要求,内核版本不能太低, 如果太低会导致docker的一些功能不能使用, 比如docker exec 命令在低版本的linux内核下不能用.</p><blockquote><p>运行linux命令uname -r 可以查看linux内核版本, docker官方文档说linux内核版本不能低于3.13<br>升级linux内核 : <code>sudo apt-get install linux-image-generic-lts-trusty</code>   </p></blockquote></li><li><p>高版本的linux内核不支持aufs的存储类型,建议用devicemapper存储类型</p></li></ol><h2 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h2><ol><li>容器要有专职, 尽量一个容器只有一个服务,原则上说一个进程就一个容器,不要让一个容器里面有多个进程,进程越大,耦合性越大.</li><li>容器内可以用supervisiod管理进程,防止进程异常退出.</li><li>环境变量作为容器配置项, <code>Dockerfile</code>中可以用 <code>ENV</code> 设置环境变量, <code>docker run</code> 命令可以用 <code>-e</code> 设置环境变量.<br><strong>注意:设置的环境命令都是root用户的</strong>. 如果想让Apache 用户也使用这些环境变量, 执行下面shell命令 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env | grep JD_  | sed  <span class="string">"s/^/export /g"</span> &gt;&gt; <span class="regexp">/etc/</span>apache2/envvars</span><br></pre></td></tr></table></figure></li></ol><p>表示以<code>JD_</code>开头的环境变量都设置为Apache的环境变量.<br>如果是一个纯前端的网站项目,你可以获得环境变量, 可以在index.html 中加载一个php文件: 在json.php 中获得环境变量输出.   </p><h2 id="docker的坑"><a href="#docker的坑" class="headerlink" title="docker的坑"></a>docker的坑</h2><ul><li><p><code>--link</code> 链接容器. </p><blockquote><p>用docker自带的<code>--link</code>把多个容器链接在以前, 有重启或升级的问题,<br>比如很多容器都依赖于 db 这个容器, 然后db容器重启了, 重启时docker分配的ip会变, 导致其他依赖于db的容器都要重启.<code>--link</code> 链接的容器还有启动顺序的问题, 需要先启动db容器再启动其他依赖于db的容器, 这样导致 <code>--link</code>和<code>--restart=always</code>不能一起用<br>如果一起用会发现宿主机重启了, docker容器并没有全部重启,因为这时候docker容器是同时被启动的,并不知道启动顺序. 最后决定不用 <code>--link</code> 链接容器了.<br>另外有两种链接容器的方法,一种是给容器设置固定ip , 这个方法比较复杂:<br>另外还有一种简单的链接方式, 可以用宿主机的端口链接, 比如一个mysql容器,先设置宿主机的3306端口映射到mysql容器中.<br>然后查宿主机的内网ip , 用ifconfig 查,eth0的网卡可以看见内网ip, 假设内网ip为10.128.130.175 , docker容器是可以访问这个宿主机内网ip的, 这样其他容器要链接mysql容器,链接数据库时 链接 10.128.130.175:3306 即可.<br>我们可以在docker run启动容器时用 –add-host 参数为容器设置一个hosts .这样容器内代码可以用指定的域名去访问数据库, 不用关心内网ip的变化.</p></blockquote></li><li><p>pid的问题(1)</p><blockquote><p>docker容器中的进程有时会生成pid文件, 比如Apache进程会生成的pid文件为 <code>/var/run/apache2/apache2.pid</code>, 当进程启动时,这个pid文件就存在,当进程退出时,这个pid文件也会被删除, 我们把正在运行的容器用docker commit 提交为镜像时会把pid文件也提交到镜像中,这样从新镜像运行容器时,容器可能因为已经存在pid文件而无法启动.<br>以Apache为例,可能就会报 <code>httpd(pid 1) ready runing</code> 之类的错误 , 报错告诉你httpd正在运行,但其实并没有运行只是存在pid文件而已.<br>所以最好是用docker stop 把容器停掉, 再用docker commit 创建镜像.</p></blockquote></li><li><p>pid的问题(2)</p><blockquote><p>还可能会出现在docker run时设置<code>--restart=always</code> 参数的时候, 设置了此参数容器退出了会自动重启, 宿主机重启了容器也能自动重启. 但是容器在重启的时候很容易pid文件存在.pid文件存在时进程会自动退出, 但又因为设置了<code>--restart=always</code> 进程退出的那一瞬间 容器又自动重启, 所以容器就在那里不断的退出再自动重启退出再自动重启. 此时 运行命令 docker ps 是能看见容器是运行中的状态.<br>但是用 <code>docker exec -it container_name bash</code> 始终进不了容器, 会报如下错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot run exec command <span class="number">0</span>eb8e17609dd78c9137c62d94cfaa62795de161d643fc3cb00387b60f11090be <span class="keyword">in</span> container <span class="number">8837</span>b983fe2f08f5f3b9999259d5f255a83774b19282b6f9c21a9d688f7f7f2a: No active container exists <span class="keyword">with</span> ID <span class="number">8837</span>b983fe2f08f5f3b9999259d5f255a83774b19282b6f9c21a9d688f7f7f2a</span><br><span class="line">No active container exists <span class="keyword">with</span> ID</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>这句的意思是说 找不到有效的容器. 但是docker ps又看见容器是在运行中, 为什么会找不到有效的容器？ 这是因为这个容器现在其实一直在不断重启中, 所以进不去.</p><blockquote><p>解决方法, 可以在容器启动命令脚本（如 /run.sh） 中 加上一句删除pid文件的代码, 如 rm /var/run/apache2/apache2.pid 这样在启动进程之前强制删除了pid文件,就不会重复重启了.</p></blockquote><ul><li>docker容器的hosts文件.</li></ul><blockquote><p>在正在运行的容器 用docker exec 进入修改 /etc/hosts 文件 ,这个容器被重启后会发现 hosts文件会被还原. 所以不要直接修改hosts文件, 需要增加hosts ,在docker run时 用 –add-host 参数.</p></blockquote><ul><li><p>虚拟目录不会提交到镜像</p><blockquote><p>Dockerfile 中 VOLUME 指定的目录 或 docker run 时 -v 参数指定的目录, 在docker commit 时不会提交到镜像中. 如果-v 参数指定的容器内的目录原本有文件, 原本的文件都会被删除, 只存在宿主机目录的文件. </p></blockquote></li><li><p>docker容器的重启.</p><blockquote><p>容器一个容器运行中apache 我们要重启Apache , 应该怎么重启？ 可能新手会 docker exec -it container_name bash 进入容器, 然后运行 service apache2 restart 启动Apache , 这样是不能启动apache的, 只会把容器停止掉. 因为容器的主进程就是Apache , 主进程退出时会退出容器, 在重启apache的时候 主进程先退出了, 这时候docker容器也跟着退出了,所以Apache不会重启. 要重启Apache 用docker命令: docker restart container_name </p></blockquote></li><li><p>退出容器的方法</p></li></ul><blockquote><p>如果是docker run 运行一个容器, 没有加 -d 参数让它后台运行, 这时候 ctrl+c 退出进程也会让容器停止, 如果先退出但不停止容器可以ctrl+p 然后 ctrl+q</p></blockquote><h2 id="Dockerfile编写技巧"><a href="#Dockerfile编写技巧" class="headerlink" title="Dockerfile编写技巧"></a>Dockerfile编写技巧</h2><ul><li>将Ubuntu的源设置为国内的源,这样安装软件会快很多 RUN sed -i “s/archive.ubuntu.com/mirrors.163.com/g” /etc/apt/sources.list</li><li><p>RUN</p><blockquote><p>Dockerfile 中可以RUN执行系统命令创建镜像.不能用RUN命令来常驻进程. 比如不能运行 RUN gearmand -d .</p></blockquote></li><li><p>ONBUILD</p><blockquote><p>ONBUILD修饰的命令在子Dockerfile文件中也会被执行,举例说明:<br>一个Dockerfile中有ONBUILD命令, 如 ONBUILD ADD . /app/src , 运行 docker build -t Image_name . 创建一个名为Image_name的镜像. 另外在创建一个Dockerfile , 第一个行是 FROM Image_name 现在这个Dockerfile是继承于前一个Dockerfile的,现在这个Dockerfile在build时会执行他父Dockerfile的ONBUILD命令, 所以现在这个Dockerfile在build时也会执行 ADD . /app/src 这个命令.</p></blockquote></li><li><p>ENTRYPOINT</p><blockquote><p>感觉 ENTRYPOINT 会比 CMD 更省资源, ENTRYPOINT 使用时用数组形式.如:<br>entrypoint [“/init.sh”, “/usr/bin/supervisord”, “-n”, “-c”, “/etc/supervisord.conf”]<br>/init.sh 是一个初始化脚本,初始化脚本内容大概为: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!<span class="regexp">/bin/</span>bash</span><br><span class="line">set -e</span><br><span class="line">执行一些初始化代码</span><br><span class="line">exec <span class="string">"$@"</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>最后要跟上exec “$@” ,这样才能让init.sh 脚本后的 supervisord被执行.</p></blockquote><ul><li>.dockerignore<br>.dockerignore文件中列的文件不会被 ADD或COPY 指令添加到容器中.</li></ul><h2 id="好用的docker镜像"><a href="#好用的docker镜像" class="headerlink" title="好用的docker镜像"></a>好用的docker镜像</h2><ul><li>jwilder/nginx-proxy 这是一个nginx反向代理.<blockquote><p>启动nginx反向代理:</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d -p <span class="number">80</span>:<span class="number">80</span> -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/tmp/</span>docker.sock -t --restart=always jwilder/nginx-proxy</span><br></pre></td></tr></table></figure><blockquote><p>再启动其他容器, 如: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e VIRTUAL_HOST=yourdomain.com -d tutum/apache-php</span><br></pre></td></tr></table></figure><blockquote><p>nginx的容器会监听其他容器的启动, 并根据VIRTUAL_HOST设置域名.这样可以通过 yourdomain.com 访问刚才启动的容器中的网站了.<br>tutum/apache-php 这个镜像是一个好用的apache环境.</p></blockquote><ul><li><p>清理docker</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info  <span class="comment">// 可以查看docker的信息, /var/lib/docker/devicemapper/devicemapper 目录下存放了docker的文件, 可以用du -h --max-depth=1 看文件的大小.</span></span><br></pre></td></tr></table></figure></li><li><p>删除为none的镜像,可以立马回收空间:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images --no-trunc| grep none | awk <span class="string">'&#123;print $3&#125;'</span> | xargs -r docker rmi</span><br></pre></td></tr></table></figure></li><li><p>删除退出了的容器:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="string">`docker ps -a | grep Exited | awk '&#123;print $1 &#125;’</span></span><br></pre></td></tr></table></figure><ul><li>删除没有用的镜像. （有容器运行的镜像不会被删除）:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="string">`docker images -aq`</span></span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(模板方法模式)</title>
      <link href="/2015/06/27/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/27/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(模板方法模式)<br><a id="more"></a></p><h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><blockquote><ul><li>模版方法模式是一种只需要集成就可以实现的非常简单的模式</li><li>模版方法模式是由两部分组成, 第一部分是抽象父类,第二部分是具体的实现子类</li></ul></blockquote><h2 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Beverrage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写brew方法'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写pourIncup方法'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写addCpndiments方法'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//默认需要调料</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Beverrage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customerWantsCondiments()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CoffeeWithHook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CoffeeWithHook.prototype = <span class="keyword">new</span> Beverrage();</span><br><span class="line"></span><br><span class="line">CoffeeWithHook.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水冲咖啡'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CoffeeWithHook.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子里面'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CoffeeWithHook.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CoffeeWithHook.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'请问需要添加调料吗?'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffeeWithHook = <span class="keyword">new</span> CoffeeWithHook();</span><br><span class="line">coffeeWithHook.init();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把水煮沸</span></span><br><span class="line"><span class="comment"> 用沸水冲咖啡</span></span><br><span class="line"><span class="comment"> 把咖啡倒进杯子里面</span></span><br><span class="line"><span class="comment"> 加糖和牛奶</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>Beverrage.prototype.init</code> 是模版方法,因为该方法中封装了子类的算法框架,它作为一个算法的模板,指导子类以何种顺序去执行哪些算法</li><li><code>Beverrage.prototype.brew</code> 等方法,如果粗心忘记编写<code>CoffeeWithHook.prototype.brew</code>方法,在程序运行时直接抛出一个异常</li><li>钩子方法的返回结果决定了模板方法后面部分的执行步骤(<code>customerWantsCondiments</code>),这样一来,程序就拥有了变化的可能</li></ul></blockquote><h2 id="非继承模板方法"><a href="#非继承模板方法" class="headerlink" title="非继承模板方法"></a>非继承模板方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> brew = param.brew || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写brew方法'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pourInCup = param.pourInCup || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写pourIncup方法'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addCondiments = param.addCondiments || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写addCpndiments方法'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    F.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> F;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Coffee = Beverage(&#123;</span><br><span class="line">    brew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用沸水冲咖啡'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pourInCup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子里面'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    addCondiments: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tea = Beverage(&#123;</span><br><span class="line">    brew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用沸水泡茶水'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pourInCup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'把茶倒进杯子里面'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    addCondiments: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">coffee.init();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把水煮沸</span></span><br><span class="line"><span class="comment"> 用沸水冲咖啡</span></span><br><span class="line"><span class="comment"> 把咖啡倒进杯子里面</span></span><br><span class="line"><span class="comment"> 加糖和牛奶</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line">tea.init();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把水煮沸</span></span><br><span class="line"><span class="comment"> 用沸水泡茶水</span></span><br><span class="line"><span class="comment"> 把茶倒进杯子里面</span></span><br><span class="line"><span class="comment"> 加柠檬</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式</strong></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(组合模式)</title>
      <link href="/2015/06/26/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/26/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(组合模式)<br><a id="more"></a></p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><blockquote><ul><li>命令模式只负责传递请求给叶对象,它的目的不在于控制对叶对象的访问</li><li>组合模式将对象,以表示”部分-整体”的层次结构.</li><li>组合模式通过对象的多态性表现,使得用户对单个对象和组合对象的使用具有一致性</li></ul></blockquote><h2 id="实例-扫描文件夹"><a href="#实例-扫描文件夹" class="headerlink" title="实例-扫描文件夹"></a>实例-扫描文件夹</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Folder = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.files = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.files.push(file);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始扫描文件夹: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file, files = <span class="keyword">this</span>.files; file = files[i++];) &#123;</span><br><span class="line">        file.scan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************File*************/</span></span><br><span class="line"><span class="keyword">var</span> File = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能添加文件'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始扫描文件:  '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder = <span class="keyword">new</span> Folder(<span class="string">'study'</span>);</span><br><span class="line"><span class="keyword">var</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JavaScript'</span>);</span><br><span class="line"><span class="keyword">var</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'angular'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file1 = <span class="keyword">new</span> File(<span class="string">'js'</span>);</span><br><span class="line"><span class="keyword">var</span> file2 = <span class="keyword">new</span> File(<span class="string">'ng'</span>);</span><br><span class="line"><span class="keyword">var</span> file3 = <span class="keyword">new</span> File(<span class="string">'设计模式'</span>);</span><br><span class="line"></span><br><span class="line">folder1.add(file1);</span><br><span class="line">folder2.add(file2);</span><br><span class="line"></span><br><span class="line">folder.add(folder1);</span><br><span class="line">folder.add(folder2);</span><br><span class="line">folder.add(file3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder3 = <span class="keyword">new</span> Folder(<span class="string">'Nodejs'</span>);</span><br><span class="line"><span class="keyword">var</span> file4 = <span class="keyword">new</span> File(<span class="string">'深入浅出Node.js'</span>);</span><br><span class="line">folder3.add(file4);</span><br><span class="line"></span><br><span class="line">folder.add(folder3);</span><br><span class="line"></span><br><span class="line">folder.scan();</span><br></pre></td></tr></table></figure><p><strong>同等对待组合对象和叶对象,给叶对象增加方法add,并且在调用这个方法时抛出一个异常来提醒客户</strong></p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><blockquote><ul><li>组合模式是一种聚合(HAS-A)模式,而不是父子关系(IS-A);</li><li>组合模式对一组叶对象的操作必须具有一致性</li></ul></blockquote><h2 id="引用父对象"><a href="#引用父对象" class="headerlink" title="引用父对象"></a>引用父对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Folder = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.files = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    file.parent = <span class="keyword">this</span>; <span class="comment">// 设置父对象</span></span><br><span class="line">    <span class="keyword">this</span>.files.push(file);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始扫描文件夹: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file, files = <span class="keyword">this</span>.files; file = files[i++];) &#123;</span><br><span class="line">        file.scan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Folder.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.parent) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> files = <span class="keyword">this</span>.parent.files, l = files.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = files[l];</span><br><span class="line">        <span class="keyword">if</span> (file === <span class="keyword">this</span>) &#123;</span><br><span class="line">            files.splice(l, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************File*************/</span></span><br><span class="line"><span class="keyword">var</span> File = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能添加文件'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始扫描文件:  '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">File.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.parent) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> files = <span class="keyword">this</span>.parent.files, l = files.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = files[l];</span><br><span class="line">        <span class="keyword">if</span> (file === <span class="keyword">this</span>) &#123;</span><br><span class="line">            files.splice(l, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder = <span class="keyword">new</span> Folder(<span class="string">'study'</span>);</span><br><span class="line"><span class="keyword">var</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JavaScript'</span>);</span><br><span class="line"><span class="keyword">var</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'angular'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file1 = <span class="keyword">new</span> File(<span class="string">'js'</span>);</span><br><span class="line"><span class="keyword">var</span> file2 = <span class="keyword">new</span> File(<span class="string">'ng'</span>);</span><br><span class="line"><span class="keyword">var</span> file3 = <span class="keyword">new</span> File(<span class="string">'设计模式'</span>);</span><br><span class="line"></span><br><span class="line">folder1.add(file1);</span><br><span class="line">folder2.add(file2);</span><br><span class="line"></span><br><span class="line">folder.add(folder1);</span><br><span class="line">folder.add(folder2);</span><br><span class="line">folder.add(file3);</span><br><span class="line"></span><br><span class="line">folder1.remove();</span><br><span class="line"></span><br><span class="line">folder.scan();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 开始扫描文件夹: study</span></span><br><span class="line"><span class="comment"> 开始扫描文件夹: angular</span></span><br><span class="line"><span class="comment"> 开始扫描文件:  ng</span></span><br><span class="line"><span class="comment"> 开始扫描文件:  设计模式</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="何时使用组合模式"><a href="#何时使用组合模式" class="headerlink" title="何时使用组合模式"></a>何时使用组合模式</h2><blockquote><ol><li>表示对象的部分-整体层次结构</li><li>客户希望统一对待树中的所有对象</li></ol></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(命令模式)</title>
      <link href="/2015/06/25/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/25/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(命令模式)<br><a id="more"></a></p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote><ul><li>命令模式中的命令(command)指的是一个执行某些特定事情的指令</li><li>命令模式常见的应用场景是:有时候需要向某些对象发送请求,但是不知道请求的接收者是谁,也不知道被请求的操作是是那么.此时希望用一种松耦合的方式来设计程序,使得请求发送者和请求接收者能够消除彼此间的耦合关系</li><li>command对象拥有更长的生命周期.对象的生命周期是跟初始请求无关的,因为请求已经被封装在command对象的方法中,成为了这个对象的行为</li><li>命令模式还支持撤销,排队等操作</li></ul></blockquote><h2 id="菜单程序实例"><a href="#菜单程序实例" class="headerlink" title="菜单程序实例"></a>菜单程序实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">btn, command</span>) </span>&#123;</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            receiver.refresh();</span><br><span class="line">        &#125;,</span><br><span class="line">        undo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand =RefreshMenuBarCommand(MenuBar);</span><br><span class="line">setCommand(<span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>), refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><p><strong>除了执行命令外,还提供撤销等命令操作,所以把执行函数写成execute方法</strong></p><h2 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h2><p><strong>宏命令是一组几何,通过执行宏命令的方式,可以一次执行一批命令</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openPcCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开电脑'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'登录QQ'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义宏命令 MacroCommand</span></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        commandsList:[],</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.commandsList.push(command);</span><br><span class="line">        &#125;,</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, command; command= <span class="keyword">this</span>.commandsList[i++]; ) &#123;</span><br><span class="line">                command.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add(closeDoorCommand);</span><br><span class="line">macroCommand.add(openPcCommand);</span><br><span class="line">macroCommand.add(openQQCommand);</span><br><span class="line"></span><br><span class="line">macroCommand.execute();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 关门</span></span><br><span class="line"><span class="comment"> 开电脑</span></span><br><span class="line"><span class="comment"> 登录QQ</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><h2 id="智能命令和傻瓜命令"><a href="#智能命令和傻瓜命令" class="headerlink" title="智能命令和傻瓜命令"></a>智能命令和傻瓜命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol><li>一般来说,命令模式都会在command对象中保存一个接收者来负责真正执行客户的请求,这种情况下的命令是”傻瓜式”的</li><li><code>closeDoorCommand</code>中没有包含任何 <code>receiver</code>的信息,它本身就包揽了执行请求的行为(命令对象可以直接实现请求的定义),叫做智能命令</li></ol></blockquote><h2 id="智能命令和策略模式"><a href="#智能命令和策略模式" class="headerlink" title="智能命令和策略模式"></a>智能命令和策略模式</h2><blockquote><ul><li>策略模式指向的问题域更小,所有策略对象的目标总是一致的,它们只是达到这个目标的不同手段,它们的内部实现是针对算法而言的</li><li>智能命令模式指向的问题域更广,command对象解决的目标更具有发散性.命令模式还可以完成撤销,排队等功能</li></ul></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(发布-订阅模式)</title>
      <link href="/2015/06/24/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/24/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(发布-订阅模式)<br><a id="more"></a></p><h1 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h1><p><strong>定义对象间一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖它的对象都将得到通知.在js中,用事件模型代替传统的发布-订阅模式</strong></p><h2 id="发布-订阅模式的通用实现"><a href="#发布-订阅模式的通用实现" class="headerlink" title="发布-订阅模式的通用实现"></a>发布-订阅模式的通用实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">    clientList: [],</span><br><span class="line">    listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clientList[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有对应的绑定消息</span></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">            <span class="comment">// arguments 是 trigger带上的参数</span></span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key对应的消息么有被人订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 反向遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                    <span class="comment">// 删除订阅回调函数</span></span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i  <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">installEvent(salesOffices);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'squareMeter88 fn1: '</span> + price);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, fn1);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'squareMeter88 fn2: '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.remove(<span class="string">'squareMeter88'</span>, fn1);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">20000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter100'</span>, <span class="number">30000</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> squareMeter88 fn2: 20000</span></span><br><span class="line"><span class="comment"> 30000</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="网站登录实例"><a href="#网站登录实例" class="headerlink" title="网站登录实例"></a>网站登录实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line">$.ajax(<span class="string">'http://XXXXXX?login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    login.trigger(<span class="string">'loginSucc'</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> header = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        header.setAvatar(data.avatar);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'设置header模块的头像'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nav = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        header.setAvatar(data.avatar);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'设置nav模块的头像'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一天, 又增加了一个新的行为</span></span><br><span class="line"><span class="keyword">var</span> address = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        address.refresh(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        refresh: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'刷新地址列表'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h2 id="全局的发布-订阅对象"><a href="#全局的发布-订阅对象" class="headerlink" title="全局的发布-订阅对象"></a>全局的发布-订阅对象</h2><blockquote><p>订阅者不需要了解消息来自哪个发布者,发布者也不知道消息会推送给哪些订阅者,Event作为一个类似”中介者”的角色,把订阅者和发布者联系起来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove;</span><br><span class="line">    listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].push(fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key对应的消息么有被人订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 反向遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                    <span class="comment">// 删除订阅回调函数</span></span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen: listen,</span><br><span class="line">        trigger: trigger,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.trigger(<span class="string">'squareMeter88'</span>, <span class="number">20000</span>);   <span class="comment">// 20000</span></span><br></pre></td></tr></table></figure><h2 id="全局事件命名冲突"><a href="#全局事件命名冲突" class="headerlink" title="全局事件命名冲突"></a>全局事件命名冲突</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Event,</span><br><span class="line">        _default = <span class="string">'default'</span>;</span><br><span class="line"></span><br><span class="line">    Event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _listen,</span><br><span class="line">            _trigger,</span><br><span class="line">            _remove,</span><br><span class="line">            _shift = [].shift,</span><br><span class="line">            _unshift = [].unshift,</span><br><span class="line">            namespaceCache = &#123;&#125;,</span><br><span class="line">            _create,</span><br><span class="line">            each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> n = arr[i];</span><br><span class="line">                    ret = fn.call(n, i, n);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        _listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, cache</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">                cache[key] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            cache[key].push(fn);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        _remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, cache, fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = cache[key].length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cache[key][i] === fn) &#123;  <span class="comment">// 原书为 cache[key] === fn, 错误!</span></span><br><span class="line">                            <span class="comment">// 删除订阅回调函数</span></span><br><span class="line">                            cache[key].splice(i, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache[key] = [];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        _trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cache = _shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">var</span> key = _shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">var</span> stack = cache[key];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!stack || !stack.length) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> each(stack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.apply(_this, args);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        _create = <span class="function"><span class="keyword">function</span>(<span class="params">namespace</span>) </span>&#123;</span><br><span class="line">            namespace = namespace || _default;</span><br><span class="line">            <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> offlineStack = []; <span class="comment">//离线事件</span></span><br><span class="line">            <span class="keyword">var</span> ret = &#123;</span><br><span class="line">                listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                    _listen(key, fn, cache);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (offlineStack === <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (last === <span class="string">'last'</span>) &#123;</span><br><span class="line">                        offlineStack.length &amp;&amp; offlineStack.pop()();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        each(offlineStack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">this</span>();</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    offlineStack = <span class="literal">null</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                    _remove(key, cache);</span><br><span class="line">                    <span class="keyword">this</span>.listen(key, fn, last);</span><br><span class="line">                &#125;,</span><br><span class="line">                remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">                    _remove(key, cache, fn);</span><br><span class="line">                &#125;,</span><br><span class="line">                trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> fn,</span><br><span class="line">                        args,</span><br><span class="line">                        _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">                    _unshift.call(<span class="built_in">arguments</span>, cache);</span><br><span class="line">                    args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">                    fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> _trigger.apply(_this, args);</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (offlineStack) &#123;</span><br><span class="line">                        <span class="keyword">return</span> offlineStack.push(fn);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> fn();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> namespace ?</span><br><span class="line">                (namespaceCache[namespace] ?</span><br><span class="line">                    namespaceCache[namespace] : namespaceCache[namespace] = ret)</span><br><span class="line">                : ret;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            create: _create,</span><br><span class="line">            one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.one(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.remove(key, fn);</span><br><span class="line">            &#125;,</span><br><span class="line">            listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.listen(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.trigger.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Event;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(price);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>, fn1);</span><br><span class="line">Event.remove(<span class="string">'squareMeter88'</span>, fn1);</span><br><span class="line"></span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2: '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Event.trigger(<span class="string">'squareMeter88'</span>, <span class="number">20000</span>);   <span class="comment">// fn2: 20000</span></span><br></pre></td></tr></table></figure><h2 id="发布-订阅模式-观察者模式-优点"><a href="#发布-订阅模式-观察者模式-优点" class="headerlink" title="发布-订阅模式(观察者模式)优点:"></a>发布-订阅模式(观察者模式)优点:</h2><ol><li>时间上解耦</li><li>对象之间的解耦</li></ol><h2 id="发布-订阅模式-观察者模式-缺点"><a href="#发布-订阅模式-观察者模式-缺点" class="headerlink" title="发布-订阅模式(观察者模式)缺点:"></a>发布-订阅模式(观察者模式)缺点:</h2><ol><li>创建订阅者本身要消耗一定的时间个内存</li><li>订阅一个消息后,也许此消息最后都未发生,但这个订阅者始终会存在内存中</li><li>发布-订阅模式虽然可以弱化对象之间的联系,但是如果过度使用的话,对象和对象之间的必要联系也将深埋在背后,会导致程序难以更重维护和理解</li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(代理模式,迭代器模式)</title>
      <link href="/2015/06/23/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/06/23/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(代理模式,迭代器模式)<br><a id="more"></a></p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><strong>代理模式是为一个对象提供一个代替品或占位符,以便控制对它的访问</strong></p><blockquote><p>往往不需要猜测是否需要代理模式,当正真发现不方便直接访问某个对象的时候,再编写代理也不迟</p></blockquote><h3 id="虚拟代理实现图片加载"><a href="#虚拟代理实现图片加载" class="headerlink" title="虚拟代理实现图片加载"></a>虚拟代理实现图片加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            imgNode.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image;</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            myImage.setSrc(<span class="string">'http://upload.xinshangshangxin.com/o_19n9lj3a480nl2l1ie7up31ckc9.png'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">'http://upload.xinshangshangxin.com/o_19n9ljafs96hpif1o401mci1r7c18.jpg'</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>符合单一职责原则;MyImage对象负责给img对象设置src, proxyImage负责预加载图片</strong></li><li><strong>符合开放封闭原则;没有改变或者增加myImage的接口,但是通过代理对象,实际上给系统添加了新的行为</strong></li><li><strong>代理和本体接口的一致性. 如果代理对象和本体对象都为一个函数(函数也是对象),函数必然都能执行,则可以认为它们也具有一致的接口</strong></li></ul><h3 id="虚拟代理合并HTTP请求"><a href="#虚拟代理合并HTTP请求" class="headerlink" title="虚拟代理合并HTTP请求"></a>虚拟代理合并HTTP请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> synchronousFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始同步文件,id为: '</span> + id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySynchronousFile = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = [];</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        cache.push(id);</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            synchronousFile(cache.join(<span class="string">','</span>));</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            cache.length = <span class="number">0</span>;</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; c=checkbox[i++]; ) &#123;</span><br><span class="line">    c.onclick= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">            proxySynchronousFile(<span class="keyword">this</span>.id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* html</span></span><br><span class="line"><span class="comment"> &lt;input type="checkbox" id="1"&gt;1</span></span><br><span class="line"><span class="comment"> &lt;input type="checkbox" id="2"&gt;2</span></span><br><span class="line"><span class="comment"> &lt;input type="checkbox" id="3"&gt;3</span></span><br><span class="line"><span class="comment"> &lt;input type="checkbox" id="4"&gt;4</span></span><br><span class="line"><span class="comment"> &lt;input type="checkbox" id="5"&gt;5</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="缓存代理–计算乘积"><a href="#缓存代理–计算乘积" class="headerlink" title="缓存代理–计算乘积"></a>缓存代理–计算乘积</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始计算乘积'</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">        a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mult(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">mult(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 依然重新计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = [].join.call(<span class="built_in">arguments</span>, <span class="string">','</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cache[args] = mult.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">proxyMult(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">proxyMult(<span class="number">2</span>, <span class="number">3</span>);       <span class="comment">// 只计算第一次,第二次使用缓存</span></span><br></pre></td></tr></table></figure><p><strong>增加缓存代理, mult函数可以继续专注于自身的职责(计算成绩), 缓存的功能能够有代理对象实现</strong></p><h3 id="用高阶函数动态创建代理"><a href="#用高阶函数动态创建代理" class="headerlink" title="用高阶函数动态创建代理"></a>用高阶函数动态创建代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*****计算成绩*******/</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">        a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********计算加和************/</span></span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">        a = a + <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****创建缓存代理工厂*****/</span></span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = [].join.call(<span class="built_in">arguments</span>, <span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cache[args] = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory(mult);</span><br><span class="line"><span class="keyword">var</span> proxyPlus = createProxyFactory(plus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><blockquote><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素,而又不需要暴露该对象的内部表示.迭代器模式可以把迭代的过程从业务逻辑中分离出来,在使用迭代器模式之后,即使不关心对象的内部构造,也可以按顺序访问其中的每个元素</p></blockquote><h2 id="实现自己的迭代器"><a href="#实现自己的迭代器" class="headerlink" title="实现自己的迭代器"></a>实现自己的迭代器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        cb.call(arr[i], i, arr[i]); <span class="comment">// 把下标  和 元素 当作参数传给 cb</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, n);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h2><blockquote><p>内部迭代器在调用的时候非常方便,外界不用关心迭代器内部的实现,跟迭代器的交互也仅仅是一次初始调用(优点也是缺点)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'arr1 和 arr2 不相等'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    each(arr1, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n !== arr2[i]) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'arr1 和 arr2 不相等'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arr1 和 arr2 相等'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compare([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]); <span class="comment">// throw new Error('arr1 和 arr2 不相等');</span></span><br></pre></td></tr></table></figure><h2 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h2><blockquote><p>外部迭代器必须显示的请求迭代下一个元素<br>外部迭代器增加了一些调用的复杂度,但相对也增强了迭代器的灵活性,我们可以手工控制迭代的工程或者顺序</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current += <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current &gt;= arr.length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[current];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: next,</span><br><span class="line">        isDone: isDone,</span><br><span class="line">        getCurrItem: getCurrItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iterator1.getCurrItem() !== iterator2.getCurrItem()) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'iterator1 和 iterator2 不相等'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        iterator1.next();</span><br><span class="line">        iterator2.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iterator1.isDone() &amp;&amp; iterator2.isDone()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'iterator1 和 iterator2 相等'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'iterator1 和 iterator2 不相等'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator1 = <span class="keyword">new</span> Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> iterator2 = <span class="keyword">new</span> Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">compare(iterator1, iterator2); <span class="comment">// iterator1 和 iterator2 相等;</span></span><br></pre></td></tr></table></figure><h2 id="中止迭代器"><a href="#中止迭代器" class="headerlink" title="中止迭代器"></a>中止迭代器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cb(i, arr[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n);  <span class="comment">// 1  2  3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> supportFlash = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'TXFTNActivex.FTMUpload'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file"&gt;'</span>;</span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">'body'</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = <span class="built_in">arguments</span>[i++]; ) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadObj = fn();</span><br><span class="line">        <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uploadObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(getActiveUploadObj, getFlashUploadObj, getFormUploadObj);</span><br></pre></td></tr></table></figure><p><strong>迭代器模式是一种相对简单的模式,简单到很多时候不认为它是一种设计模式</strong></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(高阶函数)</title>
      <link href="/2015/06/22/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2015/06/22/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>curry,uncurry,throttle,time_chunk,lazy_load,<br><a id="more"></a></p><h2 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            [].push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curryAdd = currying(add);</span><br><span class="line">curryAdd(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(curryAdd());</span><br></pre></td></tr></table></figure><h2 id="uncurry"><a href="#uncurry" class="headerlink" title="uncurry"></a>uncurry</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> _this.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Function</span>.prototype.call.apply(_this, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> push = [].push.uncurrying();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    length: <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">push(obj, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; '0': 0, '1': 2, length: 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _fn = fn;           <span class="comment">// 是不是多余了呢?</span></span><br><span class="line">    <span class="keyword">var</span> isFirst = <span class="literal">true</span>; <span class="comment">//第一次调用不需要延迟</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;      <span class="comment">// 是不是多于了呢?  this ==== window</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">            _fn.apply(_this, args);</span><br><span class="line">            <span class="keyword">return</span> isFirst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            _fn.apply(_this, args);</span><br><span class="line">        &#125;, interval || <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="time-chunk"><a href="#time-chunk" class="headerlink" title="time_chunk"></a>time_chunk</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param arr 需要的数据</span></span><br><span class="line"><span class="comment"> * @param fn  函数</span></span><br><span class="line"><span class="comment"> * @param [count] 每次创建多少个数据,默认一个</span></span><br><span class="line"><span class="comment"> * @param [interval] 单位时间,默认200ms</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span>(<span class="params">arr, fn, count, interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span>, arr.length); i++) &#123;</span><br><span class="line">            obj = arr.shift();</span><br><span class="line">            fn(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        t = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clearInterval(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            start();</span><br><span class="line">        &#125;, interval || <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> arr =[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderFrindsList = timeChunk(arr, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = n;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">renderFrindsList();</span><br></pre></td></tr></table></figure><h2 id="lazy-load"><a href="#lazy-load" class="headerlink" title="lazy_load"></a>lazy_load</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEven = <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">        addEven = <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">            ele.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">        addEven = <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">            ele.attachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addEven(ele, type, handler);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式笔记(单例和策略)</title>
      <link href="/2015/06/22/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8D%95%E4%BE%8B%E5%92%8C%E7%AD%96%E7%95%A5/"/>
      <url>/2015/06/22/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8D%95%E4%BE%8B%E5%92%8C%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>JS设计模式笔记(单例和策略)<br><a id="more"></a></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>单例模式的核心是确保只有一个实例,并提供全局访问</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML=<span class="string">'我是登录框'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).onlick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>创建实例对象的职责和管理单例的职责分别放置在2个方法里,这两个方法可以独立变化而互不影响</strong></p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>策略模式的目的是将算法的使用和算法的实现分离</p></blockquote><blockquote><p>一个基于策略模式的程序至少有两部分组成.</p><ol><li>一组策略类,策略类封装了具体的算法,并负责具体的计算过程</li><li>环境类Context, Context接受客户请求,随后把请求委托给某一策略类</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------实例一 计算奖金----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">'S'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'A'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'B'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'S'</span>, <span class="number">20000</span>));</span><br></pre></td></tr></table></figure><p><strong>calculateBonus并没有计算奖金的能力,而是把这个职责委托给了某个策略对象,每个策略对象负责的算法已经被各自封装在对象内部了</strong></p><hr><blockquote><p>策略模式也可以用来封装一系列”业务规则”.只要这些业务规则指向的目标一致,并且可以被替换使用,就可以使用策略模式封装它们;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例二 表单校验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value, errMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value === <span class="string">''</span> || value === <span class="literal">undefined</span> || value === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> errMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    minLen: <span class="function"><span class="keyword">function</span>(<span class="params">value, len, errMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.length &lt; len) &#123;</span><br><span class="line">            <span class="keyword">return</span> errMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">value, rules</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[i]; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> strategyArr = rule.strategy.split(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">var</span> ruleName = strategyArr.shift();</span><br><span class="line">            strategyArr.unshift(value);</span><br><span class="line">            strategyArr.push(rule.errMsg || (rule + <span class="string">'错误'</span>));</span><br><span class="line">            _this.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> strategies[ruleName].apply(<span class="literal">null</span>, strategyArr);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(rule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFun; validatorFun = <span class="keyword">this</span>.cache[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = validatorFun();</span><br><span class="line">        <span class="keyword">if</span> (errMsg) &#123;</span><br><span class="line">            <span class="keyword">return</span> errMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkreg</span>(<span class="params">userName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">    validator.add(userName, [&#123;</span><br><span class="line">        strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">        errMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        strategy: <span class="string">'minLen:3'</span>,</span><br><span class="line">        errMsg: <span class="string">'最小长度为3'</span></span><br><span class="line">    &#125;]);</span><br><span class="line">    <span class="keyword">var</span> errMsg = validator.start();</span><br><span class="line">    <span class="built_in">console</span>.log(errMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkreg(<span class="string">''</span>);       <span class="comment">// 用户名不能为空</span></span><br><span class="line">checkreg(<span class="string">'aa'</span>);     <span class="comment">// 最小长度为3</span></span><br></pre></td></tr></table></figure><h3 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h3><ol><li>策略模式利用 组合,委托和多态等技术和思想,可以有效的避免多重条件选择语句</li><li>策略模式提供了对开方-封闭原则的完美支持,将算法封装在独立的strategy中,使得他们易于切换,易于理解,易于扩展</li><li>策略模式的算法也可以复用在系统的其他地方,从而必选许多重复的复制粘贴工作</li><li>在策略模式中利用组合和委托来让Context拥有算法的执行能力,这也是继承的一种更轻便的替代方案</li></ol><h3 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a>策略模式的缺点</h3><ol><li>增加了许多策略类/策略对象</li><li>必须了解所有的strategy,知道其不同点</li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><em>实体书:</em> <code>JavaScript设计模式与开发实践(曾探)</code></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux终端翻墙</title>
      <link href="/2015/06/21/linux%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99/"/>
      <url>/2015/06/21/linux%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<p>linux终端翻墙<br><a id="more"></a></p><h2 id="shadowsocks本地版"><a href="#shadowsocks本地版" class="headerlink" title="shadowsocks本地版"></a>shadowsocks本地版</h2><p><a href="http://dl.chenyufei.info/shadowsocks/latest/" target="_blank" rel="noopener">http://dl.chenyufei.info/shadowsocks/latest/</a><br>下载你服务器对应的版本<code>shadowsocks-local-linux64-1.1.4.gz</code><br><strong>解压</strong></p><blockquote><p><code>gunzip shadowsocks-local-linux64-1.1.4.gz</code></p></blockquote><p><strong>添加权限</strong></p><blockquote><p><code>chmod a+x shadowsocks-local-linux64-1.1.4</code></p></blockquote><p><strong>运行</strong></p><blockquote><p><code>./shadowsocks-local-linux64-1.1.4 -d=true -k=&quot;服务器的密码&quot; -m=&quot;aes-256-cfb&quot; -l=1080 -p=服务器的端口 -s=&quot;服务器的ip&quot;</code></p></blockquote><h2 id="安装代理-二选一"><a href="#安装代理-二选一" class="headerlink" title="安装代理(二选一)"></a>安装代理(二选一)</h2><h3 id="安装proxychains"><a href="#安装proxychains" class="headerlink" title="安装proxychains."></a>安装proxychains.</h3><p><a href="https://github.com/shadowsocks/shadowsocks/wiki/Using-Shadowsocks-with-Command-Line-Tools" target="_blank" rel="noopener">原文地址</a></p><p>安装:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install proxychains</span><br></pre></td></tr></table></figure></p><p>新建文件 <code>~/.proxychains/proxychains.conf</code>,<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">strict_chain</span><br><span class="line">proxy_dns </span><br><span class="line">remote_dns_subnet <span class="number">224</span></span><br><span class="line">tcp_read_time_out <span class="number">15000</span></span><br><span class="line">tcp_connect_time_out <span class="number">8000</span></span><br><span class="line">localnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">quiet_mode</span><br><span class="line"></span><br><span class="line">[ProxyList]</span><br><span class="line">socks5  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1080</span></span><br></pre></td></tr></table></figure></p><p>使用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl https:<span class="comment">//www.twitter.com/</span></span><br><span class="line">proxychains4 git push origin master</span><br></pre></td></tr></table></figure></p><h3 id="安装tsocks"><a href="#安装tsocks" class="headerlink" title="安装tsocks"></a>安装tsocks</h3><blockquote><p><code>apt-get install tsocks</code><br><code>vi /etc/tsocks.conf</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local = 192.168.1.0/255.255.255.0  #local表示本地的网络，也就是不使用socks代理的网络</span><br><span class="line">local = <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">server = 127.0.0.1   #socks服务器的IP</span><br><span class="line">server_type = 5  #socks服务版本</span><br><span class="line">server_port = <span class="number">1080</span>  ＃socks服务使用的端口</span><br></pre></td></tr></table></figure><blockquote><p>在要使用的命令前加上 <code>tsocks</code> 即可<br>例如: <code>tsocks apt-get update</code></p></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://www.joecen.com/2008/02/17/config-apt-get-use-socks-proxy/" target="_blank" rel="noopener">配置apt-get使用socks代理</a></li><li><a href="http://www.ahlinux.com/start/base/21679.html" target="_blank" rel="noopener">Linux下配置ShadowSocks(Server&amp;Client)</a></li><li><a href="http://www.51testing.com/html/38/225738-246084.html" target="_blank" rel="noopener">tsocks简介、安装、配置及遇到的问题</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记(2)</title>
      <link href="/2015/06/19/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2015/06/19/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<p>Docker学习笔记[私有registry, 配置多台容器, Jenkins]<br><a id="more"></a></p><h2 id="docker-私有registry"><a href="#docker-私有registry" class="headerlink" title="docker 私有registry"></a>docker 私有registry</h2><ul><li><p>启动 registry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> --name registry registry:<span class="number">0.9</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li><li><p>镜像打tag<br><strong>docker tag IMAGE[:TAG] [REGISTRY:HOST/][USERNAME/]NAME[:TAG]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu/ubuntu:<span class="number">14.04</span> <span class="number">10.221</span><span class="number">.238</span><span class="number">.100</span>:<span class="number">5000</span>/ubuntu/ubuntu:<span class="number">14.04</span></span><br></pre></td></tr></table></figure></li><li><p>push到Registry：</p></li></ul><p><strong>可能遇到 无法push image到私有仓库</strong></p><blockquote><p>编辑 /etc/default/docker<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"--insecure-registry ip地址:端口号"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>service docker restart</p></blockquote><h2 id="配置多台容器"><a href="#配置多台容器" class="headerlink" title="配置多台容器"></a>配置多台容器</h2><ul><li><code>docker-compose.yml</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">   image: mysql:<span class="number">5.5</span></span><br><span class="line">   ports:</span><br><span class="line">     - <span class="string">"3306:3306"</span></span><br><span class="line">   volumes:</span><br><span class="line">     - <span class="regexp">/var/</span>lib/docker/vfs/dir/dataxc:<span class="regexp">/var/</span>lib/mysql</span><br><span class="line">   hostname: mydb.server.com</span><br><span class="line"></span><br><span class="line">tomcat:</span><br><span class="line">   image: tomcat:<span class="number">7.0</span><span class="number">.55</span></span><br><span class="line">   ports:</span><br><span class="line">      - <span class="string">"8080:8080"</span></span><br><span class="line">   links:</span><br><span class="line">      - mysql:db</span><br><span class="line">   environment:</span><br><span class="line">      - TOMCAT_USER=admin</span><br><span class="line">      - TOMCAT_PASS=admin</span><br><span class="line">   hostname: tomcat.server.com</span><br></pre></td></tr></table></figure><ul><li><p>启动多个容器<br><code>docker-compose up -d</code></p></li><li><p>停止多个容器<br><code>docker-compose stop</code></p></li><li><p>查看容器<br><code>docker-compose ps</code></p></li><li><p>删除多个容器<br><code>docker-compose rm</code></p></li></ul><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p><code>docker create</code> 只创建容器，不启动</p><blockquote><p>安装<a href="http://pkg.jenkins-ci.org/debian/" target="_blank" rel="noopener">http://pkg.jenkins-ci.org/debian/</a></p></blockquote><blockquote><p>启动</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">8080</span>:<span class="number">8080</span> --name jenkins -v /usr/bin/docker:<span class="regexp">/usr/</span>bin/docker -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock jenkins</span><br></pre></td></tr></table></figure><p><strong>遇到<code>dial unix /var/run/docker.sock: permission denied.</code>解决办法:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo rm -rf /<span class="keyword">var</span>/run/docker.sock/</span><br><span class="line">(docker.sock had somehow been created <span class="keyword">as</span> a directory - not sure how)</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo chmod <span class="number">777</span> /<span class="keyword">var</span>/run/docker.sock</span><br><span class="line"></span><br><span class="line">然后再启动</span><br></pre></td></tr></table></figure></p><h3 id="默认jenkins不安装git"><a href="#默认jenkins不安装git" class="headerlink" title="默认jenkins不安装git"></a>默认jenkins不安装git</h3><h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><blockquote><p>系统管理”-&gt;”管理插件”中找到”可选插件”选项卡,左上角的过滤搜索窗口中可以用输入Git来查找。<br>选择git plugin，jenkins会自动为我们添加其依赖的插件</p></blockquote><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><blockquote><p>系统管理”-&gt;”管理插件”中找到”高级”, 然后去 <a href="http://updates.jenkins-ci.org/download/plugins" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins</a> 下载 <code>credentials.hpi</code> <code>git-client.hpi</code> <code>scm-api.hpi</code> <code>git.hpi</code>, 并依次安装,最后记得重启jenkins</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">REGISTRY_URL=<span class="number">10.221</span><span class="number">.238</span><span class="number">.100</span>:<span class="number">5000</span></span><br><span class="line">cp /root/apache-maven<span class="number">-3.3</span><span class="number">.3</span>-bin.tar.gz $WORKSPACE/maven</span><br><span class="line">docker build -t csphere/maven:<span class="number">3.3</span><span class="number">.3</span> $WORKSPACE/maven</span><br><span class="line"><span class="keyword">if</span> docker ps -a | grep -i maven ; then</span><br><span class="line">   docker rm -f maven</span><br><span class="line">fi</span><br><span class="line">docker create --name maven csphere/maven3<span class="number">.3</span><span class="number">.3</span></span><br><span class="line">docker cp maven:<span class="regexp">/hello/</span>target/hello.war $WORKSPACE/hello</span><br><span class="line">docker build -t $REGSITRY_URL/csphere/hello:<span class="number">1.0</span> $WORKSPACE/hello</span><br><span class="line">docker push $REGSITRY_URL/csphere/hello:<span class="number">1.0</span></span><br><span class="line"><span class="keyword">if</span> docker ps -a | gerp -i hello; then</span><br><span class="line">   docker rm -f hello</span><br><span class="line">fi</span><br><span class="line">docker run -d -p <span class="number">80</span>:<span class="number">8080</span> --name hello $REGSITRY_URL/csphere/hello:<span class="number">1.0</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://stackoverflow.com/questions/26710153/remote-access-to-a-private-docker-registry" target="_blank" rel="noopener">http://stackoverflow.com/questions/26710153/remote-access-to-a-private-docker-registry</a></li><li><a href="https://discuss.csphere.cn/" target="_blank" rel="noopener">https://discuss.csphere.cn/</a></li><li><a href="http://blog.csdn.net/disappearedgod/article/details/43406019" target="_blank" rel="noopener">http://blog.csdn.net/disappearedgod/article/details/43406019</a></li><li><a href="http://updates.jenkins-ci.org/download/plugins" target="_blank" rel="noopener">git插件下载地址</a></li><li><a href="http://blog.csdn.net/csfreebird/article/details/7899629" target="_blank" rel="noopener">http://blog.csdn.net/csfreebird/article/details/7899629</a></li><li><a href="https://github.com/gliderlabs/registrator/issues/35#issuecomment-101493655" target="_blank" rel="noopener">dial unix /var/run/docker.sock: permission denied解决办法</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS $http踩坑(2)</title>
      <link href="/2015/06/17/AngularJS%E8%B8%A9%E5%9D%91-2/"/>
      <url>/2015/06/17/AngularJS%E8%B8%A9%E5%9D%91-2/</url>
      
        <content type="html"><![CDATA[<p>AngularJS使用$http出现options请求<br><a id="more"></a></p><h1 id="AngularJS中的-http自定义headers之后的配置"><a href="#AngularJS中的-http自定义headers之后的配置" class="headerlink" title="AngularJS中的$http自定义headers之后的配置"></a>AngularJS中的$http自定义headers之后的配置</h1><h2 id="客户端需要设置-withCredentials"><a href="#客户端需要设置-withCredentials" class="headerlink" title="客户端需要设置 withCredentials"></a>客户端需要设置 <code>withCredentials</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">    url: SERVERURL + <span class="string">'/'</span>,</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="comment">// 此处是自定义的头</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'x-access-token'</span>: localStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 需要设置 withCredentials: true</span></span><br><span class="line">    withCredentials: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="服务器配置-express为例"><a href="#服务器配置-express为例" class="headerlink" title="服务器配置(express为例)"></a>服务器配置(express为例)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">router</span><br><span class="line">    <span class="comment">// angular为首先发送用OPTIONS方法(做是的是预检查，从服务器确认是否可以继续)</span></span><br><span class="line">    .options(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 设置 Credentials 为允许</span></span><br><span class="line">            res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 设置 Methods</span></span><br><span class="line">            res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, GET, PUT, DELETE, OPTIONS'</span>);</span><br><span class="line">            <span class="comment">// 添加允许的请求头类型!!</span></span><br><span class="line">            res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">'x-access-token, Content-Type'</span>); </span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 使下面的get请求可以返回(配置和上面一样)</span></span><br><span class="line">    .use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, GET, PUT, DELETE, OPTIONS'</span>);</span><br><span class="line">        res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">'x-access-token'</span>); </span><br><span class="line">        next();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 真正的请求  </span></span><br><span class="line">    .get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// doSomething</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="/img/angularjs/http1.png" alt="options请求" title="" class="">                <p>options请求</p>            </figure><figure class="image-box">                <img src="/img/angularjs/http2.png" alt="get请求" title="" class="">                <p>get请求</p>            </figure><h1 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h1><h2 id="客户端不变"><a href="#客户端不变" class="headerlink" title="客户端不变"></a>客户端不变</h2><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.options(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 添加  Access-Control-Allow-Origin, 其它不变</span></span><br><span class="line">        <span class="comment">// 注意这里不能使用 *</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, req.headers.origin);</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, GET, PUT, DELETE, OPTIONS'</span>);</span><br><span class="line">        res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">'x-access-token, Content-Type'</span>); </span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, req.headers.origin);</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, GET, PUT, DELETE, OPTIONS'</span>);</span><br><span class="line">        res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">'x-access-token'</span>);</span><br><span class="line">        next();</span><br><span class="line">   &#125;)</span><br><span class="line">   .get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// doSomething</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>请求的时候不能使用localhost,请上传服务器在尝试跨域</strong></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://camnpr.com/server/2007.html" target="_blank" rel="noopener">http://camnpr.com/server/2007.html</a></li><li><a href="http://blog.csdn.net/ligang2585116/article/details/44806853" target="_blank" rel="noopener">http://blog.csdn.net/ligang2585116/article/details/44806853</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS $http踩坑(1)</title>
      <link href="/2015/06/16/AngularJS%E8%B8%A9%E5%9D%91-1/"/>
      <url>/2015/06/16/AngularJS%E8%B8%A9%E5%9D%91-1/</url>
      
        <content type="html"><![CDATA[<p>AngularJS使用$http.post之后后台无法收到数据<br><a id="more"></a></p><p><strong>AngularJS中的post与jQuery中post的区别</strong></p><h1 id="对比"><a href="#对比" class="headerlink" title="对比:"></a>对比:</h1><blockquote><p>AngularJS：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$http.post(<span class="string">'/myserver'</span>, &#123;<span class="attr">username</span>: <span class="string">'shang'</span>&#125;)</span><br><span class="line">.success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>jQuery</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'/myserver'</span>, &#123;<span class="attr">username</span>: <span class="string">'shang'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>后台Express接受</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.body.username <span class="comment">// jq: 'shang'; ng: undefined</span></span><br></pre></td></tr></table></figure><p><strong>jq会把作为JSON对象的序列化, 而Angular不会</strong></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h1><ul><li>引入jquery (不推荐)</li><li><p>指定header</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myobject = &#123;<span class="attr">username</span>: <span class="string">'shang'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObjecttoParams</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        p.push(key + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(obj[key]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.join(<span class="string">'&amp;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$http(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: ObjecttoParams(myobject),</span><br><span class="line">    headers: &#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>angular-post-fix</code></p></li></ul><blockquote><p><a href="https://gist.github.com/JensRantil/5713606" target="_blank" rel="noopener">https://gist.github.com/JensRantil/5713606</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modifies $httpProvider for correct server communication (POST variable format)</span></span><br><span class="line">angular.module(<span class="string">'http-post-fix'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params">$httpProvider</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// This code is taken from http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Use x-www-form-urlencoded Content-Type</span></span><br><span class="line">  $httpProvider.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Override $http service's default transformRequest</span></span><br><span class="line">  $httpProvider.defaults.transformRequest = [<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The workhorse; converts an object to x-www-form-urlencoded serialization.</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; obj</span></span><br><span class="line"><span class="comment">     * @return &#123;String&#125;</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">var</span> param = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> query = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">var</span> name, value, fullSubName, subValue, innerObj, i;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span>(name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        value = obj[name];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;value.length; ++i) &#123;</span><br><span class="line">            subValue = value[i];</span><br><span class="line">            fullSubName = name + <span class="string">'['</span> + i + <span class="string">']'</span>;</span><br><span class="line">            innerObj = &#123;&#125;;</span><br><span class="line">            innerObj[fullSubName] = subValue;</span><br><span class="line">            query += param(innerObj) + <span class="string">'&amp;'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span>(subName <span class="keyword">in</span> value) &#123;</span><br><span class="line">            subValue = value[subName];</span><br><span class="line">            fullSubName = name + <span class="string">'['</span> + subName + <span class="string">']'</span>;</span><br><span class="line">            innerObj = &#123;&#125;;</span><br><span class="line">            innerObj[fullSubName] = subValue;</span><br><span class="line">            query += param(innerObj) + <span class="string">'&amp;'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">          query += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">'&amp;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> query.length ? query.substr(<span class="number">0</span>, query.length - <span class="number">1</span>) : query;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> angular.isObject(data) &amp;&amp; <span class="built_in">String</span>(data) !== <span class="string">'[object File]'</span> ? param(data) : data;</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://stackoverflow.com/questions/19254029/angularjs-http-post-does-not-send-data" target="_blank" rel="noopener">http://stackoverflow.com/questions/19254029/angularjs-http-post-does-not-send-data</a></li><li><a href="http://my.oschina.net/tommyfok/blog/287748" target="_blank" rel="noopener">http://my.oschina.net/tommyfok/blog/287748</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中使用pm2或forever</title>
      <link href="/2015/06/13/%E5%9C%A8docker%E4%B8%AD%E4%BD%BF%E7%94%A8pm2%E6%88%96forever/"/>
      <url>/2015/06/13/%E5%9C%A8docker%E4%B8%AD%E4%BD%BF%E7%94%A8pm2%E6%88%96forever/</url>
      
        <content type="html"><![CDATA[<p>平常使用pm2没有问题,但是在docker中需要参数–no-daemon<br><a id="more"></a></p><blockquote><p>使用命令 <code>pm2 start app.js</code> 之后, <code>pm2</code> 默认在后台运行,<br>如果使用了docker后,容器运行并立即退出,需要手动指定参数<code>--no-daemon</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--no-daemon                          </span><br><span class="line"><span class="comment">// run pm2 daemon in the foreground if it doesn't exist already</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --no-daemon <span class="comment">// 设置启动方式</span></span><br></pre></td></tr></table></figure><blockquote><p>同理forever也是<br>Forever start script.js runs in the background. To run forever in the foreground, try forever script.js.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever -c <span class="string">'node --harmony'</span> app.js <span class="comment">// 设置启动方式</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md" target="_blank" rel="noopener">https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md</a></li><li><a href="http://stackoverflow.com/questions/26237044/error-starting-node-with-forever-in-docker-container" target="_blank" rel="noopener">http://stackoverflow.com/questions/26237044/error-starting-node-with-forever-in-docker-container</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DaoCloud体验－使用node构建应用程序</title>
      <link href="/2015/06/11/DaoCloud%E4%BD%93%E9%AA%8C%EF%BC%8D%E4%BD%BF%E7%94%A8node%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2015/06/11/DaoCloud%E4%BD%93%E9%AA%8C%EF%BC%8D%E4%BD%BF%E7%94%A8node%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>DaoCloud体验－使用node构建应用程序<br><a id="more"></a></p><blockquote><p>首发于<a href="http://open.daocloud.io/using-node-to-build-applications/" target="_blank" rel="noopener">http://open.daocloud.io/using-node-to-build-applications/</a></p></blockquote><h1 id="DaoCloud体验－使用node构建应用程序"><a href="#DaoCloud体验－使用node构建应用程序" class="headerlink" title="DaoCloud体验－使用node构建应用程序"></a>DaoCloud体验－使用node构建应用程序</h1><h2 id="node应用程序demo"><a href="#node应用程序demo" class="headerlink" title="node应用程序demo"></a>node应用程序demo</h2><ul><li>首先 选择一个平台 <code>clone</code> 代码到你的git平台上 <a href="https://coding.net/u/xinshangshangxin/p/DaoCloudNodeDemo/git" target="_blank" rel="noopener">coding</a> / <a href="https://github.com/xinshangshangxin/DaoCloudNodeDemo" target="_blank" rel="noopener">github</a> / <a href="https://gitcafe.com/xinshangshangxin/DaoCloudNodeDemo" target="_blank" rel="noopener">gitcafe</a> </li><li>在控制台点击 <code>服务集成</code><br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo4.png" alt="" title="" class="">                <p></p>            </figure>;</li><li>创建 <code>mysql服务</code>和 <code>mongodb服务</code>, 名字可以随意</li><li>回到控制台,点击 <code>代码构建</code>, <code>创建新项目</code>, 代码源选择你刚才 clone 的<br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo1.png" alt="" title="" class="">                <p></p>            </figure>;</li><li>勾选 <code>持续集成</code> 后点击 <code>开始创建</code></li><li>当镜像构建完成后, 点击 <code>部署最新版本</code>, 接着点击 <code>基础设置</code>, 绑定 mysql 和 mongodb<br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo2.png" alt="" title="" class="">                <p></p>            </figure>;<br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo3.png" alt="" title="" class="">                <p></p>            </figure>;</li><li>容器启动后,访问下URL看看,是不是输出了<code>mysql链接成功~~~    并从mongodb中取出了 xinshangshangxin</code></li><li>持续集成 需要 <code>push</code> 一次代码到你的git,然后回到<code>代码构建</code>, 选择<code>daocloud_node_demo</code>, 查看如图所示<br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo5.png" alt="" title="" class="">                <p></p>            </figure>;</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><blockquote><p>构建镜像必须提供Dockerfile<br>持续集成必须提供daocloud.yml<br>构建镜像和持续集成这两项服务完全是独立的, 两者之间没有任何依赖<br> <code>push</code> 一次代码到你的git才会触发持续集成</p></blockquote><h2 id="如何在app代码中连接mysql-mongodb实例"><a href="#如何在app代码中连接mysql-mongodb实例" class="headerlink" title="如何在app代码中连接mysql/mongodb实例"></a>如何在app代码中连接mysql/mongodb实例</h2><h3 id="容器启动时能访问mysql-mongodb的注意事项"><a href="#容器启动时能访问mysql-mongodb的注意事项" class="headerlink" title="容器启动时能访问mysql/mongodb的注意事项"></a>容器启动时能访问mysql/mongodb的注意事项</h3><ul><li><p>容器<strong>启动之前</strong>需要先绑定 <code>mysql服务</code>和 <code>mongodb服务</code></p><blockquote><p>在控制台点击 <code>服务集成</code>; 接着创建 <code>mysql服务</code>和 <code>mongodb服务</code>, 名字可以随意<br><figure class="image-box">                <img src="https://gitcafe.com/xinshangshangxin/hexo-blog/raw/gitcafe-pages/img/daocloud/demo4.png" alt="" title="" class="">                <p></p>            </figure>;</p></blockquote></li><li><p>mongodb使用的是mongoose连接,格式为:<br><code>mongodb://user:password@addr:port/database</code><br>在node中,环境变量存储在 <code>process.env</code>中,所以:<br><code>user</code> =&gt; <code>process.env.MONGODB_USERNAME</code><br><code>password</code> =&gt; <code>process.env.MONGODB_PASSWORD</code><br><code>addr</code> =&gt; <code>process.env.MONGODB_PORT_27017_TCP_ADDR</code><br><code>port</code> =&gt; <code>process.env.MONGODB_PORT_27017_TCP_PORT</code><br><code>database</code> =&gt; <code>process.env.MONGODB_INSTANCE_NAME</code></p></li><li><p>mysql使用的是<code>node-mysql</code>,所以和上面相似<br><code>user</code> =&gt; <code>process.env.MYSQL_USERNAME</code><br><code>password</code> =&gt; <code>process.env.MYSQL_PASSWORD</code><br><code>database</code> =&gt; <code>process.env.MYSQL_INSTANCE_NAME</code><br><code>host</code> =&gt; <code>process.env.MYSQL_PORT_3306_TCP_ADDR</code><br><code>port</code> =&gt; <code>process.env.MYSQL_PORT_3306_TCP_PORT</code></p></li></ul><h3 id="持续集成中使用mysql，mongodb服务注意事项"><a href="#持续集成中使用mysql，mongodb服务注意事项" class="headerlink" title="持续集成中使用mysql，mongodb服务注意事项"></a>持续集成中使用mysql，mongodb服务注意事项</h3><ul><li><p>持续集成<strong>不需要</strong>绑定任何服务;<strong>daocloud ci在运行测试的时候会自动创建</strong>, 其使用的服务来自<code>daocloud.yml</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  - mysql</span><br><span class="line">  - mongodb</span><br></pre></td></tr></table></figure></li><li><p>在持续集成中 <code>MONGODB_USERNAME</code> <code>MONGODB_PASSWORD</code>  <code>MYSQL_USERNAME</code> <code>MYSQL_PASSWORD</code> <code>MYSQL_INSTANCE_NAME</code> 以及<code>MONGODB_INSTANCE_NAME</code>是不存在的, 所以为了兼容 容器和持续集成,代码中的连接需要进行判断,修改如下:</p></li></ul><blockquote><p>Mongodb</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接格式:    mongodb://user:pass@localhost:port/database</span></span><br><span class="line"><span class="keyword">var</span> mongodbUri = <span class="string">'mongodb://'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续集成时, MONGODB_USERNAME 和 MONGODB_PASSWORD 不存在</span></span><br><span class="line"><span class="comment">// 需要进行判断</span></span><br><span class="line"><span class="keyword">if</span> (process.env.MONGODB_USERNAME) &#123;</span><br><span class="line">    <span class="comment">// 在容器中则存在,在持续集成中则不存在</span></span><br><span class="line">    mongodbUri += process.env.MONGODB_USERNAME;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.MONGODB_PASSWORD) &#123;</span><br><span class="line">        mongodbUri += <span class="string">":"</span> + process.env.MONGODB_PASSWORD</span><br><span class="line">    &#125;</span><br><span class="line">    mongodbUri += <span class="string">"@"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mongodbUri += (process.env.MONGODB_PORT_27017_TCP_ADDR || <span class="string">'localhost'</span>)</span><br><span class="line">    + <span class="string">":"</span> + (process.env.MONGODB_PORT_27017_TCP_PORT || <span class="number">27017</span>)</span><br><span class="line">    + <span class="string">'/'</span> + (process.env.MONGODB_INSTANCE_NAME || <span class="string">'test'</span>);<span class="comment">// 持续集成中MONGODB_INSTANCE_NAME 也不存在, 使用 test 代替</span></span><br></pre></td></tr></table></figure><blockquote><p>Mysql</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node_modules</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续集成中MYSQL_USERNAME默认为root,并且没有MYSQL_PASSWORD</span></span><br><span class="line"><span class="comment">// MYSQL_INSTANCE_NAME默认为test</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    user:  process.env.MYSQL_USERNAME || <span class="string">'root'</span>,</span><br><span class="line">    password:  process.env.MYSQL_PASSWORD || <span class="string">''</span>,</span><br><span class="line">    database: process.env.MYSQL_INSTANCE_NAME || <span class="string">'test'</span>,</span><br><span class="line">    host: process.env.MYSQL_PORT_3306_TCP_ADDR || <span class="string">'localhost'</span>,</span><br><span class="line">    port: process.env.MYSQL_PORT_3306_TCP_PORT || <span class="string">'3306'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'error connecting: '</span> + err.stack);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'connected as id '</span> + connection.threadId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>容器运行时需要绑定mysql，mongodb服务</li><li>持续集成不需要绑定,由 <code>daocloud.yml</code>指定, daocloud ci在运行测试的时候会自动创建一个mysql实例</li><li>持续集成中的mysql，mongodb服务和用户申请的mysql，mongodb实例<strong>没有任何关系</strong></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://github.com/DaoCloud/python-mysql-sample" target="_blank" rel="noopener">https://github.com/DaoCloud/python-mysql-sample</a></li><li><a href="https://github.com/DaoCloud/golang-mongo-sample" target="_blank" rel="noopener">https://github.com/DaoCloud/golang-mongo-sample</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记(1)</title>
      <link href="/2015/06/06/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2015/06/06/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<p>Docker学习笔记<br><a id="more"></a></p><p><code>FROM</code> 基础镜像<br><code>MAINTAINER</code> 维护者<br><code>ENV</code> 环境变量</p><blockquote><p>docker 复制文件 ADD COPY</p></blockquote><p><code>ADD</code> 可以获取网络地址以及解压功能<br><code>COPY</code> 本地文件</p><p><code>RUN</code> 运行指令,每运行一条指令增加一层</p><p><code>EXPOSE 22</code>   container暴露22端口</p><p><code>ENTRYPOINT</code> 镜像启动后自动执行的命令</p><p><code>build</code>  使用docker file生成docker镜像<br>// -t 起名字<br>// dockerfile_path如果为当前目录为则 ( . )<br><code>docker build -t [registry_url/namespace/csphere/centos:7.1] [dockerfile_path]</code></p><p><code>docker images</code> 查看镜像信息<br><code>docker rmi</code> 删除镜像<br><code>docker images -q</code> 批量删除镜像<br><code>docker run image_name</code>      用镜像 运行一个 container</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -it：交互式 </span><br><span class="line">           -d：后端启动, 然后返回container的Id号 </span><br><span class="line">           -p <span class="number">2222</span>:<span class="number">22</span> 端口映射</span><br><span class="line">           -P <span class="number">22</span> 随机取未使用端口映射<span class="number">22</span>端口</span><br><span class="line">           --name 指定容器名称</span><br><span class="line">           -v host_dir:conatiner_dir 文件映射</span><br><span class="line">           --rm 容器退出就删除</span><br><span class="line">           -e 传入环境参数可指定多次</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">80</span>:<span class="number">80</span> --name wordpress -e WORDPRESS_DB_HOST=<span class="number">10.51</span><span class="number">.85</span><span class="number">.74</span> -e WORDPRESS_DB_USER=admin</span><br></pre></td></tr></table></figure><p><code>docker ps</code>  查看运行容器<br><code>docker ps -a</code> 查看所有容器</p><p><code>ONBUILD</code>  在下一个基于本镜像是执行的命令</p><p><code>docker exec -it container_name</code> 交互式模式进入container<br><code>docker exec -it testNode /bin/bash</code></p><p><code>VOLUME</code> 宿主机目录映射container目录<br><code>VOLUME [&quot;/var/lib/mysql&quot;]</code></p><p><code>docker rm</code> 删除容器<br><code>docker rm -f</code> 强制移除容器<br><code>docker ps -a -q</code> 批量删除容器</p><p><code>docker stop container_id</code> 停止容器</p><p>使用原有数据库，重新挂在到容器。按照原有命令即可挂载<br><code>docker run -d -p 3306:3306 --name newdb -v /var/lib/docker/vfs/dir/mydata:/var/lib/mysql mysql:5.5</code></p><p><code>.dockerignore 文件</code> 排除某些文件拷贝</p><p><code>ENTRYPOINT [&quot;EXECUTEABLE&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></p><ul><li><code>CMD [&quot;EXECUTEABLE&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li><li><code>CMD [&quot;param1&quot;, &quot;param2&quot;]</code>  为ENTRYPOINT指定参数</li><li><code>CMD command param1 param2</code>    以”bin/sh -c”方法执行命令</li></ul><blockquote><p>CMD指令 可覆盖</p></blockquote><p><code>CMD[&quot;/bin/echo&quot;,&quot;This is test cmd&quot;]</code>           执行/bin/echo<br><code>docker run -it sphere/cmd:0.1 /bin/bash</code>       /bin/bash 覆盖 /bin/echo</p><p>ENTRYPOINT 覆盖指令需要通过 –entrypoint=来替换，方便调试错误的ENTRYPOINT指令</p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DaoCloud部署Node</title>
      <link href="/2015/06/01/DaoCloud%E9%83%A8%E7%BD%B2Node/"/>
      <url>/2015/06/01/DaoCloud%E9%83%A8%E7%BD%B2Node/</url>
      
        <content type="html"><![CDATA[<p>官方为提供node的example, 把我踩的坑记录分享<br><a id="more"></a></p><blockquote><p>DaoCloud 有go和python 的 example;<br>却没有Node的example, 把我踩的坑记录分享</p></blockquote><h1 id="注册DaoCloud"><a href="#注册DaoCloud" class="headerlink" title="注册DaoCloud"></a>注册DaoCloud</h1><p>注册地址: <a href="https://account.daocloud.io/signup" target="_blank" rel="noopener">https://account.daocloud.io/signup</a></p><blockquote><p>整个构建和部署所需要的资源，DaoCloud都免费提供，为所有的注册用户免费提供以下资源：<br>3个项目，同时可以在DaoCloud关联和构建您的3个软件项目<br>2个容器，每个容器内存上限是256M内存空间<br>2个服务，可从MongoDB、Redis、MySQL和InfluxDB中任意选择</p></blockquote><h1 id="部署Node-的-Dockerfile-详解"><a href="#部署Node-的-Dockerfile-详解" class="headerlink" title="部署Node 的 Dockerfile 详解"></a>部署Node 的 Dockerfile 详解</h1><blockquote><p>总的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line"># Build app</span><br><span class="line">RUN mkdir -p /usr/src/app</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">COPY . /usr/src/app</span><br><span class="line"></span><br><span class="line">RUN npm install --production</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">1340</span></span><br><span class="line"></span><br><span class="line">CMD [ <span class="string">"node"</span>,<span class="string">"dist/server.js"</span>]</span><br></pre></td></tr></table></figure><p><code>FROM node</code> 是指基于 <a href="https://registry.hub.docker.com/_/node" target="_blank" rel="noopener">node最新版</a> 镜像 </p><p><code>RUN mkdir -p /usr/src/app</code> 中 <code>RUN</code> 是安装环境, 整句话是指创建了一个<code>app</code>文件夹供后续使用<br><code>WORKDIR /usr/src/app</code>  中 <code>WORKDIR</code> 是切换目录, 整句话是指切换到 <code>/usr/src/app</code> 目录下<br><code>COPY . /usr/src/app</code> 整句话是指将当前文件夹下文件复制到 <code>app</code>目录下</p><p><code>RUN npm install --production</code> 执行 <code>npm install</code> 命令,安装node程序的依赖包</p><p><code>EXPOSE 1340</code>  中 <code>EXPOSE</code> 是端口映射; 1340 是你的 node程序跑的端口</p><p><code>CMD [&quot;node&quot;,&quot;dist/server.js&quot;]</code> 中 <code>CMD</code>是 <code>container</code>(容器)启动时执行的命令;也就是平常我们使用的 <code>node dist/server.js</code></p><h1 id="上传github和绑定github"><a href="#上传github和绑定github" class="headerlink" title="上传github和绑定github"></a>上传github和绑定github</h1><ul><li><p>在你原来node程序的基础上,添加修改上面的Dockfile; 上传至github;<br><em>如果你没有现成的程序,可以直接 clone 我的项目 <a href="https://github.com/xinshangshangxin/ngMusic.git" target="_blank" rel="noopener">ngMusic项目地址</a></em> 到你的github中</p></li><li><p>在DaoCloud中选择 <em>代码构建</em></p><figure class="image-box">                <img src="/img/daocloud/dc1.png" alt="dc" title="" class="">                <p>dc</p>            </figure></li><li><p>接着点击 <em>创建新项目</em></p><figure class="image-box">                <img src="/img/daocloud/dc2.png" alt="dc" title="" class="">                <p>dc</p>            </figure></li><li><p>接着 <em>输入项目名称</em> 和 同步代码源,选择你部署的项目, 最后点击 <em>开始创建</em><br><em>此处我github已经绑定,所以使用 coding 做演示</em></p><figure class="image-box">                <img src="/img/daocloud/dc3.png" alt="dc" title="" class="">                <p>dc</p>            </figure><p><em>开始构建</em></p><figure class="image-box">                <img src="/img/daocloud/dc4.png" alt="dc" title="" class="">                <p>dc</p>            </figure><p><em>构建完成</em></p><figure class="image-box">                <img src="/img/daocloud/dc6.png" alt="dc" title="" class="">                <p>dc</p>            </figure></li><li><p>点击 <em>查看镜像</em>, 接着在点击 <em>部署最新版本</em> 后开始部署</p></li></ul><ul><li>部署成功, 可以访问看看你的程序; 如果失败,回头看看那里出错了~~<figure class="image-box">                <img src="/img/daocloud/dc5.png" alt="dc" title="" class="">                <p>dc</p>            </figure></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/DaoCloud/python-redis-sample/blob/master/application.py" target="_blank" rel="noopener">https://github.com/DaoCloud/python-redis-sample/blob/master/application.py</a></li><li><a href="http://blog.csdn.net/wsscy2004/article/details/25878223" target="_blank" rel="noopener">http://blog.csdn.net/wsscy2004/article/details/25878223</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ互联踩坑记录</title>
      <link href="/2015/05/24/QQ%E4%BA%92%E8%81%94%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2015/05/24/QQ%E4%BA%92%E8%81%94%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>QQ互联出现redirect uri is illegal(100010)的踩坑记录<br><a id="more"></a></p><h2 id="页面进入地址不正确…"><a href="#页面进入地址不正确…" class="headerlink" title="页面进入地址不正确…."></a>页面进入地址不正确….</h2><ul><li><a href="http://op.open.qq.com/index.php" target="_blank" rel="noopener">错误页面open.qq.com</a><figure class="image-box">                <img src="/img/qqlogin/qqlogin.png" alt="错误地址" title="" class="">                <p>错误地址</p>            </figure><h3 id="正确页面connect-qq-com"><a href="#正确页面connect-qq-com" class="headerlink" title="正确页面connect.qq.com"></a><a href="http://connect.qq.com/manage/index" target="_blank" rel="noopener">正确页面connect.qq.com</a></h3></li></ul><h2 id="出现-redirect-uri-is-illegal-100010-回调地址文档未更新…"><a href="#出现-redirect-uri-is-illegal-100010-回调地址文档未更新…" class="headerlink" title="出现 redirect uri is illegal(100010) 回调地址文档未更新…."></a>出现 <code>redirect uri is illegal(100010)</code> 回调地址文档未更新….</h2><figure class="image-box">                <img src="/img/qqlogin/qqlogin4.png" alt="登录失败" title="" class="">                <p>登录失败</p>            </figure><blockquote><p>官方文档<a href="http://wiki.open.qq.com/wiki/faq/website/%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9D%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">website/回调地址常见问题及修改方法</a>中</p></blockquote><figure class="image-box">                <img src="/img/qqlogin/qqlogin2.png" alt="错误说明" title="" class="">                <p>错误说明</p>            </figure><blockquote><p>全部是错误的,应当参考如下图片,回调地址填写 <strong>完整的回调地址</strong></p></blockquote><figure class="image-box">                <img src="/img/qqlogin/qqlogin3.png" alt="正确设置" title="" class="">                <p>正确设置</p>            </figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3></blockquote><blockquote><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cygwin配置记录</title>
      <link href="/2015/05/10/cygwin%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2015/05/10/cygwin%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>cygwin setting<br><a id="more"></a></p><h2 id="ls-grep-dir输出彩色显示"><a href="#ls-grep-dir输出彩色显示" class="headerlink" title="ls/grep/dir输出彩色显示"></a>ls/grep/dir输出彩色显示</h2><p>调整 <code>${HOME}/.bashrc</code>文件(<code>安装位置:\cygwin64\home\你的用户名\.bashrc</code>)，把注释掉别名打开：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 第98行左右开始</span><br><span class="line"># Default to human readable figures</span><br><span class="line"> alias df=<span class="string">'df -h'</span></span><br><span class="line"> alias du=<span class="string">'du -h'</span></span><br><span class="line">#</span><br><span class="line"># Misc :)</span><br><span class="line"># alias less='less -r'                          # raw control characters</span><br><span class="line"> alias whence='type -a'                        # where, of a sort</span><br><span class="line"> alias grep='grep --color'                     # show differences in colour</span><br><span class="line"> alias egrep='egrep --color=auto'              # show differences in colour</span><br><span class="line"> alias fgrep='fgrep --color=auto'              # show differences in colour</span><br><span class="line">#</span><br><span class="line"># Some shortcuts for different directory listings</span><br><span class="line"> alias ls='ls -hF --color=tty'                 # classify files in colour</span><br><span class="line"> alias dir=<span class="string">'ls --color=auto --format=vertical'</span></span><br><span class="line"> alias vdir=<span class="string">'ls --color=auto --format=long'</span></span><br><span class="line"> alias ll='ls -l'                              # long list</span><br><span class="line"> alias la='ls -A'                              # all but . and ..</span><br><span class="line"> alias l='ls -CF'                              #</span><br></pre></td></tr></table></figure><h3 id="git输出（比如log、status）彩色显示"><a href="#git输出（比如log、status）彩色显示" class="headerlink" title="git输出（比如log、status）彩色显示"></a>git输出（比如log、status）彩色显示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure><h2 id="配置盘符的链接"><a href="#配置盘符的链接" class="headerlink" title="配置盘符的链接"></a>配置盘符的链接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /cygdrive/c /c</span><br><span class="line">ln -s /cygdrive/d /d</span><br><span class="line">ln -s /cygdrive/e /e</span><br></pre></td></tr></table></figure><h2 id="自动补全不区分大小写"><a href="#自动补全不区分大小写" class="headerlink" title="自动补全不区分大小写"></a>自动补全不区分大小写</h2><blockquote><p>~/.bashrc文件(<code>安装位置:\cygwin64\home\你的用户名\.bashrc</code>)中添加：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shopt -s nocaseglob</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>~/.inputrc文件中添加：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set completion-ignore-<span class="keyword">case</span> on</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="在cygwin的打开指定文件或文件夹到文件浏览器"><a href="#在cygwin的打开指定文件或文件夹到文件浏览器" class="headerlink" title="在cygwin的打开指定文件或文件夹到文件浏览器"></a>在cygwin的打开指定文件或文件夹到文件浏览器</h2><blockquote><p>~/.bashrc文件 最后加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xpl</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">"$1"</span> = <span class="string">""</span> ]; then</span><br><span class="line">         XPATH=.   # 缺省是当前目录</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         XPATH=$<span class="number">1</span></span><br><span class="line">         XPATH=<span class="string">"$(cygpath -C ANSI -w "</span>$XPATH<span class="string">")"</span>;</span><br><span class="line">     fi</span><br><span class="line">     explorer $XPATH</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用说明<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xpl                 # explorer打开当前目录</span><br><span class="line">xpl /usr/bin/       # explorer打开指定目录</span><br><span class="line">xpl video.avi       # 使用 Windows 默认程序打开文件</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="sub-使用sublime-打开"><a href="#sub-使用sublime-打开" class="headerlink" title="sub 使用sublime 打开"></a>sub 使用sublime 打开</h2><blockquote><p>路径 <code>D:\cygwin64\usr\local\bin</code>下添加 sub 文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cygdrive/c/Program\ Files/Sublime\ Text\ <span class="number">3</span>/sublime_text.exe $<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其他快捷命令也可以自行配置</p></blockquote><h1 id="和conMenu配合使用"><a href="#和conMenu配合使用" class="headerlink" title="和conMenu配合使用"></a>和conMenu配合使用</h1><h2 id="当前目录打开右键菜单"><a href="#当前目录打开右键菜单" class="headerlink" title="当前目录打开右键菜单"></a>当前目录打开右键菜单</h2><ol><li><a href="http://blog.xinshangshangxin.com/2015/02/22/ConEmu%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/">首先请打开链接设置ConEmu设置当前目录打开右键菜单</a></li><li>设置cygwin在conEmu作为默认打开<blockquote><p>  setting -&gt; Startup -&gt; Tasks</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET CHERE_INVOKING=<span class="number">1</span> &amp; <span class="string">"D:\cygwin64\bin\bash --login -ii"</span> -cur_console:t:<span class="string">"cygwin terminal"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换 D:\cygwin64\bin\bash 为你的安装路径</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><figure class="image-box">                <img src="/img/conemu/cc.png" alt="配置图片~~" title="" class="">                <p>配置图片~~</p>            </figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://oldratlee.com/post/2012-12-22/stunning-cygwin" target="_blank" rel="noopener">惊艳的cygwin——Windows下的Linux命令行环境的配置和使用</a></li><li><a href="http://www.joshuazhang.net/posts/2014/cygwin-cfg-note.html#_3" target="_blank" rel="noopener">Cygwin 安装配置笔记</a></li><li><a href="https://superuser.com/questions/591206/how-do-i-configure-conemu-to-run-cygwin-bash" target="_blank" rel="noopener">How do I configure ConEmu to run Cygwin Bash?</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ConEmu </tag>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-replace</title>
      <link href="/2015/05/09/JavaScript-replace/"/>
      <url>/2015/05/09/JavaScript-replace/</url>
      
        <content type="html"><![CDATA[<p>我对JavaScript-replace理解见解<br><a id="more"></a></p><p><code>String.replace(searchValue,replaceValue)</code></p><ol><li>String:字符串</li><li>searchValue：字符串或正则表达式</li><li>replaceValue:字符串或者函数</li></ol><h2 id="字符串替换字符串"><a href="#字符串替换字符串" class="headerlink" title="字符串替换字符串"></a>字符串替换字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I am loser!'</span>.replace(<span class="string">'loser'</span>,<span class="string">'hero'</span>)</span><br><span class="line"><span class="comment">//I am hero!</span></span><br></pre></td></tr></table></figure><p>直接使用字符串能让自己从loser变成hero,但是如果有2个loser就不能一起变成hero了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I am loser,You are loser'</span>.replace(<span class="string">'loser'</span>,<span class="string">'hero'</span>);</span><br><span class="line"><span class="comment">//I am hero,You are loser</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式替换为字符串"><a href="#正则表达式替换为字符串" class="headerlink" title="正则表达式替换为字符串"></a>正则表达式替换为字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I am loser,You are loser'</span>.replace(<span class="regexp">/loser/g</span>,<span class="string">'hero'</span>)</span><br><span class="line"><span class="comment">//I am hero,You are hero</span></span><br></pre></td></tr></table></figure><p>使用正则表达式,并将正则的global属性改为true则可以让所有loser都变为hero</p><h2 id="有趣的替换字符"><a href="#有趣的替换字符" class="headerlink" title="有趣的替换字符"></a>有趣的替换字符</h2><p><code>replaceValue</code> 可以是字符串.如果字符串中有几个特定字符的话,会被转换为特定字符串.</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">替换文本</th></tr></thead><tbody><tr><td style="text-align:center">$$</td><td style="text-align:center">插入字符串 “$”</td></tr><tr><td style="text-align:center"> $&amp;</td><td style="text-align:center">第一个参数所匹配的子串 </td></tr><tr><td style="text-align:center"> $`</td><td style="text-align:center">匹配字符串左边的字符 </td></tr><tr><td style="text-align:center"> $’</td><td style="text-align:center">匹配字符串右边的字符 </td></tr><tr><td style="text-align:center">$n 或 $nn</td><td style="text-align:center">如果n或nn是个十进制的数字,并且replace方法的第一个参数是个正则表达式,那么$n表示正则表达式中的第n个子匹配字符串. </td></tr></tbody></table><h3 id="使用-amp-字符给匹配字符加大括号"><a href="#使用-amp-字符给匹配字符加大括号" class="headerlink" title="使用$&amp;字符给匹配字符加大括号"></a>使用$&amp;字符给匹配字符加大括号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sStr=<span class="string">'讨论一下正则表达式中的replace的用法'</span>;</span><br><span class="line">sStr.replace(<span class="regexp">/正则表达式/</span>,<span class="string">'&#123;$&amp;&#125;'</span>);</span><br><span class="line"><span class="comment">//讨论一下&#123;正则表达式&#125;中的replace的用法</span></span><br></pre></td></tr></table></figure><h3 id="使用-和-’字符替换内容"><a href="#使用-和-’字符替换内容" class="headerlink" title="使用$`和$’字符替换内容"></a>使用$`和$’字符替换内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.replace(<span class="regexp">/b/</span>,<span class="string">"$`"</span>);<span class="comment">//aac</span></span><br><span class="line"><span class="string">'abc'</span>.replace(<span class="regexp">/b/</span>,<span class="string">"$'"</span>);<span class="comment">//acc</span></span><br></pre></td></tr></table></figure><h3 id="使用分组匹配组合新的字符串"><a href="#使用分组匹配组合新的字符串" class="headerlink" title="使用分组匹配组合新的字符串"></a>使用分组匹配组合新的字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'nimojs@126.com'</span>.replace(<span class="regexp">/(.+)(@)(.*)/</span>,<span class="string">"$2$1"</span>)<span class="comment">//@nimojs</span></span><br></pre></td></tr></table></figure><h2 id="replaceValue参数可以是一个函数"><a href="#replaceValue参数可以是一个函数" class="headerlink" title="replaceValue参数可以是一个函数"></a>replaceValue参数可以是一个函数</h2><p><code>String.replace(searchValue,replaceValue)</code> 中的<strong>replaceValue</strong>可以是一个函数.</p><p>如果指定一个函数作为第二个参数. 当匹配执行后,该函数就会执行. 函数的返回值作为替换字符串被使用. <strong>(注意:  上面提到的特殊替换参数在这里不能被使用.)</strong> 另外要注意的是, 如果第一个参数是正则表达式, 并且其为全局匹配模式, 那么这个方法将被多次调用, 每次匹配都会被调用.</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">代表的值</th></tr></thead><tbody><tr><td style="text-align:center">str</td><td style="text-align:center">匹配的子串.(对应于上面的 <code>$&amp;</code> )</td></tr><tr><td style="text-align:center">p1, p2, …</td><td style="text-align:center">第n个括号中匹配的子字符串</td></tr><tr><td style="text-align:center">offset</td><td style="text-align:center">该字符串匹配的偏移量</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">整个字符串</td></tr></tbody></table><blockquote><p>我的理解:</p><blockquote><p>函数的参数 和str.match(reg) 得到的内容一样</p></blockquote></blockquote><h1 id="例子更清晰"><a href="#例子更清晰" class="headerlink" title="例子更清晰~~"></a>例子更清晰~~</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'my love hebe'</span>.match(<span class="regexp">/(\w+)\s\w+\s(\w+)/</span> ));</span><br><span class="line"><span class="comment">// [ 'my love hebe', </span></span><br><span class="line"><span class="comment">// 'my', </span></span><br><span class="line"><span class="comment">// 'hebe', </span></span><br><span class="line"><span class="comment">// index: 0, </span></span><br><span class="line"><span class="comment">// input: 'my love hebe' ]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArguments</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// &#123; '0': 'my love hebe',</span></span><br><span class="line"><span class="comment">//  '1': 'my',</span></span><br><span class="line"><span class="comment">//  '2': 'hebe',</span></span><br><span class="line"><span class="comment">//  '3': 0,</span></span><br><span class="line"><span class="comment">//  '4': 'my love hebe' &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">'my love hebe'</span>.replace(<span class="regexp">/(\w+)\s\w+\s(\w+)/</span>, logArguments)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'my love hebe'</span>.match(<span class="regexp">/(\w+)\s\w+\s(\w+)/</span> ));</span><br></pre></td></tr></table></figure><hr><h2 id="修改参考了"><a href="#修改参考了" class="headerlink" title="修改参考了:"></a>修改参考了:</h2><ul><li><a href="http://nimojs.com/blog/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript-replace.html" target="_blank" rel="noopener">深入理解JavaScript-replace</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记9_客户端存储</title>
      <link href="/2015/05/06/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B09-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
      <url>/2015/05/06/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B09-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记9_客户端存储<br><a id="more"></a></p><h2 id="localStorage-和-sessionStorage"><a href="#localStorage-和-sessionStorage" class="headerlink" title="localStorage 和 sessionStorage"></a>localStorage 和 sessionStorage</h2><blockquote><p><code>localStorage</code> 仅支持存储字符串<br><code>localStorage</code> 存储是永久的;除非web引用刻意删除,或者用户通过浏览器配置删除<br><code>localStorage</code> 作用域限定在文档源级别(协议;主机名;端口)</p></blockquote><blockquote><p><code>sessionStorage</code> 存储数据的脚本所在的 最顶层的窗口/浏览器标签页 的有效期<br><code>sessionStorage</code> 作用域限定在文档源级别(协议;主机名;端口)<br>如果一个浏览器标签页包含2个 <code>&lt;iframe&gt;</code> 元素, 它们可以共享 <code>sessionStorage</code></p></blockquote><h2 id="存储API"><a href="#存储API" class="headerlink" title="存储API"></a>存储API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setItem()</span><br><span class="line">getItem()</span><br><span class="line">removeItem()</span><br><span class="line">clear()</span><br></pre></td></tr></table></figure><h2 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h2><blockquote><p>在 <code>localStorage</code> 或 <code>sessionStorage</code> 的数据发生改变,浏览器都会在其他对该数据可见的窗口对象上出发存储事件(不会在对数据进行改变的窗口对象上触发)<br>如果2个标签页打开了来自同源的页面,其中一个页面在 <code>localStorage</code> 上存储了数据,那么另外一个标签页会接受到一个存储事件<br>对 <code>sessionStorage</code> 限制在顶层窗口,所以对 <code>sessionStorage</code> 的改变只有当有牵连的窗口触发是才会触发存储事件<br>对已经存在的存储项设置一个一模一样的值,抑或是删除一个本来就不存在的存储项是不会触发事件的</p></blockquote><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p><code>cookie</code> 的作用域是通过 文档源和文档路径 来确定的<br><code>cookie</code> 的值不可以包含分号,逗号,空白符, 因此需要 <code>encodeURIComponent</code> 进行编码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于cookie的存储API</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CookieStorage</span>(<span class="params">maxage, path</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一个存储全部cookie的对象</span></span><br><span class="line">    <span class="keyword">var</span> cookies = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> all = <span class="built_in">document</span>.cookie;</span><br><span class="line">        <span class="keyword">if</span> (all === <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookies;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分离出名/值对</span></span><br><span class="line">        <span class="keyword">var</span> list = all.split(<span class="string">"; "</span>);</span><br><span class="line">        <span class="comment">// 遍历每个cookie</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = list[i];</span><br><span class="line">            <span class="keyword">var</span> p = cookie.indexOf(<span class="string">"="</span>);</span><br><span class="line">            <span class="comment">// 获取cookie的名字</span></span><br><span class="line">            <span class="keyword">var</span> name = cookie.substring(<span class="number">0</span>, p);</span><br><span class="line">            <span class="comment">// 获取cookie对应的值</span></span><br><span class="line">            <span class="keyword">var</span> value = cookie.substring(p + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 解码</span></span><br><span class="line">            value = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">            cookies[name] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookies;</span><br><span class="line">    &#125;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将所有的cookie存储到一个数组中</span></span><br><span class="line">    <span class="keyword">var</span> keys = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cookies) &#123;</span><br><span class="line">        keys.push(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义存储API的公共方法和属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储cookie 的个数</span></span><br><span class="line">    <span class="keyword">this</span>.length = keys.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第N个cookie的名字, N越界返回null</span></span><br><span class="line">    <span class="keyword">this</span>.key = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span> || n &gt;= keys.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys[n];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定cookie的名字,如果不存在返回NULL</span></span><br><span class="line">    <span class="keyword">this</span>.getItem = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cookies[name] || <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储cookie</span></span><br><span class="line">    <span class="keyword">this</span>.setItem = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果要存储的cookie还不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> cookies)) &#123;</span><br><span class="line">            <span class="comment">// 加入数组</span></span><br><span class="line">            keys.push(key);</span><br><span class="line">            <span class="comment">// 长度加一</span></span><br><span class="line">            <span class="keyword">this</span>.length++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将名/值存储到cookies对象中</span></span><br><span class="line">        cookies[key] = value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置cookie</span></span><br><span class="line">        <span class="keyword">var</span> cookie = key + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        <span class="comment">// 添加 maxage</span></span><br><span class="line">        <span class="keyword">if</span> (maxage) &#123;</span><br><span class="line">            cookie += <span class="string">"; max-age="</span> + maxage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加path</span></span><br><span class="line">        <span class="keyword">if</span> (path) &#123;</span><br><span class="line">            cookie += <span class="string">"; path="</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置document.cookie</span></span><br><span class="line">        <span class="built_in">document</span>.cookie = cookie;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定的cookie</span></span><br><span class="line">    <span class="keyword">this</span>.removeItem = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> cookies)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除内部cookies的指定cookie</span></span><br><span class="line">        <span class="keyword">delete</span> cookies[key];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数组中删除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys[i] === key) &#123;</span><br><span class="line">                keys.splice(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line">        <span class="comment">// 通过设置有效期为0来删除cookie</span></span><br><span class="line">        <span class="built_in">document</span>.cookie = key + <span class="string">"=; max-age=0"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除所有cookie</span></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            <span class="built_in">document</span>.cookie = keys[i] + <span class="string">"=; max-age=0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cookies = &#123;&#125;;</span><br><span class="line">        keys = [];</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用程序缓存清单"><a href="#应用程序缓存清单" class="headerlink" title="应用程序缓存清单"></a>应用程序缓存清单</h2><blockquote><p>注释 以 <code>#</code> 开头,后面跟一个空字符<br>应用程序缓存清单文件约定一.appcahe作为文件扩展名.但是web服务器怔怔识别清单文件的方式是通过 <code>text/cache-mainfest</code> 这个 <code>MIME</code>类型<br>浏览器在更新缓存过程中会触发一系列事件</p><blockquote><ol><li>没有可用的更新,触发 <code>noupdate</code> </li><li>有可用的更新触发 <code>downloading</code>, 下载过程触发 <code>progress</code> 和 下载完成触发 <code>updateready</code></li><li>首次载入新的应用程序 <code>downloading</code>, 下载过程触发 <code>progress</code>, 下载完成后触发 <code>cached</code></li><li>浏览器处于离线状态触发 <code>error</code></li><li>清单文件不存在:<blockquote><ul><li>未缓存的应用程序触发 <code>error</code></li><li>应用程序已经缓存并且浏览器处于在线状态触发 <code>obsolete</code>, 并且将该应用从缓存中移除</li></ul></blockquote></li></ol></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理应用缓存的相关事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"statusline"</span>).innerHTML = msg;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onchecking = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"Checking for a new version."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onnoupdate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"This version is up-to-date."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.ondownloading = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"Downloading new version"</span>);</span><br><span class="line">    <span class="built_in">window</span>.progresscount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> progress = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (e &amp;&amp; e.lengthComputable) &#123;</span><br><span class="line">        progress = <span class="string">" "</span> + <span class="built_in">Math</span>.round(<span class="number">100</span> * e.loaded / e.total) + <span class="string">"%"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        progress = <span class="string">" ("</span> + ++progresscount + <span class="string">")"</span></span><br><span class="line">    &#125;</span><br><span class="line">    status(<span class="string">"Downloading new version"</span> + progress);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.oncached = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"This application is now cached locally"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onupdateready = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"A new version has been downloaded.  Reload to run it"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"Couldn't load manifest or cache application"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onobsolete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"This application is no longer cached. "</span> +</span><br><span class="line">        <span class="string">"Reload to get the latest version from the network."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="离线web应用"><a href="#离线web应用" class="headerlink" title="离线web应用"></a>离线web应用</h2><blockquote><p>通过 <code>navigator.onLine</code> 来检测浏览器是否在线</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// permanote.js</span></span><br><span class="line"><span class="keyword">var</span> editor, statusline, savebutton, idletimer;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (localStorage.note == <span class="literal">null</span>) &#123;</span><br><span class="line">        localStorage.note = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.lastModified == <span class="literal">null</span>) &#123;</span><br><span class="line">        localStorage.lastModified = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.lastSaved == <span class="literal">null</span>) &#123;</span><br><span class="line">        localStorage.lastSaved = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    editor = <span class="built_in">document</span>.getElementById(<span class="string">"editor"</span>);</span><br><span class="line">    statusline = <span class="built_in">document</span>.getElementById(<span class="string">"statusline"</span>);</span><br><span class="line">    savebutton = <span class="built_in">document</span>.getElementById(<span class="string">"savebutton"</span>);</span><br><span class="line">    editor.value = localStorage.note;</span><br><span class="line">    editor.disabled = <span class="literal">true</span>;</span><br><span class="line">    editor.addEventListener(<span class="string">"input"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            localStorage.note = editor.value;</span><br><span class="line">            localStorage.lastModified = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (idletimer) &#123;</span><br><span class="line">                clearTimeout(idletimer);</span><br><span class="line">            &#125;</span><br><span class="line">            idletimer = setTimeout(save, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">            savebutton.disabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">false</span>);</span><br><span class="line">    sync();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localStorage.lastModified &gt; localStorage.lastSaved) &#123;</span><br><span class="line">        save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onoffline = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"Offline"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.ononline = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    sync();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onupdateready = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"A new version of this application is available. Reload to run it"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.applicationCache.onnoupdate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    status(<span class="string">"You are running the latest version of the application."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    statusline.innerHTML = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (idletimer) &#123;</span><br><span class="line">        clearTimeout(idletimer);</span><br><span class="line">    &#125;</span><br><span class="line">    idletimer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (navigator.onLine) &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">"PUT"</span>, <span class="string">"/note"</span>);</span><br><span class="line">        xhr.send(editor.value);</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            localStorage.lastSaved = <span class="built_in">Date</span>.now();</span><br><span class="line">            savebutton.disabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.onLine) &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">"GET"</span>, <span class="string">"/note"</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> remoteModTime = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> remoteModTime = xhr.getResponseHeader(<span class="string">"Last-Modified"</span>);</span><br><span class="line">                remoteModTime = <span class="keyword">new</span> <span class="built_in">Date</span>(remoteModTime).getTime();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (remoteModTime &gt; localStorage.lastModified) &#123;</span><br><span class="line">                status(<span class="string">"Newer note found on server."</span>);</span><br><span class="line">                <span class="keyword">var</span> useit =</span><br><span class="line">                    confirm(<span class="string">"There is a newer version of the note\n"</span> +</span><br><span class="line">                        <span class="string">"on the server. Click Ok to use that version\n"</span> +</span><br><span class="line">                        <span class="string">"or click Cancel to continue editing this\n"</span> +</span><br><span class="line">                        <span class="string">"version and overwrite the server"</span>);</span><br><span class="line">                <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">                <span class="keyword">if</span> (useit) &#123;</span><br><span class="line">                    editor.value = localStorage.note = xhr.responseText;</span><br><span class="line">                    localStorage.lastSaved = now;</span><br><span class="line">                    status(<span class="string">"Newest version downloaded."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    status(<span class="string">"Ignoring newer version of the note."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                localStorage.lastModified = now;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                status(<span class="string">"You are editing the current version of the note."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (localStorage.lastModified &gt; localStorage.lastSaved) &#123;</span><br><span class="line">                save();</span><br><span class="line">            &#125;</span><br><span class="line">            editor.disabled = <span class="literal">false</span>;</span><br><span class="line">            editor.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        status(<span class="string">"Can't sync while offline"</span>);</span><br><span class="line">        editor.disabled = <span class="literal">false</span>;</span><br><span class="line">        editor.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记8_脚本化HTTP</title>
      <link href="/2015/05/05/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B08-%E8%84%9A%E6%9C%AC%E5%8C%96HTTP/"/>
      <url>/2015/05/05/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B08-%E8%84%9A%E6%9C%AC%E5%8C%96HTTP/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记8_脚本化HTTP<br><a id="more"></a></p><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><blockquote><p>open() 的第一个参数指定HTTP的 方法/动作; 不区分大小写;但通常使用大写字幕  </p></blockquote><blockquote><p>open() 的第二个参数是 URL; 相对于文档的URL或者绝对URL</p><blockquote><p>绝对URL如果跨域,通常会报错;除非服务器允许并且XHR2规范</p></blockquote></blockquote><blockquote><p>使用setRequestsHeader() 多次设置<br>POST请求通常拥有主体,同时应该使用 <code>setRequestsHeader</code> 指定 <code>Content-Type</code> 头<br><code>xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;)</code>  </p><blockquote><p>无法传递以下头</p></blockquote></blockquote><table><thead><tr><th style="text-align:center">_</th><th style="text-align:center">_</th><th style="text-align:center">_</th></tr></thead><tbody><tr><td style="text-align:center">Accept-Charset</td><td style="text-align:center">Content-Transfer-Encoding</td><td style="text-align:center">TE</td></tr><tr><td style="text-align:center">Accept-Encoding</td><td style="text-align:center">Date</td><td style="text-align:center">Trailer</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">Expect</td><td style="text-align:center">Transfer-Encoding</td></tr><tr><td style="text-align:center">Content-Length</td><td style="text-align:center">Host</td><td style="text-align:center">Upgrade</td></tr><tr><td style="text-align:center">Cookie</td><td style="text-align:center">Keep-Alive</td><td style="text-align:center">User-Agent</td></tr><tr><td style="text-align:center">Cookie2</td><td style="text-align:center">Referer</td><td style="text-align:center">Via</td></tr></tbody></table><blockquote><p>open() 传递第3个参数 为 false, send()方法阻塞,以同步响应</p></blockquote><blockquote><p>open() 的第4个和第5个参数为用户名和密码, 请求一个受密码保护的URL  </p></blockquote><h2 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h2><blockquote><p>GET请求没有主体, 设置为null会省略这个参数<br>request.send(null)</p></blockquote><h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序:"></a>顺序:</h2><ol><li>请求方法和URL</li><li>请求头</li><li>请求主体  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postMessage</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 请求方法和URL</span></span><br><span class="line">    request.open(<span class="string">"POST"</span>, <span class="string">"/log.php"</span>);</span><br><span class="line">    <span class="comment">// 请求头</span></span><br><span class="line">    request.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">// 请求主体</span></span><br><span class="line">    request.send(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><blockquote><p>status和statusText以数字和文本的形式返回HTTP状态码</p></blockquote><blockquote><p>getResponseHeader() 和 getAllResponseHeaders() 能查询响应头</p><blockquote><p>getAllResponseHeaders() 会过滤掉cookie头<br>getResponseHeader() 传递 Set-Cookie 或 Set-Cookie2 返回null</p></blockquote></blockquote><blockquote><p>responseText 以文本形式返回响应主体</p></blockquote><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><table><thead><tr><th style="text-align:center">常量(IE9+)</th><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">UNSENT</td><td style="text-align:center">0</td><td style="text-align:center">open() 尚未调用</td></tr><tr><td style="text-align:center">OPENED</td><td style="text-align:center">1</td><td style="text-align:center">open() 已调用</td></tr><tr><td style="text-align:center">HEADERS_RECEIVED</td><td style="text-align:center">2</td><td style="text-align:center">接收到头信息</td></tr><tr><td style="text-align:center">LOADING</td><td style="text-align:center">3</td><td style="text-align:center">接收到响应主体</td></tr><tr><td style="text-align:center">DONE</td><td style="text-align:center">4</td><td style="text-align:center">响应完成</td></tr></tbody></table><h3 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange"></a>onreadystatechange</h3><blockquote><p>readystatechange事件在实际中改变为0或1时可能没有触发这个事件;<br>当调用send()事件时,即使处于OPENED状态也触发</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步get请求获取text</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @param callback 回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 请求完成                     状态码为200</span></span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> type = request.getResponseHeader(<span class="string">"Content-Type"</span>);</span><br><span class="line">            <span class="keyword">if</span> (type.match(<span class="regexp">/^text/</span>)) &#123;</span><br><span class="line">                callback(request.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步响应</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTextSync</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 第3个参数为false实现同步</span></span><br><span class="line">    request.open(<span class="string">"GET"</span>, url, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 阻塞线程运行; 不需要readystatechange事件</span></span><br><span class="line">    <span class="keyword">if</span> (request.status !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(request.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> type = request.getResponseHeader(<span class="string">"Content-Type"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!type.match(<span class="regexp">/^text/</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Expected textual response; got: "</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> request.responseText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码请求主体"><a href="#编码请求主体" class="headerlink" title="编码请求主体"></a>编码请求主体</h2><h3 id="表单编码请求"><a href="#表单编码请求" class="headerlink" title="表单编码请求"></a>表单编码请求</h3><blockquote><p>表单数据POST是必须设置 <code>Content-type</code><br>表单数据编码格式MIME类型:<br><code>appliaction/x-www-form-urlencoded</code></p></blockquote><h3 id="JSON编码请求"><a href="#JSON编码请求" class="headerlink" title="JSON编码请求"></a>JSON编码请求</h3><blockquote><p><code>application/json</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postJSON</span>(<span class="params">url, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">"POST"</span>, url);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; callback)</span><br><span class="line">            callback(request);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    request.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    request.send(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动设置"><a href="#自动设置" class="headerlink" title="自动设置"></a>自动设置</h3><blockquote><p>给send()传入XML文档,自动设置一个合适的头<br>给send()传入字符串并且没有指定 <code>Content-Type</code> 头, 自动添加 <code>text/plain; charset=UTF-8</code></p></blockquote><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><blockquote><p>XHR2允许向send()方法传入任何Blob对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用POST请求上传文件</span></span><br><span class="line"><span class="keyword">var</span> whenReady = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> funcs = [];</span><br><span class="line">    <span class="keyword">var</span> ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.type === <span class="string">"readystatechange"</span> &amp;&amp; <span class="built_in">document</span>.readyState !== <span class="string">"complete"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; funcs.length; i++) &#123;</span><br><span class="line">            funcs[i].call(<span class="built_in">document</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">        funcs = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"readystatechange"</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">        <span class="built_in">document</span>.attachEvent(<span class="string">"onreadystatechange"</span>, handler);</span><br><span class="line">        <span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">whenReady</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">            f.call(<span class="built_in">document</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            funcs.push(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whenReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elts.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> input = elts[i];</span><br><span class="line">        <span class="keyword">if</span> (input.type !== <span class="string">"file"</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> url = input.getAttribute(<span class="string">"data-uploadto"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">"POST"</span>, url);</span><br><span class="line">            xhr.send(file);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><blockquote><p>当HTML表单同时包含文件上传元素和其他元素是, 使用 <code>multipart/form-data</code> 的 <code>Content-Type</code><br>XHR2定义了新的 <code>FormData API</code>; 使用FormData()构造函数创建FormData对象, append()方法可以多次加入File, 字符串, 或者 Blob对象, 把FormData对象传递个send()方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postFormData</span>(<span class="params">url, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> FormData === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"FormData is not implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">"POST"</span>, url);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; callback) &#123;</span><br><span class="line">            callback(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.hasOwnProperty(name)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> value = data[name];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"function"</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        formdata.append(name, value);       <span class="comment">// 作为一部分添加名/值对</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send对象自动设置Content-Type对象</span></span><br><span class="line">    request.send(formdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP进度事件"><a href="#HTTP进度事件" class="headerlink" title="HTTP进度事件"></a>HTTP进度事件</h2><blockquote><p>完成请求触发load事件<br>请求超时触发timeout事件<br>请求中值触发abort事件<br>太多重定这样的网络错误出啊发error事件<br>对于具体的请求,浏览器只出发load/abort/timeout/error事件中的一个</p></blockquote><blockquote><p>onprogress事件有3个有用的属性</p><blockquote><p>loaded: 目前传输的字节数<br>total: 自’Content-Length’头传输的数据的整体长度,不知道内容长度则为0<br>lengthComputable: 是否知道内容内容长度</p></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监控HTTP上传进度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找所遇含有 fileDropTarget 类的元素</span></span><br><span class="line"><span class="comment">// 并注册DnD事件处理程序是的它们能响应文件的拖放</span></span><br><span class="line"><span class="comment">// 当文件放下时,上床它们到data-uploadto属性指定的url</span></span><br><span class="line">whenReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elts = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"fileDropTarget"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elts.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> target = elts[i];</span><br><span class="line">        <span class="keyword">var</span> url = target.getAttribute(<span class="string">"data-uploadto"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        createFileUploadDropTarget(target, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createFileUploadDropTarget</span>(<span class="params">target, url</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 是否正在上传, 因此我们能拒绝放下</span></span><br><span class="line">        <span class="comment">// 我们可以处理多个并发上传</span></span><br><span class="line">        <span class="comment">// 但对这个例子使用进度通知太难了</span></span><br><span class="line">        <span class="keyword">var</span> uploading = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(target, url);</span><br><span class="line">        target.ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"dragenter"</span>);</span><br><span class="line">            <span class="keyword">if</span> (uploading) &#123;                <span class="comment">// 如果正在忙, 忽略拖放</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> types = e.dataTransfer.types;</span><br><span class="line">            <span class="keyword">if</span> (types &amp;&amp;</span><br><span class="line">                ((types.contains &amp;&amp; types.contains(<span class="string">"Files"</span>)) ||</span><br><span class="line">                (types.indexOf &amp;&amp; types.indexOf(<span class="string">"Files"</span>) !== <span class="number">-1</span>))) &#123;</span><br><span class="line">                target.classList.add(<span class="string">"wantdrop"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        target.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!uploading) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        target.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!uploading) &#123;</span><br><span class="line">                target.classList.remove(<span class="string">"wantdrop"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        target.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (uploading) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> files = e.dataTransfer.files;</span><br><span class="line">            <span class="keyword">if</span> (files &amp;&amp; files.length) &#123;</span><br><span class="line">                uploading = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">"Uploading files:&lt;ul&gt;"</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++)</span><br><span class="line">                    message += <span class="string">"&lt;li&gt;"</span> + files[i].name + <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">                message += <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line"></span><br><span class="line">                target.innerHTML = message;</span><br><span class="line">                target.classList.remove(<span class="string">"wantdrop"</span>);</span><br><span class="line">                target.classList.add(<span class="string">"uploading"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                xhr.open(<span class="string">"POST"</span>, url);</span><br><span class="line">                <span class="keyword">var</span> body = <span class="keyword">new</span> FormData();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) body.append(i, files[i]);</span><br><span class="line">                xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">                        target.innerHTML = message +</span><br><span class="line">                            <span class="built_in">Math</span>.round(e.loaded / e.total * <span class="number">100</span>) +</span><br><span class="line">                            <span class="string">"% Complete"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                xhr.upload.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    uploading = <span class="literal">false</span>;</span><br><span class="line">                    target.classList.remove(<span class="string">"uploading"</span>);</span><br><span class="line">                    target.innerHTML = <span class="string">"Drop files to upload"</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                xhr.send(body);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            target.classList.remove(<span class="string">"wantdrop"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><blockquote><p>XHR2定义了timeout属性来指定请求自动终止后的毫秒数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedGetText</span>(<span class="params">url, timeout, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">var</span> timedout = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                     <span class="comment">//设置超时</span></span><br><span class="line">            timedout = <span class="literal">true</span>;</span><br><span class="line">            request.abort();</span><br><span class="line">        &#125;,</span><br><span class="line">        timeout);</span><br><span class="line">    request.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timedout) &#123;             <span class="comment">// 忽略终止的请求</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            callback(request.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><blockquote><p>XHR2通过在 HTTP响应中选择发送合适的CORS允许跨域访问网站<br>如果给open()方法传入 用户名和密码, 那么它们绝不会通过跨域请求发送<br>跨域请求通常不包括任何其它用户证书: cookie和HTTP身份令牌(token)<br>设置 <code>withCredentials</code> 属性为 <code>true</code> 才能发送用户证书(不常见)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 HEAD 和 CORS 请求链接的详细信息</span></span><br><span class="line">whenReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否支持跨域</span></span><br><span class="line">    <span class="keyword">var</span> supportsCORS = (<span class="keyword">new</span> XMLHttpRequest()).withCredentials !== <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 遍历文档中链接</span></span><br><span class="line">    <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> link = links[i];</span><br><span class="line">        <span class="keyword">if</span> (!link.href) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跳过已经有工具提示的链接</span></span><br><span class="line">        <span class="keyword">if</span> (link.title) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是跨域链接</span></span><br><span class="line">        <span class="keyword">if</span> (link.host !== location.host || link.protocol !== location.protocol) &#123;</span><br><span class="line">            link.title = <span class="string">"Off-site link"</span>;</span><br><span class="line">            <span class="keyword">if</span> (!supportsCORS) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册事件处理, 当鼠标悬停是下载链接的详细信息</span></span><br><span class="line">        <span class="keyword">if</span> (link.addEventListener) &#123;</span><br><span class="line">            link.addEventListener(<span class="string">"mouseover"</span>, mouseoverHandler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            link.attachEvent(<span class="string">"onmouseover"</span>, mouseoverHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseoverHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> link = e.target || e.srcElement;</span><br><span class="line">        <span class="keyword">var</span> url = link.href;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 仅仅询问头信息</span></span><br><span class="line">        req.open(<span class="string">"HEAD"</span>, url);</span><br><span class="line">        req.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> type = req.getResponseHeader(<span class="string">"Content-Type"</span>);</span><br><span class="line">                <span class="keyword">var</span> size = req.getResponseHeader(<span class="string">"Content-Length"</span>);</span><br><span class="line">                <span class="keyword">var</span> date = req.getResponseHeader(<span class="string">"Last-Modified"</span>);</span><br><span class="line"></span><br><span class="line">                link.title = <span class="string">"Type: "</span> + type + <span class="string">"   \n"</span> +</span><br><span class="line">                    <span class="string">"Size: "</span> + size + <span class="string">"   \n"</span> + <span class="string">"Date: "</span> + date;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!link.title) &#123;</span><br><span class="line">                    link.title = <span class="string">"Couldn't fetch details: \n"</span> +</span><br><span class="line">                        req.status + <span class="string">" "</span> + req.statusText;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除处理程序: 仅想一次获取这些头信息</span></span><br><span class="line">        <span class="keyword">if</span> (link.removeEventListener) &#123;</span><br><span class="line">            link.removeEventListener(<span class="string">"mouseover"</span>, mouseoverHandler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            link.detachEvent(<span class="string">"onmouseover"</span>, mouseoverHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记7_脚本化文档</title>
      <link href="/2015/04/23/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B07-%E8%84%9A%E6%9C%AC%E5%8C%96%E6%96%87%E6%A1%A3/"/>
      <url>/2015/04/23/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B07-%E8%84%9A%E6%9C%AC%E5%8C%96%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记7_脚本化文档150423<br><a id="more"></a></p><p><code>document.getElementById()</code> 在IE7- 下匹配ID 不区分大小写</p><p><code>document.getElementsByName();</code> 和 <code>document.getElementsByTagName();</code> 返回 NodeList对象<br><code>document.images</code>和 <code>document.forms</code> 返回 HTMLCollection 对象<br>它们都是实时的, 生成静态副本如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snapshot = <span class="built_in">Array</span>.prototype.slice.call(nodelist, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p><code>document.getElementsByClassName()</code> IE9+ 支持<br><code>document.querySelectorAll()</code>       IE8+</p><h1 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h1><h2 id="作为节点树的文档"><a href="#作为节点树的文档" class="headerlink" title="作为节点树的文档"></a>作为节点树的文档</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parentNode</span><br><span class="line">childeNodes   <span class="comment">// 实时</span></span><br><span class="line">firstChild, lastChild</span><br><span class="line">nextSibling previousChild   <span class="comment">// 兄弟节点的前/后一个</span></span><br><span class="line">nodeType   <span class="comment">// 节点类型</span></span><br><span class="line">    <span class="number">9</span> Document节点</span><br><span class="line">    <span class="number">1</span> Element节点</span><br><span class="line">    <span class="number">3</span> Text 节点</span><br><span class="line">    <span class="number">8</span> Comment节点</span><br><span class="line">    <span class="number">11</span> DocumentFragment节点</span><br><span class="line"></span><br><span class="line">nodeValue  Text/Comment 节点的文本内容</span><br><span class="line">nodeName    元素标签名(大写)</span><br></pre></td></tr></table></figure><h2 id="作为元素树的节点"><a href="#作为元素树的节点" class="headerlink" title="作为元素树的节点"></a>作为元素树的节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE不可用</span></span><br><span class="line">firstElementChild lastElementChild</span><br><span class="line">nextElementSibling previousElementChild </span><br><span class="line">childElementCout <span class="comment">// 子元素的数量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可移植的文档遍历函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n-- &amp;&amp; e) &#123;</span><br><span class="line">        e = e.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!e || e.nodeType !== <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sibling</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (e &amp;&amp; n !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.nextElementSibling) &#123;</span><br><span class="line">                e = e.nextElementSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.nextSibling; e &amp;&amp; e.nodeType !== <span class="number">1</span>; e = e.nextSibling) &#123;</span><br><span class="line">                    <span class="comment">/* empty loop */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.previousElementSibing) &#123;</span><br><span class="line">                e = e.previousElementSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType !== <span class="number">1</span>; e = e.previousSibling) &#123;</span><br><span class="line">                    <span class="comment">/* empty loop */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            n += e.children.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.children[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.firstElementChild) &#123;</span><br><span class="line">            e = e.firstElementChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (e = e.firstChild; e &amp;&amp; e.nodeType !== <span class="number">1</span>; e = e.nextSibling) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sibling(e, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.lastElementChild) &#123;</span><br><span class="line">            e = e.lastElementChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (e = e.lastChild; e &amp;&amp; e.nodeType !== <span class="number">1</span>; e = e.previousSibling) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sibling(e, n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><blockquote><p>HTML属性名不区分大小写; 转换成js时需要小写; 2个以上单词的属性名除第一个单词以外的单词首字母大写<br>HTML属性名在js中为保留字的,属性名加上前缀’html’; 如 for 属性,js中表示为 htmlfor<br>class属性在js中 为 className</p></blockquote><h2 id="获取设置非标准HTML属性"><a href="#获取设置非标准HTML属性" class="headerlink" title="获取设置非标准HTML属性"></a>获取设置非标准HTML属性</h2><blockquote><p>属性值都被看成字符串,所以getAttribute()值返回字符串<br>检测属性hasAttribute; 完全删除属性removeAttribute</p></blockquote><h2 id="数据集属性"><a href="#数据集属性" class="headerlink" title="数据集属性"></a>数据集属性</h2><blockquote><p>H5中,任意以 ‘data-‘ 为前缀的小写的属性都是合法的<br>dataset-x保存datat-x的值; data-jqueryTest保存data-jquery-test的值</p></blockquote><h2 id="作为Attr节点的属性"><a href="#作为Attr节点的属性" class="headerlink" title="作为Attr节点的属性"></a>作为Attr节点的属性</h2><blockquote><p>Node类型定义了attributes属性<br>针对非Element对象的任何节点,该属性为null<br>对于Element对象,attributes属性是只读的,实时的类数组对象</p></blockquote><h1 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h1><h2 id="作为HTML的元素内容"><a href="#作为HTML的元素内容" class="headerlink" title="作为HTML的元素内容"></a>作为HTML的元素内容</h2><blockquote><p>innerHTML 使用’+=’ 操作效率低下<br>只有Element节点定义了outerHTML属性</p></blockquote><h2 id="作为纯文本元素的内容"><a href="#作为纯文本元素的内容" class="headerlink" title="作为纯文本元素的内容"></a>作为纯文本元素的内容</h2><blockquote><p>查询纯文本元素内容使用 Node的textContent; IE中使用innerText<br>innerText不返回<script> 元素内容,针对 <table> <tr> <td> 为只读属性</p></blockquote><h2 id="作为Text节点的元素内容"><a href="#作为Text节点的元素内容" class="headerlink" title="作为Text节点的元素内容"></a>作为Text节点的元素内容</h2><blockquote><p>nodeValue 属性可以读/写, 可以改变Text节点所显示的内容</p></blockquote><h1 id="创建-插入-删除节点"><a href="#创建-插入-删除节点" class="headerlink" title="创建/插入/删除节点"></a>创建/插入/删除节点</h1><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///Text节点</span></span><br><span class="line"><span class="built_in">document</span>.createTextNode(<span class="string">'text node content'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>每一个几点都有 cloneNode()方法, 返回该节点的一个全新副本<br>传递参数 true 能地鬼复制所有后代节点</p></blockquote><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><blockquote><p>Node的方法 appendChild() 和 insertBefore()<br>在已存在的文档中的一个节点再次插入,那个节点将自动从它当前的位置删除并在新的位置重新插入</p></blockquote><h2 id="删除替换节点"><a href="#删除替换节点" class="headerlink" title="删除替换节点"></a>删除替换节点</h2><blockquote><p>removeChild() 从文档中删除一个节点<br>replaceChild() 删除 一个子节点并用新节点替代<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.parentNode.replaceChild(<span class="built_in">document</span>.createTextNode(<span class="string">'new TextNode'</span>), node)</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h1><blockquote><p>文档坐标,相对于文档左上角<br>视口坐标, 相对于浏览器去除外壳的左上角</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询窗口滚动条位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffsets</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">    w = w || <span class="built_in">window</span>;</span><br><span class="line">    <span class="comment">// 现代浏览器 IE9+</span></span><br><span class="line">    <span class="keyword">if</span> (w.pageXOffset != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">x</span>: w.pageXOffset, <span class="attr">y</span>: w.pageYOffset&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IE8-</span></span><br><span class="line">    <span class="keyword">var</span> d = w.document;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x: d.documentElement.scrollLeft,</span><br><span class="line">            y: d.documentElement.scrollTop</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 怪异模式下</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        x: d.body.scrollLeft,</span><br><span class="line">        y: d.body.scrollTop</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询窗口视口尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportSize</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">    w = w || <span class="built_in">window</span>;</span><br><span class="line">    <span class="comment">// 现代浏览器 IE9+</span></span><br><span class="line">    <span class="keyword">if</span> (w.innerWidth != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">w</span>: w.innerWidth, <span class="attr">h</span>: w.innerHeight&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IE8-</span></span><br><span class="line">    <span class="keyword">var</span> d = w.document;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            w: d.documentElement.clientWidth,</span><br><span class="line">            h: d.documentElement.clientHeight</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 怪异模式下</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        w: d.body.clientWidth,</span><br><span class="line">        h: d.body.clientWidth</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询元素的几何尺寸"><a href="#查询元素的几何尺寸" class="headerlink" title="查询元素的几何尺寸"></a>查询元素的几何尺寸</h2><blockquote><p>getBoundingClientRect() 返回元素  left right top 和 bottom的对象; 现代浏览器还包括width和height<br>查询内联元素每个独立举行: getClientRects()</p></blockquote><h2 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h2><blockquote><p>scrollTo() / scrollBy()</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 e 的位置  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElePosition</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        x += e.offsetLeft;</span><br><span class="line">        y += e.offsetTop;</span><br><span class="line">        e = e.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        x: x,</span><br><span class="line">        y: y</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文档选取内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelection</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().toString() : <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于 文本输入域和 textarea  // IE9+</span></span><br><span class="line">el.value.substring(el.selectionStart, el.selectionEnd);</span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote></script></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nodejs 踩坑微信JS-SDK记录</title>
      <link href="/2015/04/22/%E4%BD%BF%E7%94%A8nodejs-%E8%B8%A9%E5%9D%91%E5%BE%AE%E4%BF%A1JS-SDK%E8%AE%B0%E5%BD%95/"/>
      <url>/2015/04/22/%E4%BD%BF%E7%94%A8nodejs-%E8%B8%A9%E5%9D%91%E5%BE%AE%E4%BF%A1JS-SDK%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>使用nodejs 踩坑微信JS-SDK记录<br><a id="more"></a></p><h1 id="JS-SDK-要点"><a href="#JS-SDK-要点" class="headerlink" title="JS-SDK 要点"></a>JS-SDK 要点</h1><ol><li><p>微信测试号; 扫码登录;无需认证(只是名称统一为微信测试号)<br><a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p></li><li><p>JS-SDK 说明文档<br><a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html#JSSDK.E4.BD.BF.E7.94.A8.E6.AD.A5.E9.AA.A4" target="_blank" rel="noopener">http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html#JSSDK.E4.BD.BF.E7.94.A8.E6.AD.A5.E9.AA.A4</a></p></li><li><p>签名验证</p><blockquote><p>获取token</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">config, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tokenUrl = <span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appId='</span> + config.appId + <span class="string">'&amp;secret='</span> + config.appSecret;</span><br><span class="line">    request.get(tokenUrl, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            cb(<span class="string">'getToken error'</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> token = <span class="built_in">JSON</span>.parse(body).access_token;</span><br><span class="line">                cb(<span class="literal">null</span>, token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                cb(<span class="string">'getToken error'</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取ticket</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewTicket</span>(<span class="params">token, cb</span>) </span>&#123;</span><br><span class="line">    request.get(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + token + <span class="string">'&amp;type=jsapi'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, res, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            cb(<span class="string">'getNewTicket error'</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> ticket = <span class="built_in">JSON</span>.parse(body).ticket;</span><br><span class="line">                cb(<span class="literal">null</span>, ticket);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                cb(<span class="string">'getNewTicket error'</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成JS-SDK权限验证的签名了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimesTamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>) + <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNonceStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timestamp = getTimesTamp();</span><br><span class="line"><span class="keyword">var</span> noncestr = getNonceStr();</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'jsapi_ticket='</span> + result + <span class="string">'&amp;noncestr='</span>+ noncestr+<span class="string">'&amp;timestamp='</span> + timestamp + <span class="string">'&amp;url='</span> + u;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="keyword">var</span> signature = crypto.createHash(<span class="string">'sha1'</span>).update(str).digest(<span class="string">'hex'</span>);</span><br><span class="line">cb(<span class="literal">null</span>, &#123;</span><br><span class="line">    appId: config.appId,</span><br><span class="line">    timestamp: timestamp,</span><br><span class="line">    nonceStr: noncestr,</span><br><span class="line">    signature: signature</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><ol><li>官方提供的  微信 JS 接口签名校验工具<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a>中有一句话 <code>对于没有只有域名没有 path 的 URL ，浏览器会自动加上 / 作为 path，如打开 http://qq.com 则获取到的 URL 为 http://qq.com/）</code>我很2的在所有URL最后加入 <code>/</code>   (┬＿┬);</li><li><code>timesTamp</code> 为  <code>parseInt(new Date().getTime() / 1000) + &#39;&#39;;</code></li><li><a href="http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">JS接口安全域名</a>配置中,是配置域名+端口,不是网址!!<br>所以 <code>416973.dowei8.com:21119/tt</code> 类似的网址只能配置为<code>dowei8.com:21119</code></li><li>微信有缓存…. 有时是缓存问题………</li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="下载地址-http-git-oschina-net-xinshangshangxin-node-JS-SDK-signature"><a href="#下载地址-http-git-oschina-net-xinshangshangxin-node-JS-SDK-signature" class="headerlink" title="下载地址: http://git.oschina.net/xinshangshangxin/node_JS-SDK_signature"></a>下载地址: <a href="http://git.oschina.net/xinshangshangxin/node_JS-SDK_signature" target="_blank" rel="noopener">http://git.oschina.net/xinshangshangxin/node_JS-SDK_signature</a></h2><blockquote><p>映射外网/上传服务器<br><code>npm install</code> 安装依赖包<br><code>node index.js</code> 运行主程序<br>配置 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">JS接口安全域名</a><br>微信访问</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/willian12345/wechat-JS-SDK-demo" target="_blank" rel="noopener">https://github.com/willian12345/wechat-JS-SDK-demo</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> node </tag>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决provisional headers are shown的过程</title>
      <link href="/2015/04/20/%E8%A7%A3%E5%86%B3provisional-headers-are-shown%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2015/04/20/%E8%A7%A3%E5%86%B3provisional-headers-are-shown%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>解决provisional headers are shown的过程<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习Angular时写了一个音乐播放器<br><a href="http://git.oschina.net/xinshangshangxin/ngMusic" target="_blank" rel="noopener">oschina地址</a><br><a href="https://github.com/xinshangshangxin/ngMusic" target="_blank" rel="noopener">github地址</a><br>为了兼容android chrome,<a href="http://hi.baidu.com/hf_zd/item/f65a68b8868a377e254b09a5" target="_blank" rel="noopener">参考了这篇文章</a>;</p><blockquote><p>在数据读取中要中断的时候，可以把audio.src设为null，并显式调用audio.load()，<br>此时对于Android会中断数据读取，并且canplay也不会发生</p></blockquote><p>所以在我的代码中也如此使用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_audio.src = <span class="literal">null</span>;</span><br><span class="line">_audio.load();</span><br></pre></td></tr></table></figure><p>但是由于百度有些音乐无法直接播放;需要服务器转发,所以音乐链接带上了服务器转发地址</p><h1 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h1><p>在前面几首歌上带上转发没有问题;但是当列表循环后;就出现了无法从服务器上获取音乐内容了;<br>查看chrome控制台,链接上显示 <code>Provisional headers are shown</code></p><figure class="image-box">                <img src="/img/chrome/error.png" alt="error" title="" class="">                <p>error</p>            </figure><p>关闭标签;重新打开网址;音乐有又可以加载了!!!</p><h1 id="尝试过程"><a href="#尝试过程" class="headerlink" title="尝试过程"></a>尝试过程</h1><p>刚开始以为是因为本地环境的问题;将代码挂在到服务器上,依然有问题<br>开始谷歌搜索 <code>Provisional headers are shown</code>, 在这篇文章中<a href="http://segmentfault.com/q/1010000000364871" target="_blank" rel="noopener">http://segmentfault.com/q/1010000000364871</a>  </p><blockquote><p>之所以会出现这个警告，是因为去获取该资源的请求其实并（还）没有真的发生，所以 Header 里显示的是伪信息，直到服务器真的有响应返回，这里的 Header 信息才会被更新为真实的。不过这一切也可能不会发生，因为该请求可能会被屏蔽。比如说 AdBlock 什么的，当然了不全是浏览器扩展，具体情况具体分析了</p></blockquote><p>但是我测试的浏览器只有开发工具,没有 AdBlock之类的;所以pass</p><p>接着 有找到这篇文章<a href="https://code.google.com/p/chromium/issues/detail?id=327581" target="_blank" rel="noopener">https://code.google.com/p/chromium/issues/detail?id=327581</a></p><blockquote><p>That is because websockets never report their requestHeadersText.<br>Fixed for the new implementation.</p></blockquote><p>在新版本中修复… 我的chrome是42;所以 pass</p><p>接着在<a href="http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger" target="_blank" rel="noopener">http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a><br>发现推荐答案依然是 AdBlock等之类的拦截, 继续看回答, 说使用 <code>chrome://net-internals</code>; 玩了下,根本就不知道怎么玩,pass</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>接着往下查看 发现有个回答</p><blockquote><p>I believe it happens when the actual request is not sent. Usually happens when you are loading a cached resource.</p></blockquote><p>回答内容是说请求没有被发送,因为是载入缓存资源.<br>一想很对啊,音乐资源默认是缓存的,但是设置不缓存会让音乐加载速度太慢;继续往下查看</p><blockquote><p>Another possible scenario I’ve seen - the exact same request is being sent again just after few milliseconds (most likely due to a bug in the client side).<br>In that case you’ll also see that the status of the first request is “canceled” and that the latency is only several milliseconds.</p></blockquote><p>大概是说 完全相同的请求间隔数毫秒(太短),导致加载失败,查看了chrome控制台发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://ngmusic.coding.io/null</span><br><span class="line">http://ngmusic.coding.io/serverget?url=http%3A%2F%2Ffile.qianqian.com.....</span><br><span class="line">都有 Provisional headers are shown</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="/img/chrome/3.png" alt="error" title="" class="">                <p>error</p>            </figure><figure class="image-box">                <img src="/img/chrome/4.png" alt="error" title="" class="">                <p>error</p>            </figure><p>猜想是因为 <code>http://...../null</code> 加载失败 导致 <code>http://..../serverget?url=http%3A%2F%2Ffile.qianqian.com.....</code>的缓存请求也失败(阻塞)</p><p>故将上面 <code>null</code> 加载去掉<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _audio.src = null;</span></span><br><span class="line"><span class="comment">// _audio.load();</span></span><br></pre></td></tr></table></figure></p><p>经过测试,发现的确从缓存中获取了~~~<br><figure class="image-box">                <img src="/img/chrome/2.png" alt="error" title="" class="">                <p>error</p>            </figure></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><code>Provisional headers are shown</code><br>出现在 载入缓存资源,请求没有被发送, 而如果上一个资源加载失败,可能导致从缓存加载的资源失败,<br>即缓存资源请求之前的请求不能失败,不然就有可能出现问题</p><p>至此,终于搞定了这个渣问题!!!!!!!!!!!!!!!!!!!!!!</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger" target="_blank" rel="noopener">http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a></li><li><a href="https://code.google.com/p/chromium/issues/detail?id=327581" target="_blank" rel="noopener">https://code.google.com/p/chromium/issues/detail?id=327581</a></li><li><a href="http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger" target="_blank" rel="noopener">http://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a>  </li><li><a href="http://segmentfault.com/q/1010000000364871" target="_blank" rel="noopener">http://segmentfault.com/q/1010000000364871</a>  </li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置proxy_pass路径问题</title>
      <link href="/2015/04/16/Nginx%E9%85%8D%E7%BD%AEproxy-pass%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2015/04/16/Nginx%E9%85%8D%E7%BD%AEproxy-pass%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>初次尝试nginx遇到的问题<br><a id="more"></a></p><blockquote><p>proxy_pass后的url最后的/<br>当加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走<br>如果没有/，则会把匹配的路径部分也给代理走</p></blockquote><blockquote><p>假设请求url: <code>http://servername/node/index.html</code></p></blockquote><blockquote><p>配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /node/  &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:1339/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代理url(实际url)<code>http://servername/node/index.html</code></p></blockquote><blockquote><p>配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /node  &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:1339/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代理url(实际url)<code>http://servername/index.html</code></p></blockquote><p>可以通过rewrite来实现/的功能</p><blockquote><p>配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /node  &#123;</span><br><span class="line">    rewrite /node/(.+)$ /$<span class="number">1</span> <span class="keyword">break</span>;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:1339/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代理url(实际url)<code>http://servername/node/index.html</code></p></blockquote><p>此外 <code>http://127.0.0.1:1339/</code> 的最后一个 <code>/</code> 如果不写;会导致 <code>404 Not Found</code></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.tech126.com/nginx-proxy-pass/" target="_blank" rel="noopener">http://www.tech126.com/nginx-proxy-pass/</a></p><p><a href="http://cssor.com/nginx-location-configuration.html" target="_blank" rel="noopener">http://cssor.com/nginx-location-configuration.html</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记6_正则表达式</title>
      <link href="/2015/04/12/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2015/04/12/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B06-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式150412<br><a id="more"></a></p><blockquote><p>具有特殊含义的标点符号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^ $ . * + ? = ! : | \ / ( ) [ ] &#123; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>选择项尝试匹配次序是从左到右,直到发现匹配项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'ab'</span>.match(<span class="regexp">/a|ab/g</span>));  <span class="comment">// [ 'a' ]</span></span><br></pre></td></tr></table></figure><blockquote><p>引用 \n, n由参与计数的左括号位置决定</p></blockquote><blockquote><p>\b 字符边界  [\b] 退格符</p></blockquote><blockquote><p>m 多行匹配模式, ^和$ 匹配行的开始处和结束处</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'str\nstr'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/^\w+$/m</span>));   <span class="comment">// [ 'str', index: 0, input: 'str\nstr' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/^\w+$/</span>));    <span class="comment">// null</span></span><br></pre></td></tr></table></figure><blockquote><p>search(regexp)  </p><blockquote><p>如果参数不是正则表达式,则首先通过RegExp构造函数将它转换为正则表达式<br>search 忽略正则表达式参数中的修饰符 g</p></blockquote></blockquote><blockquote><p>replace (searchValue, replaceValue)</p><blockquote><p>如果 searchValue 不是正则表达式, replace将直接搜索这个字符串<br>replaceValue 如果出现 $加数字, 则使用制定的子表达式相匹配的文本来替换这个字符串<br>replaceValue 可以为函数…………</p></blockquote></blockquote><blockquote><p>match</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(a(\w))/</span>;</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/(a(\w))/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abac'</span>.match(reg));     <span class="comment">// [ 'ab', 'ab', 'b', index: 0, input: 'abac' ]</span></span><br><span class="line">                        <span class="comment">//[ 没有括号的匹配, 第一个左括号的匹配, 第二个左括号的匹配 , index: 0, input: 'abac']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abae'</span>.match(reg2));    <span class="comment">//[ 'ab', 'ae' ]</span></span><br><span class="line">                                    <span class="comment">// [第一次匹配,  第二次匹配]</span></span><br></pre></td></tr></table></figure><blockquote><p>给RegExp()传入一个字符串表述的正则表达式,必须将’\’ 替换为 ‘\\‘</p></blockquote><blockquote><p>Regexp.exec() 总是返回一个匹配结果,并提供关于本次匹配的完整信息</p></blockquote><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记5_类和模块</title>
      <link href="/2015/04/12/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B05-%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/"/>
      <url>/2015/04/12/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B05-%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>类和模块150412<br><a id="more"></a></p><h1 id="类和原型"><a href="#类和原型" class="headerlink" title="类和原型"></a>类和原型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">    <span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    F.prototype = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个能表示值的范围的类</span></span><br><span class="line"><span class="comment">// 工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">from, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = inherit(range.methods);</span><br><span class="line">    r.from = <span class="keyword">from</span>;</span><br><span class="line">    r.to = to;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">range.methods = &#123;</span><br><span class="line">    includes: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class="keyword">this</span>.to;</span><br><span class="line">    &#125;,</span><br><span class="line">    foreach: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.from); x &lt;= <span class="keyword">this</span>.to; x++) &#123;</span><br><span class="line">            f(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.from + <span class="string">'....'</span> + <span class="keyword">this</span>.to + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = range(<span class="number">1</span>, <span class="number">3</span>);            </span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));     <span class="comment">// true</span></span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);         <span class="comment">// 1  2  3</span></span><br><span class="line"><span class="built_in">console</span>.log(r);                 <span class="comment">// &#123; from: 1, to: 3 &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个能表示值的范围的类</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Range</span>(<span class="params">from, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.from = <span class="keyword">from</span>;</span><br><span class="line">    <span class="keyword">this</span>.to = to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Range.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Range,</span><br><span class="line">    includes: function(x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class="keyword">this</span>.to;</span><br><span class="line">    &#125;,</span><br><span class="line">    foreach: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.from); x &lt;= <span class="keyword">this</span>.to; x++) &#123;</span><br><span class="line">            f(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.from + <span class="string">'....'</span> + <span class="keyword">this</span>.to + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));     <span class="comment">// true</span></span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);         <span class="comment">// 1  2  3</span></span><br><span class="line"><span class="built_in">console</span>.log(r);                 <span class="comment">// &#123; from: 1, to: 3 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="javascript-中-Java-式继承"><a href="#javascript-中-Java-式继承" class="headerlink" title="javascript 中 Java 式继承"></a>javascript 中 Java 式继承</h1><blockquote><p>javascript定义类的步骤:</p><blockquote><ol><li>定义一个构造函数,并设置初始化新对象的实例属性</li><li>给构造函数的prototype对象定义实例的方法</li><li>给构造函数定义类字段和类属性</li></ol></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// P182中的extend</span></span><br><span class="line"><span class="keyword">var</span> extend = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> &#123; <span class="attr">toString</span>: <span class="literal">null</span>&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                    o[prop] = source[prop];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">path_extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                o[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; prototyprops.length; j++) &#123;</span><br><span class="line">                prop = prototyprops[j];</span><br><span class="line">                <span class="keyword">if</span> (source.hasOwnProperty(prop)) &#123;</span><br><span class="line">                    o[prop] = source[prop];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prototyprops = [<span class="string">'toString'</span>, <span class="string">'valueOf'</span>, <span class="string">'constructor'</span>, <span class="string">'hasOwnProperty'</span>, <span class="string">'isPrototypeOf'</span>,</span><br><span class="line">                    <span class="string">'propertyIsEnumerable'</span>, <span class="string">'toLocaleString'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个用以定义类的简单函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineClass</span>(<span class="params">constructor,           <span class="regexp">//</span> 用以设置实例的属性的函数</span></span></span><br><span class="line"><span class="function"><span class="params">                    methods,                <span class="regexp">//</span> 实例的方法, 复制至原型中</span></span></span><br><span class="line"><span class="function"><span class="params">                    statics</span>) </span>&#123;              <span class="comment">// 类属性, 复制至构造函数</span></span><br><span class="line">    <span class="keyword">if</span> (methods) &#123;</span><br><span class="line">        extend(<span class="keyword">constructor</span>.prototype, methods);</span><br><span class="line">    &#125;</span><br><span class="line">    if (statics) &#123;</span><br><span class="line">        extend(<span class="keyword">constructor</span>, statics);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="keyword">constructor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Range类的实现</span><br><span class="line">var simpleRange = defineClass(function(from, to) &#123;</span><br><span class="line">    <span class="keyword">this</span>.from = <span class="keyword">from</span>;</span><br><span class="line">    <span class="keyword">this</span>.to = to;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    includes: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class="keyword">this</span>.to;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.from + <span class="string">'....'</span> + <span class="keyword">this</span>.to + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    uptp: <span class="function"><span class="keyword">function</span>(<span class="params">to</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> simpleRange(<span class="number">0</span>, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> simpleRange(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(r);                 <span class="comment">// &#123; from: 1, to: 3 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.values = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.add.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">var</span> str = <span class="built_in">Set</span>._v2s(val);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.values.hasOwnProperty(str)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.values[str] = val;</span><br><span class="line">            <span class="keyword">this</span>.n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="built_in">Set</span>._v2s(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.values.hasOwnProperty(str)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.values[str];</span><br><span class="line">            <span class="keyword">this</span>.n--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>.prototype.contains = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.values.hasOwnProperty(<span class="built_in">Set</span>._v2s(value));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>.prototype.foreach = <span class="function"><span class="keyword">function</span>(<span class="params">f, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> str <span class="keyword">in</span> <span class="keyword">this</span>.values) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.values.hasOwnProperty(str)) &#123;</span><br><span class="line">            f.call(context, <span class="keyword">this</span>.values[str]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>._v2s = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (val) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">undefined</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'u'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">null</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'n'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'t'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'f'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">typeof</span>(val)) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'#'</span> + val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'"'</span> + val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> :</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'@'</span> + objectId(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">objectId</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> prop = <span class="string">'|**objectid**|'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!o.hasOwnProperty(prop)) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(o, prop, &#123;</span><br><span class="line">                    writable: <span class="literal">true</span>,</span><br><span class="line">                    enumerable: <span class="literal">false</span>, <span class="comment">//不可枚举</span></span><br><span class="line">                    value: <span class="built_in">Set</span>._v2s.next++</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>._v2s.next = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="string">'name'</span>: <span class="string">'shang'</span>&#125;;</span><br><span class="line">mySet.add(o);</span><br><span class="line">mySet.add(o);</span><br><span class="line"><span class="built_in">console</span>.log(mySet.size());      <span class="comment">// 1</span></span><br><span class="line">mySet.foreach(<span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o);             <span class="comment">// &#123; name: 'shang' &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySet.contains(o));     <span class="comment">// true</span></span><br><span class="line">mySet.remove(o);</span><br><span class="line"><span class="built_in">console</span>.log(mySet.size());          <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用枚举类型表示一副扑克牌</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /**</span></span><br><span class="line"><span class="comment"> * 兼容ECMAScript 5</span></span><br><span class="line"><span class="comment"> * 返回一个继承自原型对象p的属性的新对象</span></span><br><span class="line"><span class="comment"> * @param p 要继承原型对象</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 新对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">    <span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t != <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    F.prototype = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型</span></span><br><span class="line"><span class="comment"> * @param namesToValues 类的每个实例的名字和值</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125;  构造函数 包含 名/值的映射表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumeration</span>(<span class="params">namesToValues</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> enumeration = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'can\'t'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> proto = enumeration.prototype = &#123;</span><br><span class="line">        construcetor: enumeration,</span><br><span class="line">        toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;,</span><br><span class="line">        valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;,</span><br><span class="line">        toJson: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    enumeration.values = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> namesToValues) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = inherit(proto);</span><br><span class="line">        e.name = name;</span><br><span class="line">        e.value = namesToValues[name];</span><br><span class="line">        enumeration[name] = e;</span><br><span class="line">        enumeration.values.push(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enumeration.foreach = <span class="function"><span class="keyword">function</span>(<span class="params">fun, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.values.length; i++) &#123;</span><br><span class="line">            fun.call(context, <span class="keyword">this</span>.values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enumeration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Card</span>(<span class="params">suit, rank</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.suit = suit;</span><br><span class="line">    <span class="keyword">this</span>.rank = rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Card.Suit = enumeration(&#123;</span><br><span class="line">    Clubs: <span class="number">1</span>,</span><br><span class="line">    Diamonds: <span class="number">2</span>,</span><br><span class="line">    Hearts: <span class="number">3</span>,</span><br><span class="line">    Spades: <span class="number">4</span></span><br><span class="line">&#125;);</span><br><span class="line">Card.Rank = enumeration(&#123;</span><br><span class="line">    Two: <span class="number">2</span>,</span><br><span class="line">    Three: <span class="number">3</span>,</span><br><span class="line">    Four: <span class="number">4</span>,</span><br><span class="line">    Five: <span class="number">5</span>,</span><br><span class="line">    Six: <span class="number">6</span>,</span><br><span class="line">    Seven: <span class="number">7</span>,</span><br><span class="line">    Eight: <span class="number">8</span>,</span><br><span class="line">    Nine: <span class="number">9</span>,</span><br><span class="line">    Ten: <span class="number">10</span>,</span><br><span class="line">    Jack: <span class="number">11</span>,</span><br><span class="line">    Queen: <span class="number">12</span>,</span><br><span class="line">    King: <span class="number">13</span>,</span><br><span class="line">    Ace: <span class="number">14</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Card.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rank.toString() + <span class="string">'of'</span> + <span class="keyword">this</span>.suit.toString();</span><br><span class="line">&#125;;</span><br><span class="line">Card.prototype.compareTo = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rank &lt; that.rank) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rank &gt; that.rank) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Card.orderByRank = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">&#125;;</span><br><span class="line">Card.orderBySuit = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.suit &lt; b.suit) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.suit &gt; b.suit) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.rank &lt; b.rank) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.rank &gt; b.rank) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 牌组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cards = <span class="keyword">this</span>.cards = [];</span><br><span class="line">    Card.Suit.foreach(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        Card.Rank.foreach(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 无法使用 this</span></span><br><span class="line">            cards.push(<span class="keyword">new</span> Card(r, s));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洗牌</span></span><br><span class="line">Deck.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deck = <span class="keyword">this</span>.cards, len = deck.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> temp = deck[i];</span><br><span class="line">        deck[i] = deck[r];</span><br><span class="line">        deck[r] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 发牌</span></span><br><span class="line">Deck.prototype.deal = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cards.length &lt; n) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'out of crads length'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cards.splice(<span class="keyword">this</span>.cards.length - n, n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deck = (<span class="keyword">new</span> Deck()).shuffle();</span><br><span class="line"><span class="keyword">var</span> hand = deck.deal(<span class="number">13</span>).sort(Card.orderBySuit);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(deck);</span><br><span class="line"><span class="built_in">console</span>.log(hand);</span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记5_函数</title>
      <link href="/2015/04/08/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B05-%E5%87%BD%E6%95%B0/"/>
      <url>/2015/04/08/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B05-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>函数 150408<br><a id="more"></a></p><h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><blockquote><p><code>this</code> 是一个关键字; 不允许给 <code>this</code> 赋值</p></blockquote><blockquote><p>嵌套函数作为方法调用,其 <code>this</code> 的值指向调用它的对象<br>嵌套函数作为函数调用,其 <code>this</code> 在 非严格模式下为 全局对象, 在严格模式下为 undefined</p></blockquote><h1 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h1><blockquote><p>构造函数创建一个新的空对象,这个对象继承自构造函数的 <code>prototype</code> 属性,构造函数可以用 <code>this</code> 引用这个新创建的对象</p></blockquote><blockquote><p>如果构造函数显示的使用 <code>return</code> 返回一个对象, 那么调用表达式的值就是这个对象<br>如果构造函数使用 <code>return</code> 但没有返回值,或者返回一个原始值, 那么忽略返回值, 同时这个新对象最为调用结果</p></blockquote><h1 id="自定义函数属性"><a href="#自定义函数属性" class="headerlink" title="自定义函数属性"></a>自定义函数属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算阶乘,并将结果缓存值函数的属性当中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(n) &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; n === <span class="built_in">Math</span>.round(n)) &#123;  <span class="comment">// 有限正整数</span></span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;              <span class="comment">// 特例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!(n <span class="keyword">in</span> factorial)) &#123;                 <span class="comment">// 如果没有缓存结果</span></span><br><span class="line">            factorial[n] = n * factorial(n - <span class="number">1</span>);      <span class="comment">// 计算结果并缓存</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factorial[n];                          <span class="comment">// 返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NaN</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">4</span>));          <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>javascript此法作用域的基本规则: 函数执行到作用域链,这个作用域链是函数定义的时候创建的<br>函数定义时的作用域链 到函数执行是依然有效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(checkScope());   <span class="comment">// local</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(checkScope()());   <span class="comment">// local</span></span><br></pre></td></tr></table></figure><h1 id="Function-prototype-call-thisArg-arg1-arg2-…-和-Function-prototype-apply-thisArg-argArray"><a href="#Function-prototype-call-thisArg-arg1-arg2-…-和-Function-prototype-apply-thisArg-argArray" class="headerlink" title="Function.prototype.call(thisArg [ , arg1 [ , arg2, … ] ] ) 和 Function.prototype.apply(thisArg, argArray)"></a><code>Function.prototype.call(thisArg [ , arg1 [ , arg2, … ] ] )</code> 和 <code>Function.prototype.apply(thisArg, argArray)</code></h1><blockquote><p>ECMAScript 3 和 非严格模式中,传入的 <code>null</code> 和 <code>undefined</code> 都会被全局对象代替, 而其它原始值则会被相应的包装对象代替<br>ECMAScript 5 严格模式下, 即使传入 <code>null</code> <code>undefined</code> 或原始值 <code>thisArg</code> 会编编程 <code>this</code> 的值</p></blockquote><blockquote><p><code>apply()</code> 的参数数组可以是类数组对象也可以使真实数组对象</p></blockquote><h1 id="Function-prototype-bind-thisArg-arg1-arg2-…"><a href="#Function-prototype-bind-thisArg-arg1-arg2-…" class="headerlink" title="Function.prototype.bind (thisArg [, arg1 [, arg2, …]])"></a><code>Function.prototype.bind (thisArg [, arg1 [, arg2, …]])</code></h1><blockquote><p>ECMAScript 5新增方法, ECMAScript 3实现如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this 和 arguments 保存</span></span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> boundArgs = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 创建一个实参列表;将bind()的第二个及后续实参都传入这个函数</span></span><br><span class="line">            <span class="keyword">var</span> args = [];</span><br><span class="line">            <span class="keyword">var</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; boundArgs.length; i++) &#123;</span><br><span class="line">                args.push(boundArgs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将self作为o的方法调用,传入这些实参</span></span><br><span class="line">            <span class="keyword">return</span> self.apply(o, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function() 构造函数"></a><code>Function()</code> 构造函数</h1><blockquote><p><code>Function()</code> 构造函数所创建的函数的词法作用域在全局作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'return scope'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(constructFunction()());     <span class="comment">// global</span></span><br></pre></td></tr></table></figure><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="使用函数处理数组"><a href="#使用函数处理数组" class="headerlink" title="使用函数处理数组"></a>使用函数处理数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算 平均数 和 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;              <span class="comment">// 计算和</span></span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;              <span class="comment">// 计算平方</span></span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> mean = data.reduce(sum) / data.length;      <span class="comment">// 平均数</span></span><br><span class="line"><span class="keyword">var</span> deviations = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;         </span><br><span class="line">    <span class="keyword">return</span> x - mean;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> stddev = <span class="built_in">Math</span>.sqrt(deviations.map(square).reduce(sum) / (data.length - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mean);          <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(deviations);    <span class="comment">// [ -2, -1, 0, 1, 2 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(stddev);        <span class="comment">//1.5811388300841898</span></span><br></pre></td></tr></table></figure><blockquote><p>ECMAScript 3  map 和 reduce 实现:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map ? <span class="function"><span class="keyword">function</span>(<span class="params">arr, fun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(fun);</span><br><span class="line">&#125; : <span class="function"><span class="keyword">function</span>(<span class="params">arr, fun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">            results[i] = fun.call(<span class="literal">null</span>, arr[i], i, arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reduce = <span class="built_in">Array</span>.prototype.reduce ? <span class="function"><span class="keyword">function</span>(<span class="params">arr, fun, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(fun, initial);</span><br><span class="line">&#125; : <span class="function"><span class="keyword">function</span>(<span class="params">arr, fun, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length, accumulator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        accumulator = initial;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">                accumulator = a[i++];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i === len) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">            accumulator = fun.call(<span class="literal">undefined</span>, accumulator, arr[i], i, arr);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>定义: 操作函数的函数, 接受一个或多个函数为参数,并返回一个新函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回fun 的返回值的逻辑非</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">not</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = fun.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> !result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;        <span class="comment">// 判断x是否为偶数</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> odd = not(even);        <span class="comment">// 判断是否为奇数</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(even)); <span class="comment">// [ false, true, false, true, false ]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(odd)); <span class="comment">//  [ true, false, true, false, true ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算f(g())</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.call(<span class="keyword">this</span>, g.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> squareofsum = compose(square, sum);</span><br><span class="line"><span class="built_in">console</span>.log(squareofsum(<span class="number">2</span>, <span class="number">3</span>));   <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><h2 id="不完全函数"><a href="#不完全函数" class="headerlink" title="不完全函数"></a>不完全函数</h2><blockquote><p>f(1, 2, 3, 4, 5, 6) 的调用改为 f(1, 2)(3, 4)(5, 6);后者包含上次调用, 和每次调用相关的函数就是 ‘不完全函数’</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将类数组对象转换为真正的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array</span>(<span class="params">arr, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(arr, n || <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数的实参传递至左侧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialLeft</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(args, <span class="number">1</span>);</span><br><span class="line">        a = a.concat(array(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数的实参传递值右侧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialRight</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(<span class="built_in">arguments</span>);</span><br><span class="line">        a = a.concat(array(args, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数的实参被用作模板</span></span><br><span class="line"><span class="comment">// 实参列表中的undefined值都被填充</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(args, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                a[i] = <span class="built_in">arguments</span>[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a.concat(array(<span class="built_in">arguments</span>, j));</span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (y - z);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(partialLeft(f, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>));       <span class="comment">// -2  2 * (3 - 4)</span></span><br><span class="line"><span class="built_in">console</span>.log(partialRight(f, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>));      <span class="comment">// 6   3 * (4 - 2)</span></span><br><span class="line"><span class="built_in">console</span>.log(partial(f, <span class="literal">undefined</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>));<span class="comment">// -6  3 * (2 - 4)</span></span><br></pre></td></tr></table></figure><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><blockquote><p>将上次计算的结果缓存起来,这种缓存技巧叫做记忆</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f()的带记忆功能的版本</span></span><br><span class="line"><span class="comment">// 只有当f()的实参字符串表示都不相同是它才会工作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;     <span class="comment">// 缓存保存在闭包内</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将实参转换为字符串形式, 并将其用做缓存的键</span></span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">arguments</span>.length + <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[key] = f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回2个整数的最大公约数</span></span><br><span class="line"><span class="comment">// 欧几里德算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        t = b;</span><br><span class="line">        b = a;</span><br><span class="line">        a = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        t = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gcdmemo = memorize(gcd);</span><br><span class="line"><span class="built_in">console</span>.log(gcdmemo(<span class="number">85</span>, <span class="number">187</span>));   <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = memorize(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt;= <span class="number">1</span>) ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">5</span>));  <span class="comment">// 120   1~4的值有缓存</span></span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记4_数组</title>
      <link href="/2015/04/07/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B04-%E6%95%B0%E7%BB%84/"/>
      <url>/2015/04/07/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B04-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记4_数组150407<br><a id="more"></a></p><blockquote><p>如果省略数组直接量的某个值,省略的元素被赋予 <code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, , <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.length + <span class="string">'\n'</span> + a);</span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 1,2,3,,5</span></span><br></pre></td></tr></table></figure><blockquote><p>数组直接量允许有可选的结尾逗号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [,,];</span><br><span class="line"><span class="built_in">console</span>.log(b.length); <span class="comment">// 2  不是3!</span></span><br></pre></td></tr></table></figure><blockquote><p>可以使用负数或非整数,但是数值转换为字符串,作为对象属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line">b[<span class="number">-1.23</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="string">'-1.23'</span>]); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><blockquote><p>如果使用了非负整数的字符串,字符串转换为数组索引,而非对象属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line">b[<span class="string">'1'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="number">1</span>]); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>for/in 循环可以以不同的顺序遍历对象的属性;即数组元素遍历不一定是升序的</p></blockquote><h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><blockquote><p><code>join()</code> 将数组中的所有元素转换为字符串拼接</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(a.join()); <span class="comment">// 1,2,a,b</span></span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="string">'-'</span>)); <span class="comment">// 1-2-a,b</span></span><br></pre></td></tr></table></figure><blockquote><p><code>reverse()</code> 将数组中的元素颠倒顺序,返回逆序数组<br><strong>修改原数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(a.reverse()); <span class="comment">// [ [ 'a', 'b' ], 2, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);          <span class="comment">// [ [ 'a', 'b' ], 2, 1 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>sort()</code> 将数组中的元素排序并返回排序后的数组<br>不带参数时,数组元素以字母表顺序排序<br>如果数组包含 <code>undefined</code> 元素,会被排到数组尾部<br><strong>修改原数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="literal">undefined</span>, <span class="number">2</span>, <span class="number">1</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(a.sort());  <span class="comment">//[ 1, [ 1, 2 ], 2, [ 'a', 'b' ], undefined ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);         <span class="comment">//[ 1, [ 1, 2 ], 2, [ 'a', 'b' ], undefined ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;    <span class="comment">// 从大到小</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(a);         <span class="comment">// [ 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>concat([ item1 [ , item2 [ , … ] ] ])</code> 当以零或更多个参数 item1, item2, 等等，调用 concat 方法，返回一个数组，这个数组包含对象的数组元素和后面跟着的每个参数按照顺序组成的数组元素<br><strong>concat 不会扁平化数组</strong><br><strong>concat 不会修改原数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [[<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>,<span class="number">7</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.concat(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));  <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.concat(b));       <span class="comment">// [ 1, 2, 3, [ 4, 5 ], [ 6, 7 ] ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                 <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                 <span class="comment">// [ [ 4, 5 ], [ 6, 7 ] ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>slice(start, end)</code> 返回一个数组，这个数组包含从第 start 个元素到 – 但不包括 – 第 end 个元素 ( 或如果 end 是 undefined 就到数组末尾 )。如果 start 为负，它会被当做是 length+start，这里的 length 是数组长度。如果 end 为负，它会被当做是 length+end，这里的 length 是数组长度。<br><strong>slice 不会修改原数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>, <span class="number">3</span>));     <span class="comment">//[ 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>));        <span class="comment">// [ 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>, <span class="number">-1</span>));    <span class="comment">// [ 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">-3</span>, <span class="number">-2</span>));   <span class="comment">// [ 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">-2</span>, <span class="number">-3</span>));   <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                 <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>splice(start, deleteCount [,item1[, item2 [, … ] ] ])</code> 从数组索引 start 开始的 deleteCount 个数组元素会被替换为参数 item1, item2, 等等,返回被删除的元素,如果deleteCount省略,则从start到结束的所有元素都将删除<br><strong>splice会修改原数组</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>));           <span class="comment">// [ 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1 ]</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">2</span>));        <span class="comment">// [ 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 4, 5 ]</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'add0'</span>, <span class="string">'add1'</span>));  <span class="comment">// [ 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 'add0', 'add1', 4, 5 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>push( [ item1 [ , item2 [ , … ] ] ])</code>  将参数以他们出现的顺序追加到数组末尾,返回新数组长度<br><strong>会修改原数组</strong></p></blockquote><blockquote><p><code>pop()</code> 删除并返回数组的最后一个元素<br><strong>会修改原数组</strong></p></blockquote><blockquote><p><code>unshift([ item1 [ , item2 [ , … ] ] ])</code> 将参数们插入到数组的开始位置，它们在数组中的顺序与它们出现在参数列表中的顺序相同。返回新数组长度<br><strong>会修改原数组</strong></p></blockquote><blockquote><p><code>shift()</code>  删除并返回数组的第一个元素。<br><strong>会修改原数组</strong></p></blockquote><blockquote><p>toString()</p><ol><li>令 array 为用 this 值调用 ToObject 的结果。</li><li>令 func 为以 “join” 作为参数调用 array 的 [[Get]] 内部方法的结果。</li><li>如果 IsCallable(func) 是 false, 则令 func 为标准内置方法 Object.prototype.toString (15.2.4.2)。</li><li>提供 array 作为 this 值并以空参数列表调用 func 的 [[Call]] 内部方法，返回结果。<br>toString 函数被有意设计成通用的；它的 this 值并非必须是数组对象。因此，它可以作为方法转移到其他类型的对象中。一个宿主对象是否可以正确应用这个 toString 函数是依赖于实现的。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, &#123;<span class="attr">o</span>: <span class="string">'obj'</span>&#125;]];</span><br><span class="line"><span class="built_in">console</span>.log(a.toString());              <span class="comment">// 1,a,b,[object Object]</span></span><br></pre></td></tr></table></figure><h1 id="ECMAScript-5-中的数组方法"><a href="#ECMAScript-5-中的数组方法" class="headerlink" title="ECMAScript 5 中的数组方法"></a>ECMAScript 5 中的数组方法</h1><blockquote><p><code>forEach ( callbackfn [ , thisArg ] )</code>  forEach 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn<br>callbackfn 将传入三个参数：元素的值，元素的索引，和遍历的对象。 如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用<br>forEach 没有 for循环中 break<br><strong>对 forEach 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    sum += value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);                       <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(a);                         <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    arr[index] = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a);                         <span class="comment">// [ 0, 0, 0, 0 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>map ( callbackfn [ , thisArg ] )</code> map 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，并用结果构造一个新数组<br>callbackfn 将传入三个参数：元素的值，元素的索引，和遍历的对象。 如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用<br>callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。<br><strong>对 map 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">a.length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);              <span class="comment">// 1  2  undefined  3  4</span></span><br><span class="line">    <span class="keyword">return</span> value * value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 2, undefined, 3, 4, , , , ,  ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                     <span class="comment">// [ 1, 4, NaN, 9, 16, , , , ,  ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>filter ( callbackfn [ , thisArg ] )</code> filter 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，并用使 callbackfn 返回 true 的所有值构造一个新数组<br>callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。<br>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。<br>callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。<br><strong>对 filter 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">a.length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 2, undefined, 3, 4, , , , ,  ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                     <span class="comment">// [ 1, 2 ]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>every ( callbackfn [ , thisArg ] )</code>   every 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，直到他找到一个使 callbackfn 返回 false 的元素。如果找到这样的元素，every 马上返回 false，否则如果对所有元素 callbackfn 都返回 true，every 将返回 true。<br>callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。<br>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。<br>callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。<br><strong>对 every 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.every(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="literal">undefined</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 2, undefined, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                     <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p><code>some ( callbackfn [ , thisArg ] )</code> some 按照索引的升序，对数组里存在的每个元素调用一次 callbackfn，直到他找到一个使 callbackfn 返回 true 的元素。如果找到这样的元素，some 马上返回 true，否则，some 返回 false<br>callbackfn 时将传入三个参数：元素的值，元素的索引，和遍历的对象。<br>如果提供了一个 thisArg 参数，它会被当作 this 值传给每个 callbackfn 调用。<br>callbackfn 只被实际存在的数组元素调用；它不会被缺少的数组元素调用。<br><strong>对 some 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.some(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="literal">undefined</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 2, undefined, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p><code>reduce ( callbackfn [ , initialValue ] )</code> reduce 按照索引的升序，对数组里存在的每个元素 , 将 callbackfn 作为回调函数调用一次。<br>调用 callbackfn 时将传入四个参数：previousValue（initialValue 的值或上次调用 callbackfn 的返回值），currentValue（当前元素值），currentIndex，和遍历的对象。第一次调用回调函数时，previousValue 和 currentValue 的取值可以是下面两种情况之一。如果为 reduce 调用提供了一个 initialValue，则 previousValue 将等于 initialValue 并且 currentValue 将等于数组的首个元素值。如果没提供 initialValue，则 previousValue 将等于数组的首个元素值并且 currentValue 将等于数组的第二个元素值。如果数组里没有元素并且没有提供 initialValue，则抛出一个 TypeError 异常。<br><strong>对 reduce 的调用不直接更改对象，但是对 callbackfn 的调用可能更改对象。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);                     <span class="comment">// [ 1, 2, undefined, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(b);                     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><blockquote><p><code>reduceRight ( callbackfn [ , initialValue ] )</code> </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);  <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);  <span class="comment">// cba</span></span><br></pre></td></tr></table></figure><blockquote><p><code>indexOf ( searchElement [ , fromIndex ] )</code> 按照索引的升序比较 searchElement 和数组里的元素们，它使用内部的严格相等比较算法，如果找到一个或更多这样的位置，返回这些位置中第一个索引；否则返回 -1<br><code>lastIndexOf ( searchElement [ , fromIndex ] )</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'b'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'b'</span>));</span><br></pre></td></tr></table></figure><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><blockquote><p>ECMAScript 5 中 使用 <code>Array.isArray()</code> 判断是否为数组<br>ECMAScript 3</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="built_in">Function</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">'object'</span></span><br><span class="line">        &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span>;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h1 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h1><blockquote><p>检测类数组对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (o                           <span class="comment">// o 非 null undefined 等</span></span><br><span class="line">        &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">'object'</span>        <span class="comment">// o 是对象</span></span><br><span class="line">        &amp;&amp; <span class="built_in">isFinite</span>(o.length)           <span class="comment">// o.length 是有限数值</span></span><br><span class="line">        &amp;&amp; o.length &gt;= <span class="number">0</span>                <span class="comment">// o.length 是非负数</span></span><br><span class="line">        &amp;&amp; o.length === <span class="built_in">Math</span>.floor(o.length) <span class="comment">// o.length 是整数</span></span><br><span class="line">        &amp;&amp; o.length &lt; <span class="number">4294967296</span>            <span class="comment">// o.length &lt; 2^32</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ECMAScript 5 所有的数组方法都是通用的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.join.call(a, <span class="string">'+'</span>));         <span class="comment">// a+b+c</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(a, <span class="number">0</span>));          <span class="comment">// [ 'a', 'b', 'c' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.map.call(a, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;   <span class="comment">// [ 'A', 'B', 'C' ]</span></span><br><span class="line">    <span class="keyword">return</span> x.toUpperCase();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>作为数组的字符串</p><blockquote><p>字符串是不可变值故把它们作为数组看待是,它们是只读的,所以push(), sort(), reverse() 等方法在字符串上无效</p></blockquote></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="API文档-ECMAScript5-1中文版"><a href="#API文档-ECMAScript5-1中文版" class="headerlink" title="API文档 ECMAScript5.1中文版"></a>API文档 ECMAScript5.1中文版</h2><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南勘误记录</title>
      <link href="/2015/04/05/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%8B%98%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>/2015/04/05/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%8B%98%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="记录我所认为的第六版中文版的错误-欢迎批评"><a href="#记录我所认为的第六版中文版的错误-欢迎批评" class="headerlink" title="记录我所认为的第六版中文版的错误;欢迎批评~~"></a>记录我所认为的第六版中文版的错误;欢迎批评~~</h1><a id="more"></a><h1 id="P56"><a href="#P56" class="headerlink" title="P56"></a>P56</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myscope = <span class="string">"local"</span>;  <span class="comment">//这里显式地声明了一个新的全局变量</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myscope = <span class="string">"local"</span>;  <span class="comment">//这里隐式地声明了一个新的全局变量</span></span><br></pre></td></tr></table></figure><h1 id="P57"><a href="#P57" class="headerlink" title="P57"></a>P57</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkscope()  <span class="comment">// =&gt; "嵌套的作用域"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释部分应保持英文不翻译</span></span><br><span class="line">checkscope()  <span class="comment">// =&gt; "nested scope"</span></span><br></pre></td></tr></table></figure><h1 id="P75"><a href="#P75" class="headerlink" title="P75"></a>P75</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果两个值都是<span class="literal">null</span>或者都是<span class="literal">undefined</span>，则它们不相等。</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果两个值都是<span class="literal">null</span>或者都是<span class="literal">undefined</span>，则它们相等。</span><br></pre></td></tr></table></figure><h1 id="P77"><a href="#P77" class="headerlink" title="P77"></a>P77</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.localCompare()方法</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.localeCompare() <span class="comment">// 个人觉得是prototype; 并且是localeCompare</span></span><br></pre></td></tr></table></figure><h1 id="P125"><a href="#P125" class="headerlink" title="P125"></a>P125</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果之前o继承自属性x</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果之前o继承了属性x</span><br><span class="line">下同，所有“继承自”都应改为“继承了”。</span><br></pre></td></tr></table></figure><h1 id="P129"><a href="#P129" class="headerlink" title="P129"></a>P129</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果x是undefined、null、false、" "、0或NaN,则它保持不变</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串中应没有空格：</span><br><span class="line"><span class="comment">//如果x是undefined、null、false、""、0或NaN,则它保持不变</span></span><br></pre></td></tr></table></figure><h1 id="P140"><a href="#P140" class="headerlink" title="P140"></a>P140</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.esExtensible()</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.isExtensible()</span><br></pre></td></tr></table></figure><h1 id="P145"><a href="#P145" class="headerlink" title="P145"></a>P145</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [,,,]  </span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a1  <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [, , ,];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> <span class="keyword">in</span> a1);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="P150"><a href="#P150" class="headerlink" title="P150"></a>P150</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;        <span class="comment">// 跳过 null, undefined 和不存在元素</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;        <span class="comment">// 跳过 null, undefined , 0, '' 和不存在元素</span></span><br></pre></td></tr></table></figure><h1 id="P152"><a href="#P152" class="headerlink" title="P152"></a>P152</h1><p>数组方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 个人觉得方法不都是在 Array.prototype 上的吗?</span></span><br><span class="line"><span class="comment">// P163 说在Firefox 上可以使用 Array.join() 等,但是chrome下失败........</span></span><br></pre></td></tr></table></figure></p><h1 id="P196"><a href="#P196" class="headerlink" title="P196"></a>P196</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;        <span class="comment">// 判断a是否为偶数的函数</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;        <span class="comment">// 判断x是否为偶数的函数</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="P203"><a href="#P203" class="headerlink" title="P203"></a>P203</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));</span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(r);             <span class="comment">// 输出(1...3)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));</span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);         <span class="comment">// node下正确  chrome/firefox的 Console 下输出如下错误:</span></span><br><span class="line">                                <span class="comment">// TypeError: 'log' called on an object that does not implement interface Console</span></span><br><span class="line">                                <span class="comment">// 参考: https://bugzilla.mozilla.org/show_bug.cgi?id=989619</span></span><br><span class="line"><span class="built_in">console</span>.log(r); <span class="comment">// node下: &#123; from: 1, to: 3 &#125;   chrome下: Object &#123;from: 1, to: 3, includes: function, foreach: function, toString: function&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r.toString());          <span class="comment">// 显示 或 隐式 调用才会输出 (1...3)</span></span><br><span class="line"><span class="built_in">console</span>.log(r + <span class="string">''</span>);</span><br></pre></td></tr></table></figure><h1 id="P204"><a href="#P204" class="headerlink" title="P204"></a>P204</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = range(<span class="number">1</span>, <span class="number">3</span>);            <span class="comment">// 这里应该使用 构造函数的方式了!!</span></span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));</span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> Range(<span class="number">1</span>, <span class="number">3</span>);        <span class="comment">// new Range(1, 3)</span></span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">2</span>));     </span><br><span class="line">r.foreach(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h1 id="P211"><a href="#P211" class="headerlink" title="P211"></a>P211</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toString().match( <span class="regexp">/function\s*([^()*]\(/</span> )[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toString().match( <span class="regexp">/function\s*([^(]*)\(/</span> )[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h1 id="P230"><a href="#P230" class="headerlink" title="P230"></a>P230</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果B方法重载了A方法</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果B方法覆盖了A方法  <span class="comment">// 重载（overload）覆盖（override）</span></span><br><span class="line"><span class="comment">// 英文原版P228  If a method of B overrides a method of A</span></span><br><span class="line"><span class="comment">// 9.7节将所有的override都错误地翻译成了“重载”，应为“覆盖”。</span></span><br></pre></td></tr></table></figure><blockquote><p> 重载是指不同的函数使用相同的函数名，但是函数的参数个数或类型不同。调 的时候根据函数的参数来区别不同的函数。</p></blockquote><blockquote><p> 覆盖（也叫重写）是指在派生类中重新对基类中的虚函数（注意是虚函数）重新实现。即函数名和参数都一样，只是函数的实现体不一样。</p></blockquote><blockquote><p>隐藏是指派生类中的函数把基类中相同名字的函数屏蔽掉了。隐藏与另外两个概念表面上看来很像，很难区分，其实他们的关键区别就是在多态的实现上。什么叫多态？简单地说就是一个接口，多种实现吧。</p></blockquote><blockquote><p><a href="http://blog.csdn.net/yanjun_1982/article/details/470405" target="_blank" rel="noopener">重载 覆盖 解释来自于yanjun_1982</a></p></blockquote><h1 id="P233"><a href="#P233" class="headerlink" title="P233"></a>P233</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但它需要完全重新实现一个add()方法</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但它不需要完全重新实现一个add()方法</span><br></pre></td></tr></table></figure><h1 id="P255"><a href="#P255" class="headerlink" title="P255"></a>P255</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\o     NUL字符(\u0000)]</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span>     NUL字符(\u0000)]   <span class="comment">// 是零不是欧</span></span><br></pre></td></tr></table></figure><h1 id="P256"><a href="#P256" class="headerlink" title="P256"></a>P256</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\w任何ASCII字符组成的单词，等价于[a-zA-Z0<span class="number">-9</span>]</span><br><span class="line">\W任何不是ASCII字符组成的单词，等价于[^a-zA-Z0<span class="number">-9</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\w任何ASCII字符，等价于 [a-zA-Z0<span class="number">-9</span>_]      <span class="comment">// 是字符而非单词，且遗漏原文中等价类的下划线</span></span><br><span class="line">\W任何非ASCII字符，等价于 [^a-zA-Z0<span class="number">-9</span>_]</span><br></pre></td></tr></table></figure><h1 id="P260"><a href="#P260" class="headerlink" title="P260"></a>P260</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Java(?! Script)([A-Z]\w*)/</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Java(?!Script)([A-Z]\w*)/     没有空格</span><br></pre></td></tr></table></figure><h1 id="P260-1"><a href="#P260-1" class="headerlink" title="P260"></a>P260</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它可以匹配“JavaScript”，但不能匹配“JavaScripter”。</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原文: it matches “JavaScrip” but not “JavaScript” or “JavaScripter”.</span></span><br><span class="line">它可以匹配“JavaScrip”，但不能匹配“JavaScript”或“JavaScripter”。</span><br></pre></td></tr></table></figure><h1 id="P371"><a href="#P371" class="headerlink" title="P371"></a>P371</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextSibling previoursSibling   <span class="comment">// 拼写错误</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextSibling previousSibling</span><br></pre></td></tr></table></figure><h1 id="P393"><a href="#P393" class="headerlink" title="P393"></a>P393</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Window对象的ScrollTop()方法</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Window对象的ScrollTo()方法</span><br></pre></td></tr></table></figure><h1 id="P408"><a href="#P408" class="headerlink" title="P408"></a>P408</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bold</span>(<span class="params"></span>) </span>&#123; <span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, url); &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bold</span>(<span class="params"></span>) </span>&#123; <span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>, <span class="literal">false</span>, <span class="literal">null</span>); &#125;   <span class="comment">// 没有 url.........</span></span><br></pre></td></tr></table></figure><h1 id="P409"><a href="#P409" class="headerlink" title="P409"></a>P409</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryCommandSupport()</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryCommandSupported()</span><br></pre></td></tr></table></figure><h1 id="P447-17-1-2-DOM事件"><a href="#P447-17-1-2-DOM事件" class="headerlink" title="P447  17.1.2 DOM事件"></a>P447  17.1.2 DOM事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>级DOM事件规范标准化了不冒泡的focusin和focusout事件来取代冒泡的focus和blur事件</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>级DOM事件规范标准化了冒泡的focusin和focusout事件来取代不冒泡的focus和blur事件</span><br></pre></td></tr></table></figure><h1 id="P447-17-1-2-DOM事件-1"><a href="#P447-17-1-2-DOM事件-1" class="headerlink" title="P447  17.1.2 DOM事件"></a>P447  17.1.2 DOM事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标准化了冒泡的mouseenter和mouseleave事件来取代不冒泡的mouseover和mouseout事件</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标准化了不冒泡的mouseenter和mouseleave事件来取代冒泡的mouseover和mouseout事件</span><br></pre></td></tr></table></figure><h1 id="P453-17-2-3-addEventListener"><a href="#P453-17-2-3-addEventListener" class="headerlink" title="P453 17.2.3 addEventListener()"></a>P453 17.2.3 addEventListener()</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"my button"</span>&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"mybutton"</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="P490-18-1-1-指定请求"><a href="#P490-18-1-1-指定请求" class="headerlink" title="P490 18.1.1 指定请求"></a>P490 18.1.1 指定请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setRequestHeader()方法的调用必须在调用open()之前但在调用send()之后</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setRequestHeader()方法的调用必须在调用open()之后但在调用send()之前</span><br></pre></td></tr></table></figure><h1 id="P580-客户端存储-导言"><a href="#P580-客户端存储-导言" class="headerlink" title="P580 客户端存储_导言"></a>P580 客户端存储_导言</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本书第<span class="number">8</span>章介绍过现在主流浏览器都支持一个文件对象</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本书第<span class="number">18</span>章介绍过现在主流浏览器都支持一个文件对象</span><br></pre></td></tr></table></figure><h1 id="P598-20-4-2-缓存更新-例20-4"><a href="#P598-20-4-2-缓存更新-例20-4" class="headerlink" title="P598 20.4.2 缓存更新_例20-4"></a>P598 20.4.2 缓存更新_例20-4</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件对象应当是"process"事件(就像哪些被XH2使用的)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件对象应当是"progress"事件(就像那些被XH2使用的)</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://mjpclab.blog.163.com/blog/static/6234841120142250612657/" target="_blank" rel="noopener">http://mjpclab.blog.163.com/blog/static/6234841120142250612657/</a></li><li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=989619" target="_blank" rel="noopener">https://bugzilla.mozilla.org/show_bug.cgi?id=989619</a></li><li><a href="http://blog.csdn.net/yanjun_1982/article/details/470405" target="_blank" rel="noopener">http://blog.csdn.net/yanjun_1982/article/details/470405</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记3</title>
      <link href="/2015/04/03/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B03/"/>
      <url>/2015/04/03/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记150403<br><a id="more"></a></p><h2 id="对象-P120"><a href="#对象-P120" class="headerlink" title="对象 P120"></a>对象 <code>P120</code></h2><blockquote><p>通过<code>对象直接量</code>,<code>关键字new</code>,<code>Object.create()</code>(<em>ECMAScript 5</em>)创建对象<br><code>Object.create(null)</code>创建一个没有原型的对象;但它不会继承任何东西,包括<code>toString()</code>等基础方法;也就是说,它不能和<code>+</code>运算符一起工作<br>创建一个普通的空对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /**</span></span><br><span class="line"><span class="comment"> * 兼容ECMAScript 5</span></span><br><span class="line"><span class="comment"> * 返回一个继承自原型对象p的属性的新对象</span></span><br><span class="line"><span class="comment"> * @param p 要继承原型对象</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125; 新对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">    <span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t != <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    f.prototype = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性访问错误-P127"><a href="#属性访问错误-P127" class="headerlink" title="属性访问错误 P127"></a>属性访问错误 <code>P127</code></h2><blockquote><p>下列场景给对象o设置属性p失败</p><blockquote><p>o中的熟悉p是只读的<br>o中的属性p是继承属性,并且它是只读的<br>o没有使用setter方法继承属性p;并且o的可扩展性是false</p></blockquote></blockquote><h2 id="删除属性-P127"><a href="#删除属性-P127" class="headerlink" title="删除属性 P127"></a>删除属性 <code>P127</code></h2><blockquote><p><code>delete</code>运算符只能删除自有属性,不能删除继承属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    p: &#123;</span><br><span class="line">        x: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a.p;</span><br><span class="line"><span class="keyword">delete</span> a.p;</span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>由于已经删除的属性的引用依然存在,在某些不严谨的代码中可能造成内存泄漏<br>在销毁对象的时候,要遍历属性中的属性,依次删除</p></blockquote><blockquote><p>delete表达式删除成功或没有任何副作用(如删除不存在的属性)或delete后不是一个属性访问表达式,delete 返回true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> o.x;   <span class="comment">// 删除x;返回true</span></span><br><span class="line"><span class="keyword">delete</span> o.x;   <span class="comment">// 什么也不做(x不存在); 返回true</span></span><br><span class="line"><span class="keyword">delete</span> o.toString; <span class="comment">// 什么也不做(toString是继承来的); 返回true</span></span><br><span class="line"><span class="keyword">delete</span> o<span class="number">.1</span>      <span class="comment">// 无意义,返回true</span></span><br></pre></td></tr></table></figure><h2 id="检测属性"><a href="#检测属性" class="headerlink" title="检测属性"></a>检测属性</h2><h3 id="检测-属性名-字符串-in-对象"><a href="#检测-属性名-字符串-in-对象" class="headerlink" title="检测: 属性名(字符串) in 对象;"></a>检测: 属性名(字符串) in 对象;</h3><blockquote><p>如果对象的自有属性或者继承属性包含这个属性则返回true<br><code>hasOwnProperty()</code> 检测是否是对象的自有属性<br><code>propertyIsEnumerable()</code> 检测自有属性并且是可枚举的</p></blockquote><h3 id="判断一个属性是否为-undefined"><a href="#判断一个属性是否为-undefined" class="headerlink" title="!== 判断一个属性是否为 undefined"></a>!== 判断一个属性是否为 <code>undefined</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    x: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.x !== <span class="literal">undefined</span>); <span class="comment">//true: o中属性x</span></span><br><span class="line"><span class="built_in">console</span>.log(o.y !== <span class="literal">undefined</span>); <span class="comment">// false: o中没有属性y</span></span><br><span class="line"><span class="built_in">console</span>.log(o.toString !== <span class="literal">undefined</span>); <span class="comment">// true: o继承了toString属性</span></span><br></pre></td></tr></table></figure><h3 id="in-和-和"><a href="#in-和-和" class="headerlink" title="in 和 !== 和 !="></a><code>in</code> 和 <code>!==</code> 和 <code>!=</code></h3><blockquote><p>in 可以区分不存在的属性和存在但是值为undefined的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    x: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.x !== <span class="literal">undefined</span>); <span class="comment">// false: 属性存在,值为false</span></span><br><span class="line"><span class="built_in">console</span>.log(o.y !== <span class="literal">undefined</span>); <span class="comment">// false: 属性不存在</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x'</span> <span class="keyword">in</span> o);          <span class="comment">// true: 属性存在</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'y'</span> <span class="keyword">in</span> o);          <span class="comment">// false; 属性不存在</span></span><br></pre></td></tr></table></figure><blockquote><p><code>!==</code>区分 <code>undefined</code> 和  <code>null</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x的值不是null或undefined</span></span><br><span class="line"><span class="keyword">if</span> (x != <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x的值不是 null undefined false '' 0 NaN</span></span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举属性"><a href="#枚举属性" class="headerlink" title="枚举属性"></a>枚举属性</h2><blockquote><p>got/in遍历可枚举属性(自有属性和继承属性)<br><code>ECMAScript 5</code> 中:</p><blockquote><p><code>Object.keys()</code> 返回可枚举的自有属性的名称数组<br><code>Object.getOwnPropertyNames()</code> 返回所有自有属性的名称数组</p></blockquote></blockquote><h2 id="getter-和-setter"><a href="#getter-和-setter" class="headerlink" title="getter 和 setter"></a><code>getter</code> 和 <code>setter</code></h2><blockquote><p>定义存储器的属性使用一个或两个和属性同名的函数,使用 <code>get</code> 和 <code>set</code> 关键字<br>函数体内的 <code>this</code> 指向这个对象<br>存取器属性是可以继承的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直角坐标系定义</span></span><br><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    x : <span class="number">1.0</span>,        <span class="comment">// x和y为普通的可读写的数据属性</span></span><br><span class="line">    y: <span class="number">1.0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// r  是可读写的存取器属性, 有 getter 和 setter</span></span><br><span class="line">    get r() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x * <span class="keyword">this</span>.x + <span class="keyword">this</span>.y * <span class="keyword">this</span>.y);</span><br><span class="line">    &#125;,</span><br><span class="line">    set r(newValue) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldValue = <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x * <span class="keyword">this</span>.x + <span class="keyword">this</span>.y * <span class="keyword">this</span>.y);</span><br><span class="line">        <span class="keyword">var</span> ratio = newValue / oldValue;</span><br><span class="line">        <span class="keyword">this</span>.x *= ratio;</span><br><span class="line">        <span class="keyword">this</span>.y *= ratio;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// theat角度 是只读存取器属性, 它只有getter方法</span></span><br><span class="line">    get theta() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.y, <span class="keyword">this</span>.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h2><blockquote><p>数据属性的4个特性: </p><blockquote><p><code>value</code> (它的值) <code>writable</code> (可写性) <code>enumerable</code> (可枚举性) <code>configurable</code> (可配性)</p></blockquote></blockquote><blockquote><p>存取器属性的4个特性:</p><blockquote><p><code>get</code> (读取) <code>set</code>(写入) <code>enumerable</code> (可枚举性) <code>configurable</code> (可配性)</p></blockquote></blockquote><blockquote><p><code>Object.getOwnPropertyDescriptor()</code> 获取某个对象特定的属性描述符<br>只能得到自有属性的描述符;对于继承属性和不存在的属性,返回 <code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(p, <span class="string">'r'</span>));</span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    get: [Function: r],</span></span><br><span class="line"><span class="comment">    set: [Function: r],</span></span><br><span class="line"><span class="comment">    enumerable: true,</span></span><br><span class="line"><span class="comment">    configurable: true</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;, <span class="string">'x'</span>));  <span class="comment">// undefined 没有这个属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;, <span class="string">'toString'</span>)); <span class="comment">// undefined 继承属性</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Object.defineProperty()</code> 设置属性的特性或新建属性特性<br>只能修改自有属性,不能修改继承属性<br>返回修改后的对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 添加一个不可枚举的属性x,赋值为1</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123;</span><br><span class="line">    value : <span class="number">1</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性存在但是不可枚举</span></span><br><span class="line"><span class="built_in">console</span>.log(o.x);  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(o)); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对属性x做修改,变成只读</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图修改</span></span><br><span class="line">o.x = <span class="number">2</span>; <span class="comment">// 操作失败但是不报错; 严格模式中抛出类型错误异常</span></span><br><span class="line"><span class="built_in">console</span>.log(o.x);   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性可配置,所以可以使用defineProperty修改值</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123;</span><br><span class="line">    value: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.x);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数据属性改为存取器属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有set方法</span></span><br><span class="line">o.x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Object.defineProperties()</code> 同时修改多个属性<br>返回修改后的对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.defineProperties(&#123;&#125;,&#123;</span><br><span class="line">    x: &#123;</span><br><span class="line">        value: <span class="number">1</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    y: &#123;</span><br><span class="line">        value: <span class="number">2</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty-Object-defineProperties-抛出类型错误异常"><a href="#Object-defineProperty-Object-defineProperties-抛出类型错误异常" class="headerlink" title="Object.defineProperty() Object.defineProperties() 抛出类型错误异常"></a><code>Object.defineProperty()</code> <code>Object.defineProperties()</code> 抛出类型错误异常</h2><blockquote><ol><li>如果对象是不可扩展的,则可以编辑已有的自有属性,但不能给它添加新属性</li><li>如果属性是不可配置的, 则不能修改它的可配置性和可枚举性</li><li>如果存取器属性是不可配置的,则不能修改其 <code>getter</code> 和 <code>setter</code> 方法,也不能将它转换为数据属性</li><li>如果数据属性是不可配置的, 则不能将它转换为存取器属性</li><li>如果数据属性是不可配置的, 则不能将它的可写性从 <code>false</code> 设置为 <code>true</code>, 但是可以从 <code>true</code> 修改为 <code>false</code></li><li>如果数据属性是不可配置的且不可写的, 则不能修改它的值;</li><li>如果数据属性是可配置的但不可写,属性的值是可以修改的(标记为可写-&gt;修改它的值-&gt;转换为不可写)</li></ol></blockquote><h2 id="复制属性的特性"><a href="#复制属性的特性" class="headerlink" title="复制属性的特性"></a>复制属性的特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给Object.prototype 添加一个不可枚举的extend()方法</span></span><br><span class="line"><span class="comment"> * 这个方法继承自调用它的对象,将作为参数传入对象的属性一一复制</span></span><br><span class="line"><span class="comment"> * 除了值之外,也复制了属性的所有特性,除非在目标对象中存在同名的属性,</span></span><br><span class="line"><span class="comment"> * 参数对象的所有自有对象(包括不可枚举的属性)也会一一复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'extend'</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>, <span class="comment">//不可枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;   <span class="comment">// 值就是这个函数</span></span><br><span class="line">        <span class="comment">// 得到所有的自由属性,包括不可枚举属性</span></span><br><span class="line">        <span class="keyword">var</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 属性存在则跳过</span></span><br><span class="line">            <span class="keyword">if</span> (names[i] <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取o中的属性的描述符</span></span><br><span class="line">            <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="number">0</span>, names[i]);</span><br><span class="line">            <span class="comment">// 用它给this创建一个属性</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, names[i], desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对象的三个属性"><a href="#对象的三个属性" class="headerlink" title="对象的三个属性"></a>对象的三个属性</h2><h3 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h3><blockquote><p>我们经常把 <code>o的原型属性</code> 直接叫做 <code>o的原型</code><br>通过 <code>new</code> 创建的对象使用构造函数的 <code>prototype</code> 属性作为它们的原型<br>通过 <code>Object.reate()</code> 创建的对象使用第一个参数作为它们的原型<br><code>Object.getPrototypeOf()</code> 查询原型<br><code>p.isPrototypeOf(o)</code> 检测 p 是否是 o 的原型</p></blockquote><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><blockquote><p>表示对象的类型信息([object class])</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classof</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Null'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (o === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Undefined'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><blockquote><p><code>Object.isExtensible()</code> 判断是否可扩展<br><code>Object.preventExtensions()</code> 将对象转换为不可扩展 <strong>无法再转换为可扩展</strong><br><code>Object.seal()</code> 将对象设置为不可扩展,将所有自有属性都设置为不可配置;即不能给这个对象添加新属性,而且它已有的属性也不能删除或配置,不过它已有的可写属性依然可以设置<br><code>Object.isSealed()</code> 检测是否已经封闭(sealed)<br><code>Object.freeze()</code> 冻结对象, 将对象设置为不可扩展, 将其属性设置为不可配置, 将它自有的所有数据属性设置为只读(如果对象的存取器属性具有setter方法,存取器属性将不受影响,仍可以通过给属性赋值调用)<br><code>Object.isFrozen()</code> 检测对象是否冻结</p></blockquote><h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><blockquote><p>ECMAScript 5 提供<code>JSON.stringify()</code> 和 <code>JSON.parse()</code><br><code>NaN</code> <code>Infinity</code> <code>-Infinity</code> 序列化的结果是 <code>null</code><br>日期对象序列化的结果是ISO格式的日期字符串<br>函数 RegExp Error对象 和 undefined值不能序列化和还原<br><code>JSON.stringify()</code> 只能序列化对象的可没据的自有属性<br>不能序列化的在序列化的输出字符串中会将这个属性省略掉</p></blockquote><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记2</title>
      <link href="/2015/04/02/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B02/"/>
      <url>/2015/04/02/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记150402<br><a id="more"></a></p><h2 id="结合性-P69"><a href="#结合性-P69" class="headerlink" title="结合性 P69"></a>结合性 <code>P69</code></h2><blockquote><p>一元操作符,赋值和三元条件运算符具有从左到右的结合性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = ~-y;</span><br><span class="line">x = ~(-y);</span><br><span class="line"></span><br><span class="line">w = x = y = z;</span><br><span class="line">w = ( x = (y = z));</span><br><span class="line"></span><br><span class="line">a ? b : c ? d : e ? f : g;</span><br><span class="line">a ? b : (c ? d : (e ? f : g));</span><br></pre></td></tr></table></figure><h2 id="javascript-总是严格的按照从左到右的顺序计算表达式-P69"><a href="#javascript-总是严格的按照从左到右的顺序计算表达式-P69" class="headerlink" title="javascript 总是严格的按照从左到右的顺序计算表达式 P69"></a>javascript 总是严格的按照从左到右的顺序计算表达式 <code>P69</code></h2><blockquote><p>计算b的值: <code>a=1; b = (a++) + a;</code></p><ol><li>计算 <code>b</code></li><li>计算 <code>a++</code> (假设其值为c)</li><li>计算 <code>a</code></li><li>计算 <code>c + a</code></li><li>将 <code>c + a</code> 的值赋值给 <code>b</code></li></ol></blockquote><blockquote><p>其中 第2步 先 <code>c = 1;</code> 然后 <code>a = a + 1;</code><br>所以第3步的 <code>a = 2</code><br>所以 <code>b = 3</code></p></blockquote><h2 id="‘-’-运算符-P70"><a href="#‘-’-运算符-P70" class="headerlink" title="‘+’ 运算符 P70"></a>‘+’ 运算符 <code>P70</code></h2><blockquote><p>加法的转换规则优先考虑字符串转换,如果其中一个操作数是字符串或者转换为字符串的对象,另一个操作符会转换为字符串<br>如果2个操作数都不是类字符串,进行算数加法运算<br>转换规则见<a href="http://blog.xinshangshangxin.com/2015/04/01/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/">上一篇的类型转换和对象转字符串_数字</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span> + <span class="string">'2'</span> = <span class="string">'12'</span>;</span><br><span class="line"><span class="string">'1'</span> + <span class="number">2</span> = <span class="string">'12'</span>;</span><br><span class="line"><span class="number">1</span> + &#123;&#125; = <span class="number">1</span>[object <span class="built_in">Object</span>]; <span class="comment">//对象转成字符串</span></span><br><span class="line"><span class="literal">true</span> + <span class="literal">true</span> = <span class="number">2</span>;</span><br><span class="line"><span class="number">2</span> + <span class="literal">null</span> = <span class="number">2</span>;</span><br><span class="line"><span class="number">2</span> + <span class="literal">undefined</span> = <span class="literal">NaN</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">'str'</span> = <span class="string">'3str'</span>;</span><br><span class="line"><span class="number">1</span> + (<span class="number">2</span> + <span class="string">'str'</span>) = <span class="string">'12str'</span>;</span><br></pre></td></tr></table></figure><h2 id="一元算数运算符"><a href="#一元算数运算符" class="headerlink" title="一元算数运算符"></a>一元算数运算符</h2><blockquote><p>‘++’ 将操作数转换为数字,然后给数字加1</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="number">1</span>);     <span class="comment">//'11'</span></span><br><span class="line">x = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x++);       <span class="comment">// '1'</span></span><br><span class="line">x = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++x);       <span class="comment">// '2'</span></span><br></pre></td></tr></table></figure><h2 id="逻辑与-amp-amp-P79"><a href="#逻辑与-amp-amp-P79" class="headerlink" title="逻辑与 &amp;&amp; P79"></a>逻辑与 &amp;&amp; <code>P79</code></h2><blockquote><p>假值:<code>false</code> <code>null</code> <code>undefined</code> <code>0</code> <code>-0</code> <code>NaN</code> <code>&#39;&#39;</code></p><ol><li>先计算左操作数的值,如果为假值,则返回左操作数</li><li>如果为真值, 计算右操作符并将其返回</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp;&amp; <span class="literal">NaN</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &amp;&amp; <span class="number">1</span>); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">x</span> : <span class="string">'左'</span>&#125; &amp;&amp; &#123;<span class="attr">x</span>: <span class="string">'右'</span>&#125;); <span class="comment">//&#123; x: '右' &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 fun 为某函数</span></span><br><span class="line"><span class="keyword">if</span> (fun) &#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为</span></span><br><span class="line">fun &amp;&amp; fun();  <span class="comment">// jsHint会警告.....</span></span><br></pre></td></tr></table></figure><h2 id="逻辑或-P80"><a href="#逻辑或-P80" class="headerlink" title="逻辑或 || P80"></a>逻辑或 || <code>P80</code></h2><blockquote><ol><li>先计算左操作数的值,如果为真值,则返回左操作数</li><li>如果为假值, 计算右操作符并将其返回</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">x</span>: <span class="string">'左'</span>&#125; || &#123;<span class="attr">x</span>: <span class="string">'右'</span>&#125;); <span class="comment">// &#123; x: '左' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> || &#123;<span class="attr">x</span>: <span class="string">'右'</span>&#125;); <span class="comment">// &#123; x: '右' &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给参数提供默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    str = str || <span class="string">'123'</span>; <span class="comment">//设置默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eval-P84"><a href="#eval-P84" class="headerlink" title="eval P84"></a>eval <code>P84</code></h2><blockquote><p>eval使用了调用它的变量作用域环境</p></blockquote><h2 id="typeof-P87"><a href="#typeof-P87" class="headerlink" title="typeof P87"></a>typeof <code>P87</code></h2><table><thead><tr><th style="text-align:center">x</th><th style="text-align:center">typeof x</th></tr></thead><tbody><tr><td style="text-align:center">undefined</td><td style="text-align:center">‘undefined’</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">‘object’</td></tr><tr><td style="text-align:center">true/false</td><td style="text-align:center">‘boolean’</td></tr><tr><td style="text-align:center">数字/NaN</td><td style="text-align:center">‘number’</td></tr><tr><td style="text-align:center">字符串</td><td style="text-align:center">‘string’</td></tr><tr><td style="text-align:center">函数</td><td style="text-align:center">‘function’</td></tr><tr><td style="text-align:center">内置对象(非函数)</td><td style="text-align:center">‘onject’</td></tr><tr><td style="text-align:center">宿主对象</td><td style="text-align:center">由编译器各自实现的字符串, 但不是 ‘undefined’ ‘boolean’ ‘number’ ‘string’</td></tr></tbody></table><p>最后一张思维导图<br><figure class="image-box">                <img src="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/img/Definitive_Guide_js/operator.gif" alt="" title="" class="">                <p></p>            </figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><p><a href="http://segmentfault.com/a/1190000002423935" target="_blank" rel="noopener">http://segmentfault.com/a/1190000002423935</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript权威指南笔记</title>
      <link href="/2015/04/01/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/04/01/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>JavaScript权威指南笔记150401<br><a id="more"></a></p><h2 id="字符长度-P39"><a href="#字符长度-P39" class="headerlink" title="字符长度 P39"></a>字符长度 <code>P39</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="string">'π'</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">'e'</span>;</span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">'中'</span>;</span><br><span class="line">p.length</span><br><span class="line">e.length</span><br><span class="line">ch.length</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/img/Definitive_Guide_js/str_len.png" alt="" title="" class="">                <p></p>            </figure><blockquote><p>在文件不同编码下,字符长度不同…<br><code>GBK</code>下答案为2/1/2; <code>utf8</code>下为1/1/1</p></blockquote><blockquote><p>书中<code>P39</code>中的 例子怎么实现呢(p.length =&gt;1  e.length =&gt; 2)??求告知</p></blockquote><h2 id="布尔值P43"><a href="#布尔值P43" class="headerlink" title="布尔值P43"></a>布尔值<code>P43</code></h2><blockquote><p>下面的值会转换成 <code>false</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">-0</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line"><span class="string">""</span> <span class="comment">//空字符串</span></span><br></pre></td></tr></table></figure><blockquote><p>对象(包括数组)或转换成 <code>true</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'true'</span>);  <span class="comment">//输出true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'false'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是这里又不对了:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arr == false'</span>) <span class="comment">//输出了false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arr != false'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因:</p><p><strong>类型转换</strong></p><table><thead><tr><th style="text-align:center">Value</th><th style="text-align:center">String</th><th style="text-align:center">Number</th><th style="text-align:center">Boolean</th><th style="text-align:center">Object </th></tr></thead><tbody><tr><td style="text-align:center">undefined</td><td style="text-align:center">‘undefined’</td><td style="text-align:center">NaN</td><td style="text-align:center">false</td><td style="text-align:center">throws TypeError</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">‘null’</td><td style="text-align:center">0</td><td style="text-align:center">false</td><td style="text-align:center">throws TypeError</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">‘true’</td><td style="text-align:center">1</td><td style="text-align:center"></td><td style="text-align:center">new Boolean(true)</td><td></td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">‘false’</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">new Boolean(false)</td><td></td></tr><tr><td style="text-align:center">“” (empty string)</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">false</td><td style="text-align:center">new String(“”)</td></tr><tr><td style="text-align:center">“1.2” (nonempty, numeric)</td><td style="text-align:center"></td><td style="text-align:center">1.2</td><td style="text-align:center">true</td><td style="text-align:center">new String(“1.2”)</td></tr><tr><td style="text-align:center">“one” (nonempty, non-numeric)</td><td style="text-align:center"></td><td style="text-align:center">NaN</td><td style="text-align:center">true</td><td style="text-align:center">new String(“one”)</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">‘0’</td><td style="text-align:center"></td><td style="text-align:center">false</td><td style="text-align:center">new Number(0)</td><td></td></tr><tr><td style="text-align:center">-0</td><td style="text-align:center">‘0’</td><td style="text-align:center"></td><td style="text-align:center">false</td><td style="text-align:center">new Number(-0)</td></tr><tr><td style="text-align:center">NaN</td><td style="text-align:center">‘undefined’</td><td style="text-align:center"></td><td style="text-align:center">false</td><td style="text-align:center">new Number(NaN)</td></tr><tr><td style="text-align:center">Infinity</td><td style="text-align:center">‘Infinity’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(Infinity)</td></tr><tr><td style="text-align:center">-Infinity</td><td style="text-align:center">‘-Infinity’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(-Infinity)</td></tr><tr><td style="text-align:center">1 (finite, non-zero)</td><td style="text-align:center">‘1’</td><td style="text-align:center"></td><td style="text-align:center">true</td><td style="text-align:center">new Number(1)</td></tr><tr><td style="text-align:center">{} (any object)</td><td style="text-align:center"></td><td style="text-align:center">NaN</td><td style="text-align:center">true     </td></tr><tr><td style="text-align:center">[] (empty array)</td><td style="text-align:center">‘’</td><td style="text-align:center">0</td><td style="text-align:center">true     </td></tr><tr><td style="text-align:center">[9] (1 numeric elt)</td><td style="text-align:center">‘9’</td><td style="text-align:center">9</td><td style="text-align:center">true     </td></tr><tr><td style="text-align:center">[‘a’] (any other array)</td><td style="text-align:center">use join() method</td><td style="text-align:center">NaN</td><td style="text-align:center">true     </td></tr><tr><td style="text-align:center">function(){} (any function)</td><td style="text-align:center">‘undefined’</td><td style="text-align:center">NaN</td><td style="text-align:center">true     </td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> =&gt; <span class="number">0</span></span><br><span class="line">[] =&gt; <span class="number">0</span>    [<span class="number">0</span>] =&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>隐性类型转换步骤</strong></p><blockquote><ol><li>首先看双等号前后有没有NaN，如果存在NaN，一律返回false。</li><li>再看双等号前后有没有布尔，有布尔就将布尔转换为数字。（false是0，true是1）</li><li>接着看双等号前后有没有字符串, 如果是字符串：<blockquote><ul><li>对方是对象，对象转字符串(<em>方法见下面</em>)；</li><li>对方是数字，字符串转数字</li><li>对方是字符串，直接比较</li><li>其他返回false</li></ul></blockquote></li><li>如果是数字，对方是对象，对象转数字(<em>方法见下面</em>), 其他一律返回false</li><li>null, undefined不会进行类型转换, 但它们俩相等</li></ol></blockquote><p><strong>对象转字符串</strong><br><figure class="image-box">                <img src="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/img/Definitive_Guide_js/obj2str.png" alt="" title="" class="">                <p></p>            </figure></p><p><strong>对象转数字</strong><br><figure class="image-box">                <img src="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/img/Definitive_Guide_js/obj2nu.png" alt="" title="" class="">                <p></p>            </figure></p><p><a href="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/other/Definitive_Guide_js/obj2nu_str.pdf" target="_blank" rel="noopener">上图pdf下载</a></p><p><strong>栗子:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">0</span> == <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">1</span> == <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">2</span> == &#123;<span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>&#125;&#125;);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(a == <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="literal">NaN</span> == <span class="literal">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">8</span> == <span class="literal">undefined</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">1</span> == <span class="literal">undefined</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">2</span> == &#123;<span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>&#125;&#125;);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="literal">undefined</span> == <span class="literal">null</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="literal">null</span> == <span class="number">1</span>);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.dir(&#123; <span class="attr">toString</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span> &#125; , <span class="attr">valueOf</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> [] &#125;&#125; == <span class="number">1</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">1</span>==<span class="string">"1"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="number">1</span>===<span class="string">"1"</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><h2 id="包装对象-P46"><a href="#包装对象-P46" class="headerlink" title="包装对象 P46"></a>包装对象 <code>P46</code></h2><blockquote><p>如果引用字符串的属性,就会将字符串通过new String()转换成对象,这个对象处理属性的引用;一旦引用结束,这个新创建的对象就会被销毁</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'test'</span>;</span><br><span class="line">s.len = <span class="number">4</span>;          <span class="comment">// 引用结束立即销毁</span></span><br><span class="line"><span class="built_in">console</span>.log(s.len); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p><code>null</code> 和 <code>undefined</code> 没有包装对象</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><p><a href="http://www.haorooms.com/post/js_yinxingleixing" target="_blank" rel="noopener">http://www.haorooms.com/post/js_yinxingleixing</a><br><a href="http://www.lookcss.com/js-type/" target="_blank" rel="noopener">http://www.lookcss.com/js-type/</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo无法输入双括号{{</title>
      <link href="/2015/03/31/hexo%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E5%8F%8C%E6%8B%AC%E5%8F%B7/"/>
      <url>/2015/03/31/hexo%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E5%8F%8C%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在blog中使用了angularjs的代码,导致hexo 无法解析{ {}}<br><a id="more"></a></p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1>> {% raw %}> {% end_raw %} > > 替换上面的`end_raw` 为 `endraw`> {% endraw %} <p>最终如图所示:<br><figure class="image-box">                <img src="/img/hexo/hexo.png" alt="hexo" title="" class="">                <p>hexo</p>            </figure></p><blockquote><p>成功输入双括号</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;&#123;&#123;  &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><p><a href="http://hexo.io/docs/tag-plugins.html#Raw" target="_blank" rel="noopener">http://hexo.io/docs/tag-plugins.html#Raw</a><br><a href="https://github.com/hexojs/hexo/issues/1071" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/1071</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS过滤器</title>
      <link href="/2015/03/31/AngularJS-Filter/"/>
      <url>/2015/03/31/AngularJS-Filter/</url>
      
        <content type="html"><![CDATA[<p>AngularJS过滤器<br><a id="more"></a></p><blockquote><p>AngularJS过滤器</p></blockquote><p>在{{  }}内通过|来调用filter,例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="number">2015</span> | number:<span class="number">2</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="内置filter"><a href="#内置filter" class="headerlink" title="内置filter"></a>内置filter</h2><ul><li>number<blockquote><p>以数字格式输出，第二个为可选参数，表示小数点后保留的位数。 包含非数字字符时使用使用可选参数会出现Syntax Error，不使用则输出空字符。</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="number">1234.12</span> | number:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- <span class="number">1234.12</span> --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123; <span class="number">1234.12</span> | number&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;  &lt;!-- <span class="number">1</span>,<span class="number">234.12</span> --&gt;</span><br></pre></td></tr></table></figure><ul><li>currency<blockquote><p>以货币格式输出，包括非数字字符时出现Syntax Error。</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="number">1234.12</span> | currency &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- $<span class="number">1</span>,<span class="number">234.12</span> --&gt;</span><br></pre></td></tr></table></figure><ul><li>lowercase/uppercase<blockquote><p>将字符转小写/大写</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="string">"Kavlez! 2015;"</span> | lowercase &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;  &lt;!-- kavlez! <span class="number">2015</span>; --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="string">"Kavlez! 2015;"</span> | uppercase &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;  &lt;!-- KAVLEZ! <span class="number">2015</span>; --&gt;</span><br></pre></td></tr></table></figure><ul><li>json<blockquote><p>将对象转为json字符串</p></blockquote></li></ul><p><em>例如已有声明如下:</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">$scope.person.firstname = <span class="string">'Kavlez'</span>;</span><br><span class="line">$scope.person.lastname = <span class="string">'Jin'</span></span><br></pre></td></tr></table></figure></p><p><em>json过滤输出:</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;person | json&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line">&lt;!-- &#123; <span class="string">"firstname"</span>: <span class="string">"Kavlez"</span>, <span class="string">"lastname"</span>: <span class="string">"Jin"</span> &#125; --&gt;</span><br></pre></td></tr></table></figure></p><ul><li>limitTo<blockquote><p>对字符串或数组进行截取</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="string">'Kavlez!!!!'</span> | limitTo:<span class="number">6</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- Kavlez --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="string">'Kavlez!!!!'</span> | limitTo:<span class="number">-4</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- !!!! --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;[<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>] | limitTo:<span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- [<span class="string">"0"</span>]--&gt;</span><br></pre></td></tr></table></figure><ul><li>orderBy<blockquote><p>对数组进行排序，该filter有两个参数，分别是排序依据和正逆序(可选)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;[</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'K'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'A'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'V'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'L'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'E'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'alphabet'</span>: <span class="string">'Z'</span>&#125;] </span><br><span class="line">    | orderBy:<span class="string">'alphabet'</span>:<span class="literal">true</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line">&lt;!-- [&#123;<span class="string">"alphabet"</span>:<span class="string">"Z"</span>&#125;,&#123;<span class="string">"alphabet"</span>:<span class="string">"V"</span>&#125;,&#123;<span class="string">"alphabet"</span>:<span class="string">"L"</span>&#125;,&#123;<span class="string">"alphabet"</span>:<span class="string">"K"</span>&#125;,&#123;<span class="string">"alphabet"</span>:<span class="string">"E"</span>&#125;,&#123;<span class="string">"alphabet"</span>:<span class="string">"A"</span>&#125;] --&gt;</span><br></pre></td></tr></table></figure><ul><li>filter<blockquote><p>从数组中返回指定子集</p></blockquote></li></ul><p><em>对象</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;</span><br><span class="line">    [&#123;<span class="string">'firstname'</span>:<span class="string">'Kavlez'</span>,<span class="string">'lastname'</span>:<span class="string">'Jin'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'firstname'</span>:<span class="string">'Ken'</span>,<span class="string">'lastname'</span>:<span class="string">'Jin'</span>&#125;] </span><br><span class="line">| filter:&#123;<span class="string">'firstname'</span>: <span class="string">'n'</span>&#125; &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line">&lt;!-- [&#123;<span class="string">"firstname"</span>:<span class="string">"Ken"</span>,<span class="string">"lastname"</span>:<span class="string">"Jin"</span>&#125;]  --&gt;</span><br></pre></td></tr></table></figure></p><p><em>字符串</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;[<span class="string">'K'</span>,<span class="string">'a'</span>,<span class="string">'v'</span>,<span class="string">'l'</span>,<span class="string">'e'</span>,<span class="string">'z'</span>] | filter:<span class="string">'e'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!-- [<span class="string">"e"</span>] --&gt;</span><br></pre></td></tr></table></figure></p><p><em>date</em></p><blockquote><p>以指定格式显示时间。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">$scope.today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'medium'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan <span class="number">24</span>, <span class="number">2015</span> <span class="number">5</span>:<span class="number">36</span>:<span class="number">38</span> PM    --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'short'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>/<span class="number">24</span>/<span class="number">15</span> <span class="number">5</span>:<span class="number">36</span> PM    --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'fullDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Saturday, January <span class="number">24</span>, <span class="number">2015</span>     --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'longDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  January <span class="number">24</span>, <span class="number">2015</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mediumDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan <span class="number">24</span>, <span class="number">2015</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'shortDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>/<span class="number">24</span>/<span class="number">15</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mediumTime'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">5</span>:<span class="number">36</span>:<span class="number">38</span> PM   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'shortTime'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">5</span>:<span class="number">36</span> PM   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'yyyy'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'yy'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">15</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'y'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMMM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  January   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">01</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'M'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'dd'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">24</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'d'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">24</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEEE'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Saturday   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEE'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Sat   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'HH'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">17</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'H'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">17</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'hh'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">05</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'h'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">5</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mm'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">36</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'m'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">36</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'ss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">38</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'s'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">38</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'.sss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">.628</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'a'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  PM  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'Z'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  +<span class="number">0800</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMMd, y'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan24, <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEEE, d, M'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  Saturday, <span class="number">24</span>, <span class="number">1</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'hh:mm:ss.sss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">05</span>:<span class="number">36</span>:<span class="number">38.628</span>  --&gt;    </span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'medium'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan <span class="number">24</span>, <span class="number">2015</span> <span class="number">5</span>:<span class="number">36</span>:<span class="number">38</span> PM    --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'short'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>/<span class="number">24</span>/<span class="number">15</span> <span class="number">5</span>:<span class="number">36</span> PM    --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'fullDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Saturday, January <span class="number">24</span>, <span class="number">2015</span>     --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'longDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  January <span class="number">24</span>, <span class="number">2015</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mediumDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan <span class="number">24</span>, <span class="number">2015</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'shortDate'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>/<span class="number">24</span>/<span class="number">15</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mediumTime'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">5</span>:<span class="number">36</span>:<span class="number">38</span> PM   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'shortTime'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">5</span>:<span class="number">36</span> PM   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'yyyy'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'yy'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">15</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'y'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMMM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  January   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MM'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">01</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'M'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">1</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'dd'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">24</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'d'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">24</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEEE'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Saturday   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEE'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Sat   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'HH'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">17</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'H'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">17</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'hh'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">05</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'h'</span>&#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  <span class="number">5</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'mm'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">36</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'m'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">36</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'ss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">38</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'s'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">38</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'.sss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">.628</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'a'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  PM  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'Z'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  +<span class="number">0800</span>   --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'MMMd, y'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  Jan24, <span class="number">2015</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'EEEE, d, M'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125; &lt;!--  Saturday, <span class="number">24</span>, <span class="number">1</span>  --&gt;</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;today | date:<span class="string">'hh:mm:ss.sss'</span> &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;&lt;!--  <span class="number">05</span>:<span class="number">36</span>:<span class="number">38.628</span>  --&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义filter"><a href="#自定义filter" class="headerlink" title="自定义filter"></a>自定义filter</h2><blockquote><p>如Controller那样，filter也最好不要全局满天飞，我们需要定义在一个module里面。<br>这里写一个简单的例子:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">"myApp"</span>,[])</span><br><span class="line">.filter(<span class="string">'kavlezFilter'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(input)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Kavlez:\"'</span>+input+<span class="string">'"'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>使用该filter:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;&#123;<span class="string">'Any time, Any where, Whoever or whatever you are, just bring it on'</span>|kavlezFilter &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kavlez:<span class="string">"Any time, Any where, Whoever or whatever you are, just bring it on"</span><span class="keyword">as</span></span><br></pre></td></tr></table></figure><h2 id="转载自"><a href="#转载自" class="headerlink" title="转载自:"></a>转载自:</h2><p><a href="http://www.cnblogs.com/Kavlez/p/4246203.html" target="_blank" rel="noopener">http://www.cnblogs.com/Kavlez/p/4246203.html</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>karma全局安装记录</title>
      <link href="/2015/03/29/karma-notes/"/>
      <url>/2015/03/29/karma-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>karma全局安装记录</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我全局安装了...</span></span><br><span class="line">npm install karma -g</span><br></pre></td></tr></table></figure><h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><blockquote><p>进入<code>C:\Users\你的用户名\AppData\Roaming\npm\node_modules</code>, 新建文件夹,将karma文件夹移动到新建的文件夹; 目录如下:</p></blockquote><ul><li>karma // 你新建的文件夹名称<ul><li>karma //原始的karma文件夹</li></ul></li></ul><p><strong>如此操作的原因:</strong></p><blockquote><p>在 karma 的文件夹的<code>package.json</code>的<code>devDependencies</code>没有生成<code>node_modules</code></p></blockquote><h2 id="生成-devDependencies"><a href="#生成-devDependencies" class="headerlink" title="生成 devDependencies"></a>生成 <code>devDependencies</code></h2><blockquote><p>新建<code>package.json</code></p></blockquote><p><strong>结构如下</strong></p><ul><li>karma<ul><li>karma</li><li>package.json</li></ul></li></ul><p>其中<code>package.json</code>为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"random"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"SHANG"</span>,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"karma-jasmine"</span>: <span class="string">"~0.1.0"</span>,</span><br><span class="line">        <span class="string">"karma-mocha"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-qunit"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-coverage"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-requirejs"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-commonjs"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-growl-reporter"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-junit-reporter"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-chrome-launcher"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-firefox-launcher"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-sauce-launcher"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-phantomjs-launcher"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-ng-scenario"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-coffee-preprocessor"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-live-preprocessor"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-html2js-preprocessor"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="string">"karma-browserstack-launcher"</span>: <span class="string">"*"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>执行<code>npm install</code>命令;等待执行完成后;将当前路径下的<code>node_modules</code>下文件夹剪切到和<code>karma</code>同级. 文件目录如下:</p></blockquote><ul><li>karma<ul><li>karma         //最原始的karma</li><li>karma-browserstack-launcher</li><li>karma-chrome-launcher</li><li>karma-jasmine</li><li>…….</li><li>node_modules //可以删除</li></ul></li></ul><h2 id="建立karma-cmd"><a href="#建立karma-cmd" class="headerlink" title="建立karma.cmd"></a>建立karma.cmd</h2><blockquote><p>安装后没有生成链接,无法使用命令启动;故如下操作<br>在路径<code>C:\Users\你的用户名\AppData\Roaming\npm</code>下建立<code>karma.cmd</code>;里面内容如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@IF EXIST <span class="string">"%~dp0\node.exe"</span> (</span><br><span class="line">  <span class="string">"%~dp0\node.exe"</span>  <span class="string">"%~dp0\node_modules\karma\karma\bin\karma"</span> %*</span><br><span class="line">) ELSE (</span><br><span class="line">  @SETLOCAL</span><br><span class="line">  @SET PATHEXT=%PATHEXT:;.JS;=;%</span><br><span class="line">  node  <span class="string">"%~dp0\node_modules\karma\karma\bin\karma"</span> %*</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>在随便哪个路径下新建测试文件夹;我的目录如下</p></blockquote><ul><li>src<ul><li>index.js</li></ul></li><li>test<ul><li>TestCase1.js</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TestCase1.js</span></span><br><span class="line">describe(<span class="string">"A suite"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">"contains spec with an expectation"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"This is msg from log..."</span>);</span><br><span class="line">        expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"A suite of basic functions"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">"reverse word"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        expect(<span class="string">"DCBA"</span>).toEqual(reverse(<span class="string">"ABCD"</span>));</span><br><span class="line">        expect(<span class="string">"damo"</span>).toEqual(reverse(<span class="string">"omad1"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>cmd 当前目录下输入  <code>karma init conf</code></p></blockquote><figure class="image-box">                <img src="/img/karma/karma_init.png" alt="karma" title="" class="">                <p>karma</p>            </figure><blockquote><p>完成后输入 <code>karma start conf</code>; 拉起chrome开始测试了~~</p></blockquote><figure class="image-box">                <img src="/img/karma/karma_start.png" alt="karma" title="" class="">                <p>karma</p>            </figure><blockquote><p>测试完成按<code>ctrl+c</code>关闭;关闭浏览器是没有用的~~</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p><a href="http://blog.jobbole.com/54936/" target="_blank" rel="noopener">http://blog.jobbole.com/54936/</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> karma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断AngularJS渲染页面完成</title>
      <link href="/2015/03/27/%E5%88%A4%E6%96%ADAngularJS%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%AE%8C%E6%88%90/"/>
      <url>/2015/03/27/%E5%88%A4%E6%96%ADAngularJS%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%AE%8C%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>写demo的时候需要调整页面高度,之前用jquery的时候一直是 <code>$(document).ready()</code> 来判断页面渲染完成<br>但是到了angularjs之后,不起作用…………<br><a id="more"></a></p><blockquote><p>使用$viewContentLoaded事件</p></blockquote><ul><li><a href="http://plnkr.co/edit/isbTireh3w9OomDOvx87?p=preview" target="_blank" rel="noopener">完整Demo</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-controller=<span class="string">"MainCtrl"</span>&gt;</span><br><span class="line">  &lt;div ng-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$scope.$on(<span class="string">'$viewContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">$scope.$watch(<span class="string">'$viewContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>利用data-ng-init<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-controller=<span class="string">"test"</span>&gt;  </span><br><span class="line">     &lt;div data-ng-init=<span class="string">"load()"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bookControllers.controller(<span class="string">'testInit'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams</span>) </span>&#123;  </span><br><span class="line">    $scope.load = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">         alert(<span class="string">'code here'</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://stackoverflow.com/questions/21715256/angularjs-event-to-call-after-content-is-loaded" target="_blank" rel="noopener">http://stackoverflow.com/questions/21715256/angularjs-event-to-call-after-content-is-loaded</a></li><li><a href="http://blog.51yip.com/jsjquery/1599.html" target="_blank" rel="noopener">http://blog.51yip.com/jsjquery/1599.html</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5 本地图片预览</title>
      <link href="/2015/03/24/html5-%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88/"/>
      <url>/2015/03/24/html5-%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在没有把图片提交到服务器之前，把图片的内容显示在客户端上<br><a id="more"></a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;test&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> accept=<span class="string">"image/*"</span> id=<span class="string">"img"</span>/&gt;</span><br><span class="line">    &lt;img id=<span class="string">"showImg"</span> alt=<span class="string">"待显示的图片"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>);</span><br><span class="line">            fileInput.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 获取files</span></span><br><span class="line">                <span class="keyword">var</span> files = e.target.files;</span><br><span class="line">                <span class="comment">// 获取单个file</span></span><br><span class="line">                <span class="keyword">if</span> (files &amp;&amp; files.length) &#123;</span><br><span class="line">                    <span class="keyword">var</span> file = files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 通过 FileReader</span></span><br><span class="line">                    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">                    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">                        image.src = event.target.result;</span><br><span class="line">                        image.width = <span class="number">100</span>;</span><br><span class="line">                        <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    reader.readAsDataURL(file);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 通过 window.URL 工具从 file 对象生成一个可用的 URL</span></span><br><span class="line">                    <span class="keyword">var</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">                    <span class="keyword">var</span> imgURL = URL.createObjectURL(file);</span><br><span class="line">                    <span class="comment">// 显示</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'showImg'</span>).src = imgURL;</span><br><span class="line"></span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 使用下面这句可以在内存中释放对此 url 的伺服</span></span><br><span class="line">                        URL.revokeObjectURL(imgURL);</span><br><span class="line">                        <span class="comment">// 再次设置无效!</span></span><br><span class="line">                        <span class="built_in">document</span>.getElementById(<span class="string">'showImg'</span>).src = imgURL;</span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>调用 URL.createObjectURL 的时候，浏览器自动在内存中开辟空间，用于伺服这个 URL，也就是使得这个 URL 可以请求成功；</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://www.huangwenchao.com.cn/2015/03/html5-image-preview.html" target="_blank" rel="noopener">http://www.huangwenchao.com.cn/2015/03/html5-image-preview.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/08/file_upload.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/08/file_upload.html</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]AngularJS 作用域数据绑定</title>
      <link href="/2015/03/22/-%E8%BD%AC-AngularJS-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2015/03/22/-%E8%BD%AC-AngularJS-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>在imooc上看<a href="http://www.imooc.com/video/3085" target="_blank" rel="noopener">angularjs指令4</a>,搜索了转载下<br><a id="more"></a></p><ol><li>基于字符串的绑定：使用@操作符，双引号内的内容当做字符串进行绑定。</li><li>基于变量的绑定：使用=操作符，绑定的内容是个变量,双向数据绑定</li><li>基于方法的绑定：使用&amp;操作符，绑定的内容是个方法。</li></ol><ol><li><p><strong>@</strong></p><figure class="image-box">                <img src="/img/angularjs/@.png" alt="@" title="" class="">                <p>@</p>            </figure></li><li><p><strong>=</strong></p><figure class="image-box">                <img src="/img/angularjs/=.png" alt="=" title="" class="">                <p>=</p>            </figure></li><li><p><strong>&amp;</strong></p><figure class="image-box">                <img src="/img/angularjs/&.png" alt="&" title="" class="">                <p>&</p>            </figure></li></ol><blockquote><p>上图代码: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html ng-app=<span class="string">"myApp"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">         &lt;script src=<span class="string">"http://apps.bdimg.com/libs/angular.js/1.2.16/angular.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div ng-controller="myAppCtrl"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;xingoo say="test string"&gt;&lt;/</span>xingoo&gt;</span><br><span class="line">            &lt;xingoo say=<span class="string">"&#123;&#123;str2&#125;&#125;"</span>&gt;&lt;/xingoo&gt;</span><br><span class="line">            &lt;xingoo say=<span class="string">"test()"</span>&gt;&lt;/xingoo&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            var myAppModule = angular.module("</span>myApp<span class="string">",[]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.controller("</span>myAppCtrl<span class="string">",['$scope',function($scope)&#123;</span></span><br><span class="line"><span class="string">                $scope.str1 = "</span>hello<span class="string">";</span></span><br><span class="line"><span class="string">                $scope.str2 = "</span>world<span class="string">";</span></span><br><span class="line"><span class="string">                $scope.str3 = "</span>angular<span class="string">";</span></span><br><span class="line"><span class="string">            &#125;]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.directive("</span>xingoo<span class="string">",function()&#123;</span></span><br><span class="line"><span class="string">                return &#123;</span></span><br><span class="line"><span class="string">                    restrict:'AE',</span></span><br><span class="line"><span class="string">                    scope:&#123;</span></span><br><span class="line"><span class="string">                        say:'@'</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    template:"</span>&lt;div&gt;&#123;&#123;say&#125;&#125;&lt;<span class="regexp">/div&gt;&lt;br&gt;",</span></span><br><span class="line"><span class="regexp">                    repalce:true</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html ng-app=<span class="string">"myApp"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">         &lt;script src=<span class="string">"http://apps.bdimg.com/libs/angular.js/1.2.16/angular.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div ng-controller="myAppCtrl"&gt;</span></span><br><span class="line"><span class="regexp">            ctrl:&lt;input type="text" ng-model="testname"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">            directive:&lt;xingoo name="testname"&gt;&lt;/</span>xingoo&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            var myAppModule = angular.module("</span>myApp<span class="string">",[]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.controller("</span>myAppCtrl<span class="string">",['$scope',function($scope)&#123;</span></span><br><span class="line"><span class="string">                $scope.testname="</span>my name is xingoo<span class="string">";</span></span><br><span class="line"><span class="string">            &#125;]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.directive("</span>xingoo<span class="string">",function()&#123;</span></span><br><span class="line"><span class="string">                return &#123;</span></span><br><span class="line"><span class="string">                    restrict:'AE',</span></span><br><span class="line"><span class="string">                    scope:&#123;</span></span><br><span class="line"><span class="string">                        name:'='</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    template:'&lt;input type="</span>text<span class="string">" ng-model="</span>name<span class="string">"&gt;',</span></span><br><span class="line"><span class="string">                    repalce:true</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html ng-app=<span class="string">"myApp"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">         &lt;script src=<span class="string">"http://apps.bdimg.com/libs/angular.js/1.2.16/angular.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div ng-controller="myAppCtrl"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;xingoo say="sayHello(name)"&gt;&lt;/</span>xingoo&gt;</span><br><span class="line">            &lt;xingoo say=<span class="string">"sayNo(name)"</span>&gt;&lt;/xingoo&gt;</span><br><span class="line">            &lt;xingoo say=<span class="string">"sayYes(name)"</span>&gt;&lt;/xingoo&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            var myAppModule = angular.module("</span>myApp<span class="string">",[]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.controller("</span>myAppCtrl<span class="string">",['$scope',function($scope)&#123;</span></span><br><span class="line"><span class="string">                $scope.sayHello = function(name)&#123;</span></span><br><span class="line"><span class="string">                    console.log("</span>hello !<span class="string">"+ name);</span></span><br><span class="line"><span class="string">                &#125;;</span></span><br><span class="line"><span class="string">                $scope.sayNo = function(name)&#123;</span></span><br><span class="line"><span class="string">                    console.log("</span>no !<span class="string">"+ name);</span></span><br><span class="line"><span class="string">                &#125;;</span></span><br><span class="line"><span class="string">                $scope.sayYes = function(name)&#123;</span></span><br><span class="line"><span class="string">                    console.log("</span>yes !<span class="string">"+ name);</span></span><br><span class="line"><span class="string">                &#125;;</span></span><br><span class="line"><span class="string">            &#125;]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            myAppModule.directive("</span>xingoo<span class="string">",function()&#123;</span></span><br><span class="line"><span class="string">                return &#123;</span></span><br><span class="line"><span class="string">                    restrict:'AE',</span></span><br><span class="line"><span class="string">                    scope:&#123;</span></span><br><span class="line"><span class="string">                        say:'&amp;'</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    template:'&lt;input type="</span>text<span class="string">" ng-model="</span>username<span class="string">"/&gt;&lt;br&gt;'+</span></span><br><span class="line"><span class="string">                        '&lt;button ng-click="</span>say(&#123;<span class="attr">name</span>:username&#125;)<span class="string">"&gt;click&lt;/button&gt;&lt;br&gt;',</span></span><br><span class="line"><span class="string">                    repalce:true</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://www.cnblogs.com/xing901022/p/4291521.html" target="_blank" rel="noopener">http://www.cnblogs.com/xing901022/p/4291521.html</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AngularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机HTML5 audio 无法自动播放下一首</title>
      <link href="/2015/03/19/%E6%89%8B%E6%9C%BAHTML5-audio-%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E4%B8%8B%E4%B8%80%E9%A6%96/"/>
      <url>/2015/03/19/%E6%89%8B%E6%9C%BAHTML5-audio-%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E4%B8%8B%E4%B8%80%E9%A6%96/</url>
      
        <content type="html"><![CDATA[<p>在PC的chrome上下一首很好的工作;但是在Android的chrome上出现了手动切换下一首无问题,自动切换下一首无法播放问题</p><a id="more"></a><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p><strong>不在网页里面直接写<code>&lt;audio&gt;</code></strong></p><blockquote><p>原来代码: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (audio) &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(audio);</span><br><span class="line">&#125;</span><br><span class="line">audio = <span class="built_in">document</span>.createElement(<span class="string">'audio'</span>);</span><br><span class="line">audio.innerHTML = <span class="string">'&lt;source src='</span> + audioobj.mp3 + <span class="string">'&gt;'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(audio);</span><br><span class="line">audio.play();</span><br></pre></td></tr></table></figure><blockquote><p>修改后的代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (audio) &#123;</span><br><span class="line">  <span class="comment">// 把audio.src设为null，并显式调用audio.load()，</span></span><br><span class="line">  <span class="comment">// 此时对于Android会中断数据读取</span></span><br><span class="line">  audio.src = <span class="literal">null</span>;</span><br><span class="line">  audio.load();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//  通过new</span></span><br><span class="line">  audio = <span class="keyword">new</span> Audio();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">audio.src = audioobj.mp3;</span><br><span class="line">audio.play();</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://www.86y.org/art_detail.aspx?id=720" target="_blank" rel="noopener">http://www.86y.org/art_detail.aspx?id=720</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用meat整理[转]</title>
      <link href="/2015/03/17/%E5%B8%B8%E7%94%A8meat%E6%95%B4%E7%90%86-%E8%BD%AC/"/>
      <url>/2015/03/17/%E5%B8%B8%E7%94%A8meat%E6%95%B4%E7%90%86-%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前两天看到 “使用meta实现页面的定时刷新或跳转”<br><a id="more"></a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用&lt;meta&gt;实现，下面几个典型代码示例：</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"5"</span>&gt;</span><br><span class="line">这个表示当前页面每<span class="number">5</span>秒钟刷一下，刷一下~</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"2; url='/'"</span>&gt;</span><br><span class="line">这个表示当前页面<span class="number">2</span>秒后跳到首页~</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0; url='http://www.qq.com/'"</span>&gt;</span><br><span class="line">页面直接跳转到腾讯网~</span><br></pre></td></tr></table></figure><blockquote><p>今天看到 “常用meta整理”; 转载记录下~~</p></blockquote><h1 id="lt-meta-gt-元素"><a href="#lt-meta-gt-元素" class="headerlink" title="&lt;meta&gt;元素"></a>&lt;meta&gt;元素</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><blockquote><p>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。 —— <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">W3School</a></p></blockquote><p><strong>必要属性</strong></p><table><thead><tr><th>属性</th><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>content</td><td style="text-align:center">some text</td><td style="text-align:center">定义与http-equiv或name属性相关的元信息</td></tr></tbody></table><p><strong>可选属性</strong></p><table><thead><tr><th>属性</th><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>http-equiv</td><td style="text-align:center">content-type / expire / refresh / set-cookie</td><td style="text-align:center">把content属性关联到HTTP头部。</td></tr><tr><td>name</td><td style="text-align:center">author / description / keywords / generator / revised / others</td><td style="text-align:center">把 content 属性关联到一个名称。</td></tr><tr><td>content</td><td style="text-align:center">some text</td><td style="text-align:center">定义用于翻译 content 属性值的格式。</td></tr></tbody></table><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p><a href="http://msdn.microsoft.com/zh-cn/library/ff724016" target="_blank" rel="noopener">参考链接</a></p><ul><li><strong>页面关键词</strong>，每个网页应具有描述该网页内容的一组唯一的关键字。<br>使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"keywords"</span> content=<span class="string">"your tags"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>页面描述</strong>，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"description"</span> content=<span class="string">"150 words"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>搜索引擎索引方式</strong>，robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"robots"</span> content=<span class="string">"index,follow"</span> /&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    all：文件将被检索，且页面上的链接可以被查询；</span><br><span class="line">    none：文件将不被检索，且页面上的链接不可以被查询；</span><br><span class="line">    index：文件将被检索；</span><br><span class="line">    follow：页面上的链接可以被查询；</span><br><span class="line">    noindex：文件将不被检索；</span><br><span class="line">    nofollow：页面上的链接不可以被查询。</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>页面重定向和刷新</strong>：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0;url="</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>其他</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"author"</span> content=<span class="string">"author name"</span> /&gt; <span class="xml"><span class="comment">&lt;!-- 定义网页作者 --&gt;</span></span></span><br><span class="line">&lt;meta name="google" content="index,follow" /&gt;</span><br><span class="line">&lt;meta name="googlebot" content="index,follow" /&gt;</span><br><span class="line">&lt;meta name="verify" content="index,follow" /&gt;</span><br></pre></td></tr></table></figure><h2 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h2><ul><li><strong>viewport：</strong>能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。<br>大部分4.7-5寸设备的viewport宽设为360px；5.5寸设备设为400px；iphone6设为375px；ipone6 plus设为414px。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"</span>/&gt;</span><br><span class="line">&lt;!-- <span class="string">`width=device-width`</span> 会导致 iPhone <span class="number">5</span> 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边  --&gt;</span><br></pre></td></tr></table></figure><blockquote><ol><li>width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）</li><li>height：高度（数值 / device-height）（范围从223 到10,000）</li><li>initial-scale：初始的缩放比例 （范围从&gt;0 到10）</li><li>minimum-scale：允许用户缩放到的最小比例</li><li>maximum-scale：允许用户缩放到的最大比例</li><li>user-scalable：用户是否可以手动缩 (no,yes)</li><li>minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）</li></ol></blockquote><p><em>注意，很多人使用initial-scale=1到非响应式网站上，这会让网站以100%宽度渲染，用户需要手动移动页面或者缩放。如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。</em></p><ul><li><p><strong>WebApp全屏模式：</strong>伪装app，离线应用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span> /&gt; <span class="xml"><span class="comment">&lt;!-- 启用 WebApp 全屏模式 --&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>隐藏状态栏/设置状态栏颜色：</strong>只有在开启WebApp全屏模式时才生效。content的值为default | black | black-translucent 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span> content=<span class="string">"black-translucent"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加到主屏后的标题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-title"</span> content=<span class="string">"标题"</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="image-box">                <img src="/img/meta/articlex.jpg" alt="meta" title="" class="">                <p>meta</p>            </figure><p><strong>忽略数字自动识别为电话号码</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=<span class="string">"telephone=no"</span> name=<span class="string">"format-detection"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>忽略识别邮箱</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=<span class="string">"email=no"</span> name=<span class="string">"format-detection"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>添加智能 App 广告条 Smart App Banner：</strong>告诉浏览器这个网站对应的app，并在页面上显示下载banner(如下图)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"apple-itunes-app"</span> content=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="/img/meta/banner.jpg" alt="Alt text" title="" class="">                <p>Alt text</p>            </figure><p><strong>其他</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"HandheldFriendly"</span> content=<span class="string">"true"</span>&gt;</span><br><span class="line">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"MobileOptimized"</span> content=<span class="string">"320"</span>&gt;</span><br><span class="line">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"screen-orientation"</span> content=<span class="string">"portrait"</span>&gt;</span><br><span class="line">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"x5-orientation"</span> content=<span class="string">"portrait"</span>&gt;</span><br><span class="line">&lt;!-- UC强制全屏 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"full-screen"</span> content=<span class="string">"yes"</span>&gt;</span><br><span class="line">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"x5-fullscreen"</span> content=<span class="string">"true"</span>&gt;</span><br><span class="line">&lt;!-- UC应用模式 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"browsermode"</span> content=<span class="string">"application"</span>&gt;</span><br><span class="line">&lt;!-- QQ应用模式 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"x5-page-mode"</span> content=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="line">&lt;meta name=<span class="string">"msapplication-tap-highlight"</span> content=<span class="string">"no"</span>&gt;</span><br></pre></td></tr></table></figure></p><h2 id="网页相关"><a href="#网页相关" class="headerlink" title="网页相关"></a>网页相关</h2><p><strong>申明编码</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">'utf-8'</span> /&gt;</span><br></pre></td></tr></table></figure></p><p><strong>优先使用 IE 最新版本和 Chrome</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span><br><span class="line">&lt;!-- 关于X-UA-Compatible --&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=6"</span> &gt;<span class="xml"><span class="comment">&lt;!-- 使用IE6 --&gt;</span></span></span><br><span class="line">&lt;meta http-equiv="X-UA-Compatible" content="IE=7" &gt;&lt;!-- 使用IE7 --&gt;</span><br><span class="line">&lt;meta http-equiv="X-UA-Compatible" content="IE=8" &gt;&lt;!-- 使用IE8 --&gt;</span><br></pre></td></tr></table></figure></p><p><strong>浏览器内核控制：</strong> 国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"renderer"</span> content=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>国内双核浏览器默认内核模式如下：</p><ol><li>搜狗高速浏览器、QQ浏览器：IE内核（兼容模式）</li><li>360极速浏览器、遨游浏览器：Webkit内核（极速模式）</li></ol></blockquote><p><strong>禁止浏览器从本地计算机的缓存中访问页面内容：</strong>这样设定，访问者将无法脱机浏览。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Pragma"</span> content=<span class="string">"no-cache"</span>&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Windows 8</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"msapplication-TileColor"</span> content=<span class="string">"#000"</span>/&gt; <span class="xml"><span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span></span><br><span class="line">&lt;meta name="msapplication-TileImage" content="icon.png"/&gt; &lt;!-- Windows 8 磁贴图标 --&gt;</span><br></pre></td></tr></table></figure></p><p><strong>站点适配：</strong>主要用于PC-手机页的对应关系。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"mobile-agent"</span>content=<span class="string">"format=[wml|xhtml|html5]; url=url"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；</span><br><span class="line">url=<span class="string">"url"</span> 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure></p><p><strong>转码申明：</strong>用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Cache-Control"</span> content=<span class="string">"no-siteapp"</span> /&gt;</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/</a></li><li><a href="http://segmentfault.com/blog/ciaocc/1190000002407912" target="_blank" rel="noopener">http://segmentfault.com/blog/ciaocc/1190000002407912</a></li></ul><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-webkit 播放video/audio的mp3,mp4</title>
      <link href="/2015/03/15/node-webkit-%E6%92%AD%E6%94%BEvideo-audio%E7%9A%84mp3-mp4/"/>
      <url>/2015/03/15/node-webkit-%E6%92%AD%E6%94%BEvideo-audio%E7%9A%84mp3-mp4/</url>
      
        <content type="html"><![CDATA[<h1 id="node-webkit-播放video-audio的mp3-mp4"><a href="#node-webkit-播放video-audio的mp3-mp4" class="headerlink" title="node-webkit 播放video/audio的mp3,mp4"></a>node-webkit 播放video/audio的mp3,mp4</h1><blockquote><p>替换node-webkit的解码器<br>使用chrome原版的替换<br>linux上是 libffmpegsumo.so,Windows是 ffmpegsumo.dll</p></blockquote><a id="more"></a><p><strong>node-webkit使用的chrome版本要和替换的chrome版本一样!!</strong></p><blockquote><p> <a href="https://raw.githubusercontent.com/xinshangshangxin/hexo-blog/gh-pages/other/node-webkit/ffmpegsumo.dll" target="_blank" rel="noopener">下载windows版 <code>Chromium 41.0.2272.76</code> 的 <code>ffmpegsumo.dll</code></a></p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p><strong>chrome的解码器是付费的;so~~</strong></p><blockquote><p>本地音乐的话把.mp3/.mp4转成.ogg</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p><a href="http://kevinchen.synology.me/TechnicalDocuments/node-webkit/use_audio_video.html" target="_blank" rel="noopener">http://kevinchen.synology.me/TechnicalDocuments/node-webkit/use_audio_video.html</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node-webkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js/jq 获取 高度/宽度</title>
      <link href="/2015/03/14/js-jq-%E8%8E%B7%E5%8F%96-%E9%AB%98%E5%BA%A6-%E5%AE%BD%E5%BA%A6/"/>
      <url>/2015/03/14/js-jq-%E8%8E%B7%E5%8F%96-%E9%AB%98%E5%BA%A6-%E5%AE%BD%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在<a href="http://musicplayer.coding.io/" target="_blank" rel="noopener">musicplayer</a>中要动态调整高度,在网上找了些汇总下<br><a id="more"></a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).height(); <span class="comment">//浏览器当前窗口可视区域高度 </span></span><br><span class="line">$(<span class="built_in">document</span>).height(); <span class="comment">//浏览器当前窗口文档的高度 </span></span><br><span class="line">$(<span class="built_in">document</span>.body).height();<span class="comment">//浏览器当前窗口文档body的高度 </span></span><br><span class="line">$(<span class="built_in">document</span>.body).outerHeight(<span class="literal">true</span>);<span class="comment">//浏览器当前窗口文档body的总高度 包括border padding margin </span></span><br><span class="line">$(<span class="built_in">window</span>).width(); <span class="comment">//浏览器当前窗口可视区域宽度 </span></span><br><span class="line">$(<span class="built_in">document</span>).width();<span class="comment">//浏览器当前窗口文档对象宽度 </span></span><br><span class="line">$(<span class="built_in">document</span>.body).width();<span class="comment">//浏览器当前窗口文档body的高度 </span></span><br><span class="line">$(<span class="built_in">document</span>.body).outerWidth(<span class="literal">true</span>);<span class="comment">//浏览器当前窗口文档body的总宽度 包括border padding margin </span></span><br><span class="line">$(<span class="built_in">document</span>).scrollTop();<span class="comment">//网页被卷去的高</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientWidth; <span class="comment">//网页可见区域宽</span></span><br><span class="line"><span class="built_in">document</span>.body.clientHeight; <span class="comment">//网页可见区域高</span></span><br><span class="line"><span class="built_in">document</span>.body.offsetWidth; <span class="comment">//网页可见区域宽(包括边线和滚动条的宽)</span></span><br><span class="line"><span class="built_in">document</span>.body.offsetHeight;<span class="comment">//网页可见区域高 (包括边线的宽)";</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollWidth;<span class="comment">//网页正文全文宽</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollHeight;<span class="comment">//网页正文全文高</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop;<span class="comment">//网页被卷去的高(ff)</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;<span class="comment">//网页被卷去的高(ie)</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollLeft;<span class="comment">//网页被卷去的左</span></span><br><span class="line"><span class="built_in">window</span>.screen.height;<span class="comment">//屏幕分辨率的高</span></span><br><span class="line"><span class="built_in">window</span>.screen.width;<span class="comment">//屏幕分辨率的宽</span></span><br><span class="line"><span class="built_in">window</span>.screen.availHeight;<span class="comment">//屏幕可用工作区高度</span></span><br><span class="line"><span class="built_in">window</span>.screen.availWidth;<span class="comment">//屏幕可用工作区宽度</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在IE中：</span></span><br><span class="line"><span class="built_in">document</span>.body.clientWidth ==&gt; BODY对象宽度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; BODY对象高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 可见区域高度</span><br><span class="line"><span class="comment">//在FireFox中：</span></span><br><span class="line"><span class="built_in">document</span>.body.clientWidth ==&gt; BODY对象宽度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; BODY对象高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 可见区域高度</span><br><span class="line"><span class="comment">//在Opera中： </span></span><br><span class="line"><span class="built_in">document</span>.body.clientWidth ==&gt; 可见区域宽度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; 可见区域高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 页面对象宽度（即BODY对象宽度加上Margin宽）</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 页面对象高度（即BODY对象高度加上Margin高）</span><br><span class="line">而如果没有定义W3C的标准，则</span><br><span class="line"><span class="comment">//IE为：</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; <span class="number">0</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; <span class="number">0</span></span><br><span class="line"><span class="comment">//FireFox为：</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 页面对象宽度（即BODY对象宽度加上Margin宽）</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 页面对象高度（即BODY对象高度加上Margin高）</span><br><span class="line"><span class="comment">//Opera为：</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 页面对象宽度（即BODY对象宽度加上Margin宽）</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 页面对象高度（即BODY对象高度加上Margin高）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面的高度、宽度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xScroll, yScroll;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.innerHeight &amp;&amp; <span class="built_in">window</span>.scrollMaxY) &#123;</span><br><span class="line">        xScroll = <span class="built_in">window</span>.innerWidth + <span class="built_in">window</span>.scrollMaxX;</span><br><span class="line">        yScroll = <span class="built_in">window</span>.innerHeight + <span class="built_in">window</span>.scrollMaxY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.body.scrollHeight &gt; <span class="built_in">document</span>.body.offsetHeight) &#123; <span class="comment">// all but Explorer Mac    </span></span><br><span class="line">            xScroll = <span class="built_in">document</span>.body.scrollWidth;</span><br><span class="line">            yScroll = <span class="built_in">document</span>.body.scrollHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari    </span></span><br><span class="line">            xScroll = <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">            yScroll = <span class="built_in">document</span>.body.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> windowWidth, windowHeight;</span><br><span class="line">    <span class="keyword">if</span> (self.innerHeight) &#123; <span class="comment">// all except Explorer    </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.clientWidth) &#123;</span><br><span class="line">            windowWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            windowWidth = self.innerWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        windowHeight = self.innerHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement &amp;&amp; <span class="built_in">document</span>.documentElement.clientHeight) &#123; <span class="comment">// Explorer 6 Strict Mode    </span></span><br><span class="line">            windowWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">            windowHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123; <span class="comment">// other Explorers    </span></span><br><span class="line">                windowWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">                windowHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="comment">// for small pages with total height less then height of the viewport    </span></span><br><span class="line">    <span class="keyword">if</span> (yScroll &lt; windowHeight) &#123;</span><br><span class="line">        pageHeight = windowHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageHeight = yScroll;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// for small pages with total width less then width of the viewport    </span></span><br><span class="line">    <span class="keyword">if</span> (xScroll &lt; windowWidth) &#123;</span><br><span class="line">        pageWidth = xScroll;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageWidth = windowWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    arrayPageSize = <span class="keyword">new</span> <span class="built_in">Array</span>(pageWidth, pageHeight, windowWidth, windowHeight);</span><br><span class="line">    <span class="keyword">return</span> arrayPageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p><a href="http://www.cnblogs.com/henllyee/archive/2008/04/20/1162517.html" target="_blank" rel="noopener">http://www.cnblogs.com/henllyee/archive/2008/04/20/1162517.html</a><br><a href="http://www.cnblogs.com/hoojo/archive/2012/02/16/2354663.html" target="_blank" rel="noopener">http://www.cnblogs.com/hoojo/archive/2012/02/16/2354663.html</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler学习笔记</title>
      <link href="/2015/03/11/fiddler%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/03/11/fiddler%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>慕课网fiddler学习以及部分补充说明<br><a id="more"></a></p><h1 id="fiddler视频教程"><a href="#fiddler视频教程" class="headerlink" title="fiddler视频教程"></a>fiddler视频教程</h1><blockquote><p><a href="http://www.imooc.com/learn/37" target="_blank" rel="noopener">慕课网fiddler视频教程</a></p></blockquote><h1 id="添加ServerIP"><a href="#添加ServerIP" class="headerlink" title="添加ServerIP"></a>添加ServerIP</h1><blockquote><p>快捷键Ctrl+R  或者  菜单-&gt;Rules-&gt;Customize Rules…</p></blockquote><p>在<code>CustomRules.js</code>文件里<code>Ctrl+F</code>查找字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br></pre></td></tr></table></figure></p><blockquote><p>添加一行代码即可显示IP</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"ServerIP"</span>, <span class="number">120</span>, <span class="string">"X-HostIP"</span>);</span><br></pre></td></tr></table></figure><p>结果如下所示:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> today: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        </span><br><span class="line">        FiddlerObject.StatusText = <span class="string">" CustomRules.js was loaded at: "</span> + today;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加显示 ServerIP</span></span><br><span class="line">        FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"ServerIP"</span>, <span class="number">120</span>, <span class="string">"X-HostIP"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Uncomment to add a "Server" column containing the response "Server" header, if present</span></span><br><span class="line">        <span class="comment">// UI.lvSessions.AddBoundColumn("Server", 50, "@response.server");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Uncomment to add a global hotkey (Win+G) that invokes the ExecAction method below...</span></span><br><span class="line">        <span class="comment">// UI.RegisterCustomHotkey(HotkeyModifiers.Windows, Keys.G, "screenshot"); </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="图标代表含义"><a href="#图标代表含义" class="headerlink" title="图标代表含义"></a>图标代表含义</h1><figure class="image-box">                <img src="/img/fiddler/meaning.png" alt="" title="" class="">                <p></p>            </figure><h1 id="使用Fiddler调试手机页面请求"><a href="#使用Fiddler调试手机页面请求" class="headerlink" title="使用Fiddler调试手机页面请求"></a>使用Fiddler调试手机页面请求</h1><p><a href="http://i.wanz.im/2013/04/30/debugging_http_request_with_fiddler/" target="_blank" rel="noopener">http://i.wanz.im/2013/04/30/debugging_http_request_with_fiddler/</a></p><h1 id="fiddler-不支持视频最后讲的-Willow"><a href="#fiddler-不支持视频最后讲的-Willow" class="headerlink" title="fiddler 不支持视频最后讲的 Willow"></a>fiddler 不支持视频最后讲的 Willow</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p><a href="http://www.xuanfengge.com/fiddler-displays-the-set-ip-method.html" target="_blank" rel="noopener">http://www.xuanfengge.com/fiddler-displays-the-set-ip-method.html</a><br><a href="http://tid.tenpay.com/?p=3011" target="_blank" rel="noopener">http://tid.tenpay.com/?p=3011</a></p><hr><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js关闭浏览器事件</title>
      <link href="/2015/03/10/js%E5%85%B3%E9%97%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6/"/>
      <url>/2015/03/10/js%E5%85%B3%E9%97%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>js关闭浏览器事件注意点!<br><a id="more"></a></p><h1 id="js关闭浏览器事件"><a href="#js关闭浏览器事件" class="headerlink" title="js关闭浏览器事件"></a>js关闭浏览器事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 兼容IE8和Firefox 4之前的版本</span></span><br><span class="line">  <span class="keyword">if</span> (e) &#123;</span><br><span class="line">    e.returnValue = <span class="string">'关闭提示'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Chrome, Safari, Firefox 4+, Opera 12+ , IE 9+</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'关闭提示'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自定义的关闭提示无法完成"><a href="#自定义的关闭提示无法完成" class="headerlink" title="自定义的关闭提示无法完成!"></a>自定义的关闭提示无法完成!</h2><blockquote><p>从2011年5月25日起,  HTML5 规范 声明:在该事件的处理函数中调用下列弹窗相关的方法时,可以忽略不执行,window.showModalDialog(), window.alert(), window.confirm() window.prompt().</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onbeforeunload" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onbeforeunload</a></li></ul><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]ECMAScript函数的原型</title>
      <link href="/2015/03/08/-%E8%BD%AC-ECMAScript%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B/"/>
      <url>/2015/03/08/-%E8%BD%AC-ECMAScript%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript函数的原型<br><a id="more"></a></p><h2 id="函数的原型基本概念"><a href="#函数的原型基本概念" class="headerlink" title="函数的原型基本概念"></a>函数的原型基本概念</h2><ol><li>每个函数都有一个原型（prototype）属性；</li><li>原型属性是一个指针，指向一个对象；</li><li>对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</li></ol><h2 id="理解函数原型对象（prototype）"><a href="#理解函数原型对象（prototype）" class="headerlink" title="理解函数原型对象（prototype）"></a>理解函数原型对象（prototype）</h2><ol><li><p>constructor属性。创建函数后，自动获取到此属性。默认情况下，函数prototype的constructor指向函数本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.constructor === Foo;  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>prototype上其他方法继承自Object，如toString()、valueOf(),hasOwnPrototype()、isPrototypeOf()等等。</p></li></ol><h2 id="构造函数、函数的原型对象和构造函数实例之间的关系"><a href="#构造函数、函数的原型对象和构造函数实例之间的关系" class="headerlink" title="构造函数、函数的原型对象和构造函数实例之间的关系"></a>构造函数、函数的原型对象和构造函数实例之间的关系</h2><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262第5版中管这个指针叫[[Prototype]]。<strong>这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"MirrorAvatar"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">3</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"coder"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();  <span class="comment">//MirrorAvatar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName();  <span class="comment">//MirrorAvatar</span></span><br><span class="line"></span><br><span class="line">person1.sayName === person2.sayName;  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>构造函数Person、Person的原型对象prototype和Person的两个实例person1&amp;&amp;person2关系图：</p><figure class="image-box">                <img src="/img/proyotype/person.png" alt="关系图" title="" class="">                <p>关系图</p>            </figure><p>文字描述：</p><ol><li>Person.prototype指向了原型对象；</li><li>Person.prototype.constructor指回了Person；</li><li>原型对象不光只有一个constructor属性，还有后来添加上来的属性；</li><li>Person的两个实例person1和person2仅仅指向了Person.prototype,它们与构造函数Person没有直接联系；</li><li>person1和person2不包含属性和方法，但是可以访问到。</li></ol><h2 id="检测某个实例是否和某个原型对象存在关系"><a href="#检测某个实例是否和某个原型对象存在关系" class="headerlink" title="检测某个实例是否和某个原型对象存在关系"></a>检测某个实例是否和某个原型对象存在关系</h2><ol><li><p>isPrototypeOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法继承自Object</span></span><br><span class="line">Person.prototype.isPrototypeOf(person1);  <span class="comment">//true</span></span><br><span class="line">Person.prototype.isPrototypeOf(person2);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>ECMAScript5的Object.getPrototypeOf()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">此方法返回[[Prototype]]的值,即返回这个对象的原型。</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person1) === Person.prototype;  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person1).name;  <span class="comment">//"MirrorAvatar"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="多个对象实例共享原型所保存的属性和方法的基本原理"><a href="#多个对象实例共享原型所保存的属性和方法的基本原理" class="headerlink" title="多个对象实例共享原型所保存的属性和方法的基本原理"></a>多个对象实例共享原型所保存的属性和方法的基本原理</h2><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。</p><p>过程：</p><ol><li>搜索对象实例本身。有，返回；无，继续。</li><li>搜索指针指向的原型对象。有，返回；无，返回undefined。</li></ol><p>注意：</p><p><strong>对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。</strong>如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"Cindy"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">"MirrorAvatar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">//"MirrorAvatar"，值来着实例，屏蔽原型的</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);  <span class="comment">//"Cindy"，值来自原型</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">"name"</span>);  <span class="comment">//true</span></span><br><span class="line">person2.hasOwnProperty(<span class="string">"name"</span>);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.name;  <span class="comment">//可以删除实例的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">//"Cindy"，值来自原型，说明只是屏蔽没有被重写</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">"name"</span>);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="转载自-http-mirroravatar-iteye-com-blog-2190410"><a href="#转载自-http-mirroravatar-iteye-com-blog-2190410" class="headerlink" title="转载自: http://mirroravatar.iteye.com/blog/2190410"></a>转载自: <a href="http://mirroravatar.iteye.com/blog/2190410" target="_blank" rel="noopener">http://mirroravatar.iteye.com/blog/2190410</a></h1><blockquote><h3 id="文章若有纰漏请大家补充指正-谢谢"><a href="#文章若有纰漏请大家补充指正-谢谢" class="headerlink" title="文章若有纰漏请大家补充指正,谢谢~~"></a>文章若有纰漏请大家补充指正,谢谢~~</h3><p><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blur踩坑</title>
      <link href="/2015/03/08/blur%E8%B8%A9%E5%9D%91/"/>
      <url>/2015/03/08/blur%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>一直以为blur可以直接设置在任何元素上,然后悲剧的发现并不是….<br><a id="more"></a></p><h1 id="div无法使用blur判断失去焦点"><a href="#div无法使用blur判断失去焦点" class="headerlink" title="div无法使用blur判断失去焦点"></a>div无法使用blur判断失去焦点</h1><blockquote><p>An element can have focus if the tabIndex property is set to any valid negative or positive integer.<br>Elements that receive focus can fire the onblur and onfocus events as of Internet Explorer 4.0, and the onkeydown, onkeypress, and onkeyup events as of Internet Explorer 5.</p></blockquote><blockquote><p>只要元素的tabIndex属性设置成任何有效的整数那么该元素就能取得焦点。元素在取得焦点后就能触发onblur，onfocus，onkeydown, onkeypress和onkeyup事件。</p></blockquote><blockquote><p>不同tabIndex值在tab order（Tabbing navigation）中的情况：</p></blockquote><blockquote><p>Objects with a positive tabIndex are selected in increasing iIndex order and in source order to resolve duplicates.<br>Objects with an tabIndex of zero are selected in source order.<br>Objects with a negative tabIndex are omitted from the tabbing order.</p></blockquote><blockquote><p>tabIndex值是正数的对象根据递增的值顺序和代码中的位置顺序来被选择<br>tabIndex值是0的对象根据在代码中的位置顺序被选择<br>tabIndex值是负数的对象会被忽略</p></blockquote><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/cloudgamer/archive/2008/12/24/Slider.html" target="_blank" rel="noopener">Slider 滑动条效果</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS上npm install 失败</title>
      <link href="/2015/03/04/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8Anpm-install-%E5%A4%B1%E8%B4%A5/"/>
      <url>/2015/03/04/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8Anpm-install-%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>昨天没问题,今天重装系统后就出现问题了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">error <span class="built_in">Error</span>: CERT_UNTRUSTED</span><br><span class="line">error     at SecurePair.&lt;anonymous&gt; (tls.js:<span class="number">1370</span>:<span class="number">32</span>)</span><br><span class="line">error     at SecurePair.EventEmitter.emit (events.js:<span class="number">92</span>:<span class="number">17</span>)</span><br><span class="line">error     at SecurePair.maybeInitFinished (tls.js:<span class="number">982</span>:<span class="number">10</span>)</span><br><span class="line">error     at CleartextStream.read [<span class="keyword">as</span> _read] (tls.js:<span class="number">469</span>:<span class="number">13</span>)</span><br><span class="line">error     at CleartextStream.Readable.read (_stream_readable.js:<span class="number">320</span>:<span class="number">10</span>)</span><br><span class="line">error     at EncryptedStream.write [<span class="keyword">as</span> _write] (tls.js:<span class="number">366</span>:<span class="number">25</span>)</span><br><span class="line">error     at doWrite (_stream_writable.js:<span class="number">221</span>:<span class="number">10</span>)</span><br><span class="line">error     at writeOrBuffer (_stream_writable.js:<span class="number">211</span>:<span class="number">5</span>)</span><br><span class="line">error     at EncryptedStream.Writable.write (_stream_writable.js:<span class="number">180</span>:<span class="number">11</span>)</span><br><span class="line">error     at write (_stream_readable.js:<span class="number">583</span>:<span class="number">24</span>)</span><br><span class="line">error If you need help, you may report <span class="keyword">this</span> *entire* log,</span><br></pre></td></tr></table></figure><blockquote><p>谷歌得知是ssl 的问题,<br>所以解决办法:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set strict-ssl <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>成功~~~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS上node外网访问</title>
      <link href="/2015/03/03/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8Anode%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
      <url>/2015/03/03/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%B8%8Anode%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>借了个阿里云的账号,外网访问nodejs遇到问题,做下记录…<br><a id="more"></a></p><blockquote><p>原来是这么写的: </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">'Hello Aliyun Node.js\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">80</span>,<span class="string">"127.0.0.1"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>提示出错,原因是80端口被占用,可以使用8888等端口</p></blockquote><blockquote><p>使用<code>ECS外网IP:8888</code> 访问发现无法打开<br><a href="http://www.aboutit.cn/post/598" target="_blank" rel="noopener">这篇文章</a>是这么做的:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　createServer(...).listen(<span class="number">8888</span>,<span class="string">"阿里云ECS外网IP"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>但是在我这里失败了;<br>接着<a href="http://www.haodaima.net/art/2657330" target="_blank" rel="noopener">这篇文章</a>说: <code>启动NodeJs的侦听进程时，需要侦听所有IP（0.0.0.0）</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createServer(...).listen(<span class="number">8888</span>,<span class="string">"0.0.0.0"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>成功了~~~</p></blockquote><blockquote><p>完整测试例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  res.end(<span class="string">'Hello Aliyun Node.js\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>, <span class="string">"0.0.0.0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'NodeJS Server running at http://0.0.0.0:8888'</span>);</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="http://www.aboutit.cn/post/598" target="_blank" rel="noopener">http://www.aboutit.cn/post/598</a></li><li><a href="http://www.haodaima.net/art/2657330" target="_blank" rel="noopener">http://www.haodaima.net/art/2657330</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS安装node</title>
      <link href="/2015/03/03/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%AE%89%E8%A3%85node/"/>
      <url>/2015/03/03/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%AE%89%E8%A3%85node/</url>
      
        <content type="html"><![CDATA[<p>借了个阿里云的账号尝试安装nodejs,其实和linux一样….<br><a id="more"></a></p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><ul><li>确认服务器有nodejs编译及依赖相关软件 <em>没有运行下面命令安装</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ openssl-devel</span><br></pre></td></tr></table></figure><ul><li><p>下载Node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>解压Node源码包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v0<span class="number">.10</span><span class="number">.24</span>.tar.gz</span><br><span class="line"></span><br><span class="line">cd node-v0<span class="number">.10</span><span class="number">.24</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/node</span><br></pre></td></tr></table></figure></li><li><p>编译,安装  <strong>编译时间较长!</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>配置Node环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>输入 <code>i</code> 进行插入 <code>原来的文件内容不要改~~</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> NODE_HOME=<span class="regexp">/usr/</span>local/node</span><br><span class="line"><span class="keyword">export</span> PATH=$NODE_HOME/bin:$PATH</span><br><span class="line"><span class="keyword">export</span> NODE_PATH=$NODE_HOME/lib/node_modules:$PATH</span><br></pre></td></tr></table></figure><blockquote><p>按<code>esc</code>键, 然后输入 <code>:wq</code> 回车退出</p></blockquote><ul><li><p>重启生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>出现 版本号正确~~~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp初级教程</title>
      <link href="/2015/03/01/gulp%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2015/03/01/gulp%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>我的gulp学习笔记及总结<br><a id="more"></a></p><h2 id="本文略有过时-建议阅读"><a href="#本文略有过时-建议阅读" class="headerlink" title="本文略有过时,建议阅读:"></a>本文略有过时,建议阅读:</h2><h2 id="https-github-com-Platform-CUF-use-gulp"><a href="#https-github-com-Platform-CUF-use-gulp" class="headerlink" title="https://github.com/Platform-CUF/use-gulp"></a><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">https://github.com/Platform-CUF/use-gulp</a></h2><h2 id="https-github-com-lisposter-gulp-docs-zh-cn"><a href="#https-github-com-lisposter-gulp-docs-zh-cn" class="headerlink" title="https://github.com/lisposter/gulp-docs-zh-cn"></a><a href="https://github.com/lisposter/gulp-docs-zh-cn" target="_blank" rel="noopener">https://github.com/lisposter/gulp-docs-zh-cn</a></h2><h1 id="入门图表"><a href="#入门图表" class="headerlink" title="入门图表"></a>入门图表</h1><p><a href="https://github.com/osscafe/gulp-cheatsheet" target="_blank" rel="noopener">github_gulp-cheatsheet</a></p><blockquote><p>中文版直接下载地址: <a href="https://github.com/osscafe/gulp-cheetsheet/raw/master/dist/cn-js-p1.pdf" target="_blank" rel="noopener"><code>pdf1</code></a> <a href="https://github.com/osscafe/gulp-cheetsheet/raw/master/dist/cn-js-p2.pdf" target="_blank" rel="noopener"><code>pdf2</code></a></p></blockquote><h1 id="一些gulp-api"><a href="#一些gulp-api" class="headerlink" title="一些gulp api"></a>一些gulp api</h1><p><code>gulp.src(globs[, options])</code></p><blockquote><p>根据globs提供的文件列表,得到一个stream,按照管道模式给其它插件处理</p></blockquote><p><code>gulp.dest(path[, options])</code></p><blockquote><p>将管道中的数据写入到文件夹。</p></blockquote><p><code>gulp.task(name[, deps], fn)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'taskname'</span>, [<span class="string">'task1'</span>, <span class="string">'task2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do stuff</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令工具输入 gulp是执行 default任务</span></span><br><span class="line"><span class="comment">// Default task</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'首先执行的任务(可选)'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.start([<span class="string">'taskname'</span>, <span class="string">'taskname2'</span>]); <span class="comment">//开始并行执行任务呀</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>定义任务. <em>deps 是任务数组,在执行本任务时数组中的任务要执行并完成</em></p></blockquote><p><code>gulp.watch(glob [, opts], tasks)</code><br><code>gulp.watch(glob [, opts, cb])</code></p><blockquote><p>监控文件.当监控的文件有所改变时执行特定的任务.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Watch</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Watch .scss files</span></span><br><span class="line">    gulp.watch(<span class="string">'css/**/*'</span>, [<span class="string">'css'</span>]);</span><br><span class="line">    <span class="comment">// Watch .js files</span></span><br><span class="line">    gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'js'</span>]);</span><br><span class="line">    <span class="comment">// Create LiveReload server</span></span><br><span class="line">    livereload.listen();</span><br><span class="line">    <span class="comment">// Watch any files in dist/, reload on change</span></span><br><span class="line">    gulp.watch([<span class="string">'public/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="一些插件"><a href="#一些插件" class="headerlink" title="一些插件"></a>一些插件</h1><ul><li><a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes#recipes" target="_blank" rel="noopener">官方英文文档</a></li><li><code>gulp-browserify</code><blockquote><p>browserify可以为浏览器编译node风格的遵循commonjs的模块。 它搜索文件中的require()调用， 递归的建立模块依赖图。</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'gulp-browserify'</span>);</span><br><span class="line"><span class="comment">// Basic usage</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Single entry point to browserify</span></span><br><span class="line">    gulp.src(<span class="string">'src/js/app.js'</span>)</span><br><span class="line">        .pipe(browserify(&#123;</span><br><span class="line">          insertGlobals : <span class="literal">true</span>,</span><br><span class="line">          debug : !gulp.env.production</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./build/js'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-jshint</code><blockquote><p>gulp的jshint插件</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br><span class="line"><span class="keyword">var</span> gulp   = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./lib/*.js'</span>)</span><br><span class="line">    .pipe(jshint())</span><br><span class="line">    .pipe(jshint.reporter(<span class="string">'YOUR_REPORTER_HERE'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-imagemin</code><blockquote><p>压缩图片的工具</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/images/*'</span>)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: <span class="literal">true</span>,</span><br><span class="line">            svgoPlugins: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;],</span><br><span class="line">            use: [pngquant()]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>glup-sass</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>browser-sync</code><blockquote><p>BrowserSync 是一个自动化测试辅助工具,可以帮你在网页文件变更时自动载入新的网页</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br><span class="line"><span class="comment">// Static server</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync(&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">"./"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// or...</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync(&#123;</span><br><span class="line">        proxy: <span class="string">"yourlocal.dev"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>proxy-middleware</code></p><blockquote><p>作为http proxy,转发特定的请求</p></blockquote></li><li><p><code>gulp-usemin</code></p><blockquote><p>用来将HTML 文件中（或者templates/views）中没有优化的script 和stylesheets 替换为优化过的版本</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;!-- build:&lt;pipelineId&gt;(alternate search path) &lt;path&gt; --&gt;</span><br><span class="line">... HTML Markup, list of script / link tags.</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- build:css css/user.css --&gt;</span><br><span class="line">&lt;link rel="stylesheet" href="css/style.css"&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- build:js js/user.js --&gt;</span><br><span class="line">&lt;script src="js/ajax.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> usemin = <span class="built_in">require</span>(<span class="string">'gulp-usemin'</span>);</span><br><span class="line">gulp.task(<span class="string">'usemin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'index.html'</span>)</span><br><span class="line">        .pipe(</span><br><span class="line">            usemin(&#123;</span><br><span class="line">                <span class="comment">//rev() 文件带hash  'concat' 文件没有hash</span></span><br><span class="line">                css: [minifycss(), <span class="string">'concat'</span>],</span><br><span class="line">                html: [minifyhtml(&#123;</span><br><span class="line">                    empty: <span class="literal">true</span></span><br><span class="line">                &#125;)],</span><br><span class="line">                js: [uglify(), rev()]</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .pipe(</span><br><span class="line">            gulp.dest(<span class="string">'public/'</span>)</span><br><span class="line">        );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-uglify</code><blockquote><p>javascript代码优化工具，可以解析，压缩和美化javascript</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'lib/*.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-inject</code><blockquote><p>可以注入css,javascript和web组件,不需手工更新ndex.html</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;My index&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- inject:css --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- endinject --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- inject:js --&gt;</span><br><span class="line">  &lt;!-- endinject --&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> inject = <span class="built_in">require</span>(<span class="string">"gulp-inject"</span>);</span><br><span class="line">gulp.task(<span class="string">'index'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = gulp.src(<span class="string">'./src/index.html'</span>);</span><br><span class="line">  <span class="comment">// It's not necessary to read the files (will speed up things), we're only after their paths:</span></span><br><span class="line">  <span class="keyword">var</span> sources = gulp.src([<span class="string">'./src/**/*.js'</span>, <span class="string">'./src/**/*.css'</span>], &#123;<span class="attr">read</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> target.pipe(inject(sources))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./src'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-rename</code><blockquote><p>改变管道中的文件名</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);</span><br><span class="line"><span class="comment">// rename via string</span></span><br><span class="line">gulp.src(<span class="string">"./src/main/text/hello.txt"</span>)</span><br><span class="line">    .pipe(rename(<span class="string">"main/text/ciao/goodbye.md"</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/goodbye.md</span></span><br><span class="line"><span class="comment">// rename via function</span></span><br><span class="line">gulp.src(<span class="string">"./src/**/hello.txt"</span>)</span><br><span class="line">    .pipe(rename(<span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">        path.dirname += <span class="string">"/ciao"</span>;</span><br><span class="line">        path.basename += <span class="string">"-goodbye"</span>;</span><br><span class="line">        path.extname = <span class="string">".md"</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/hello-goodbye.md</span></span><br><span class="line"><span class="comment">// rename via hash</span></span><br><span class="line">gulp.src(<span class="string">"./src/main/text/hello.txt"</span>, &#123; <span class="attr">base</span>: process.cwd() &#125;)</span><br><span class="line">    .pipe(rename(&#123;</span><br><span class="line">        dirname: <span class="string">"main/text/ciao"</span>,</span><br><span class="line">        basename: <span class="string">"aloha"</span>,</span><br><span class="line">        prefix: <span class="string">"bonjour-"</span>,</span><br><span class="line">        suffix: <span class="string">"-hola"</span>,</span><br><span class="line">        extname: <span class="string">".md"</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/bonjour-aloha-hola.md</span></span><br></pre></td></tr></table></figure><ul><li><code>gulp-clean</code><blockquote><p>提供clean功能</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);  </span><br><span class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'build'</span>, &#123;<span class="attr">read</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    .pipe(clean());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>gulp-concat</code><blockquote><p>连接合并文件</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./lib/*.js'</span>)</span><br><span class="line">    .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="一个完整的gulpfile"><a href="#一个完整的gulpfile" class="headerlink" title="一个完整的gulpfile"></a>一个完整的gulpfile</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * gulp</span></span><br><span class="line"><span class="comment"> * $ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Load plugins</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>),</span><br><span class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</span><br><span class="line">    minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</span><br><span class="line">    cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</span><br><span class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</span><br><span class="line">    del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Styles</span></span><br><span class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">style</span>: <span class="string">'expanded'</span>, &#125;))</span><br><span class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">suffix</span>: <span class="string">'.min'</span> &#125;))</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Styles task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Scripts</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/scripts/**/*.js'</span>)</span><br><span class="line">    .pipe(jshint(<span class="string">'.jshintrc'</span>))</span><br><span class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</span><br><span class="line">    .pipe(concat(<span class="string">'main.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">suffix</span>: <span class="string">'.min'</span> &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Scripts task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Images</span></span><br><span class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/images/**/*'</span>)</span><br><span class="line">    .pipe(cache(imagemin(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span>, <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;)))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Images task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Clean</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    del([<span class="string">'dist/assets/css'</span>, <span class="string">'dist/assets/js'</span>, <span class="string">'dist/assets/img'</span>], cb)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Default task</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>, <span class="string">'images'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Watch</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Watch .scss files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/styles/**/*.scss'</span>, [<span class="string">'styles'</span>]);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Watch .js files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/scripts/**/*.js'</span>, [<span class="string">'scripts'</span>]);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Watch image files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>, [<span class="string">'images'</span>]);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Create LiveReload server</span></span><br><span class="line">  livereload.listen();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Watch any files in dist/, reload on change</span></span><br><span class="line">  gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://colobu.com/2014/11/17/gulp-plugins-introduction/" target="_blank" rel="noopener">gulp-plugins-introduction/</a><br><a href="https://gist.github.com/markgoodyear/8497946#file-gulpfile-js" target="_blank" rel="noopener">grunt与gulp比较</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp移动/复制文件</title>
      <link href="/2015/02/27/gulp%E7%A7%BB%E5%8A%A8-%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
      <url>/2015/02/27/gulp%E7%A7%BB%E5%8A%A8-%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>gulp直接dest 默认直接复制文件,不会设置文件的文件目录,在gulp &gt;= 3.2.2后可以设置base来达到文件含目录<br><a id="more"></a></p><h2 id="有以下文件-文件夹"><a href="#有以下文件-文件夹" class="headerlink" title="有以下文件/文件夹"></a>有以下文件/文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-js/**/*</span><br><span class="line">-css/**/*</span><br><span class="line">-images/**/*</span><br><span class="line">-index.html</span><br></pre></td></tr></table></figure><h2 id="想要转换成"><a href="#想要转换成" class="headerlink" title="想要转换成"></a>想要转换成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-public</span><br><span class="line">    -js/**/*</span><br><span class="line">    -css/**/*</span><br><span class="line">    -images/**/*</span><br><span class="line">    -index.html</span><br></pre></td></tr></table></figure><blockquote><p>glob-stream versions &gt;= 3.1.0 (used by gulp &gt;= 3.2.2) accept a base option, which can be used to explicitly set the base.  </p></blockquote><blockquote><p>只要gulp版本 &gt;= 3.2.2; 可以使用base参数指定拷贝开始目录</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move</span></span><br><span class="line">gulp.task(<span class="string">'move'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(</span><br><span class="line">        [<span class="string">'js/**/*jquery*js'</span>, <span class="string">'js/**/*bootstrap*js'</span>, <span class="string">'images/**/*'</span>, <span class="string">'css/**/*bootstrap*css'</span>], &#123;</span><br><span class="line">            base: <span class="string">'./'</span>   <span class="comment">//如果设置为 base: 'js' 将只会复制 js目录下文件, 其他文件会忽略</span></span><br><span class="line">        &#125;</span><br><span class="line">    ).pipe(gulp.dest(<span class="string">'public'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="gulp-src-globs-options-中options用法"><a href="#gulp-src-globs-options-中options用法" class="headerlink" title="gulp.src(globs[, options]) 中options用法"></a>gulp.src(globs[, options]) 中options用法</h2><p>存在文件 <code>app/views/index.html</code>, <code>gulp</code>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> src = <span class="string">'index.html'</span>;</span><br><span class="line"><span class="keyword">var</span> opt = &#123;</span><br><span class="line">  cwd: <span class="string">'app/views'</span>,</span><br><span class="line">  base: <span class="string">'app'</span></span><br><span class="line">&#125;;</span><br><span class="line">gulp.src(src, opt);</span><br></pre></td></tr></table></figure></p><p>意思为:  <code>opt.cwd</code> 路径下读取 <code>src</code>, 输出路径的 <code>base</code> 为 <code>opt.base</code>; 即输出路径为 <code>views/index.html</code>;<br>假设 <code>opt.base</code> 为 <code>app2</code> , 因为<code>base路径</code>基于 <code>opt.cwd + src</code>, 所以 输出路径为 <code>空</code> , 即没有任何文件能输出</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://www.levihackwith.com/how-to-make-gulp-copy-a-directory-and-its-contents/" target="_blank" rel="noopener">http://www.levihackwith.com/how-to-make-gulp-copy-a-directory-and-its-contents/</a></li><li><a href="https://github.com/hparra/gulp-rename" target="_blank" rel="noopener">https://github.com/hparra/gulp-rename</a></li></ul><hr><blockquote><p><strong>文章若有纰漏请大家补充指正,谢谢~~</strong><br><a href="http://blog.xinshangshangxin.com">http://blog.xinshangshangxin.com</a> SHANG殇</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js中fs.rename出错Error EXDEV</title>
      <link href="/2015/02/24/Node-js%E4%B8%ADfs-rename%E5%87%BA%E9%94%99Error-EXDEV/"/>
      <url>/2015/02/24/Node-js%E4%B8%ADfs-rename%E5%87%BA%E9%94%99Error-EXDEV/</url>
      
        <content type="html"><![CDATA[<p>rename出错Error EXDEV由于跨磁盘分区移动或操作文件会有权限问题(默认路径是window临时目录C:\Users\ADMINI~1\AppData\Local\Temp\）<br><a id="more"></a></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><blockquote><p>方法一<br>在项目入口的文件（<code>app.js</code>）的顶部， 加以下这行代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.env.TMPDIR = <span class="string">'./temp'</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// process.env.TMPDIR = '/path/to/directory';</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二<br>在项目根目录路径，在<code>命令行</code>下 输入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env TMPDIR=<span class="regexp">/path/</span>to/directory node app.js</span><br></pre></td></tr></table></figure><blockquote><p>方法三<br>利用fs的<code>createReadStream</code>、<code>createWriteSream</code>和<code>unlinkSync</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(files.upload.path)</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">"/tmp/test.png"</span>);</span><br><span class="line"></span><br><span class="line">util.pump(readStream, writeStream, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.unlinkSync(files.upload.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>方法四<br>如果使用 <a href="https://github.com/felixge/node-formidable" target="_blank" rel="noopener">formidable</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">form.uploadDir = dir;<span class="comment">// 直接设置路径即可</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConEmu设置当前目录打开右键菜单</title>
      <link href="/2015/02/22/ConEmu%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/"/>
      <url>/2015/02/22/ConEmu%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<p>cmder基于ConEmu,但是ConEmu没有直接设置当前目录打开的右键菜单<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>cmder 很好用,就是经常吞字和多字; 查了下,cmder基于ConEmu,就尝试了ConEmu</p><h1 id="ConEmu设置当前目录打开右键菜单"><a href="#ConEmu设置当前目录打开右键菜单" class="headerlink" title="ConEmu设置当前目录打开右键菜单"></a>ConEmu设置当前目录打开右键菜单</h1><ol><li>打开设置 <code>win+alt+p</code> 或者 如图打开<figure class="image-box">                <img src="/img/conemu/2.png" alt="ConEmu" title="" class="">                <p>ConEmu</p>            </figure></li><li><p>打开Integreation 如图填写<br><code>cmd -cur_console:n %P</code><br><img src="/img/conemu/3.png" alt="ConEmu"></p></li><li><p>右键测试下吧~</p></li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>在ConEmu 安装/解压 目录使用 无效!</li><li>在 搜狗壁纸 等软件上 无效!  </li></ol><p><em>我测试的时候就是在ConEmu目录下 和 搜狗壁纸的桌面上测试;始终无效,捣鼓了好长时间…</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> ConEmu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自行搭建youkuvod服务器</title>
      <link href="/2015/02/20/%E8%87%AA%E8%A1%8C%E6%90%AD%E5%BB%BAyoukuvod%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2015/02/20/%E8%87%AA%E8%A1%8C%E6%90%AD%E5%BB%BAyoukuvod%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>由于azure服务器到期,转至coding.net,自行搭建youkuvod服务器环境可提高速度<br><a id="more"></a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>菜鸟作品, 大神请略过</li><li>直接可用脚本<a href="https://greasyfork.org/zh-CN/scripts/2837-youkuvod" target="_blank" rel="noopener">greasyfork-youkuvod</a></li><li>担心服务器垮掉才出现本文</li><li>搭建后默认只能使用硕鼠解析;飞驴解析需要申请token</li><li>请正确使用coding.net提供的空间,不要浪费…..</li></ol><h1 id="使用coding-net搭建服务器"><a href="#使用coding-net搭建服务器" class="headerlink" title="使用coding.net搭建服务器"></a>使用coding.net搭建服务器</h1><ul><li>申请账号: <a href="https://coding.net/register" target="_blank" rel="noopener">https://coding.net/register</a></li><li>新建项目<figure class="image-box">                <img src="/img/youkuvod/1.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure></li></ul><blockquote><p>填写地址 <code>https://github.com/xinshangshangxin/youkuvod.git</code></p></blockquote><figure class="image-box">                <img src="/img/youkuvod/2.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p>点击创建后等待</p></blockquote><figure class="image-box">                <img src="/img/youkuvod/3.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p>点击演示按钮</p></blockquote><figure class="image-box">                <img src="/img/youkuvod/4.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><figure class="image-box">                <img src="/img/youkuvod/5.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><figure class="image-box">                <img src="/img/youkuvod/6.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><figure class="image-box">                <img src="/img/youkuvod/7.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p>点击 一键部署后等待; 如果等待时间 过长; 请点击按钮 <code>重启</code><br>出现如图所示部署成功</p></blockquote><figure class="image-box">                <img src="/img/youkuvod/9.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p><strong>[可略过此步]</strong> 默认只开启硕鼠解析;飞驴解析需要申请 token; 请到<a href="https://www.flvxz.com/docs.php?doc=api" target="_blank" rel="noopener">飞驴</a>申请<br>飞驴token设置点击左侧<code>环境变量</code> </p></blockquote><p><img src="/img/youkuvod/8.png" alt="youkuvod"></p><blockquote><p><strong>添加脚本</strong><br>chrome 需要 <a href="https://chrome.google.com/extensions/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a>;如果无法打开网址,请自行百度<br>firefox 请自行寻找,IE 再见~~</p><blockquote><p>可以直接添加 <a href="https://greasyfork.org/zh-CN/scripts/2837-youkuvod" target="_blank" rel="noopener">greasyfork</a>的脚本修改<br>也可以复制<a href="https://coding.net/u/youkuvod/p/youkuvod/git/raw/master/index.js" target="_blank" rel="noopener">coding.net</a> 新建脚本<br>方法如图:</p></blockquote></blockquote><figure class="image-box">                <img src="/img/youkuvod/12.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p><strong>修改脚本</strong></p></blockquote><figure class="image-box">                <img src="/img/youkuvod/11.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure><blockquote><p>打开优酷, 进行测试;<br>出现优酷页面设置(如图) 成功!!</p></blockquote><figure class="image-box">                <img src="/img/youkuvod/10.png" alt="youkuvod" title="" class="">                <p>youkuvod</p>            </figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> youkuvod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js使用正则格式化时间[转]</title>
      <link href="/2015/02/19/js%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4-%E8%BD%AC/"/>
      <url>/2015/02/19/js%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4-%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>JS没有提供类似 format(‘yyyy-MM-dd hh:mm:ss.S’) 的 时间格式化,在网上找到了一段极简的代码将 Date 转化为指定格式的String<br><a id="more"></a></p><blockquote><p>使用正则表达式的 RegExp.$1 来判断 使用多少个占位符<br>转载以备待用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对Date的扩展，将 Date 转化为指定格式的String   </span></span><br><span class="line"><span class="comment">// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，   </span></span><br><span class="line"><span class="comment">// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)   </span></span><br><span class="line"><span class="comment">// 例子：   </span></span><br><span class="line"><span class="comment">// (new Date()).Format('yyyy-MM-dd hh:mm:ss.S') ==&gt; 2006-07-02 08:09:04.423   </span></span><br><span class="line"><span class="comment">// (new Date()).Format('yyyy-M-d h:m:s.S')      ==&gt; 2006-7-2 8:9:4.18   </span></span><br><span class="line"><span class="comment">//author: meizz   </span></span><br><span class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">'M+'</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份   </span></span><br><span class="line">        <span class="string">'d+'</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日   </span></span><br><span class="line">        <span class="string">'h+'</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时   </span></span><br><span class="line">        <span class="string">'m+'</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分   </span></span><br><span class="line">        <span class="string">'s+'</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒   </span></span><br><span class="line">        <span class="string">'q+'</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度   </span></span><br><span class="line">        <span class="string">'S'</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒   </span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123;</span><br><span class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'('</span> + k + <span class="string">')'</span>).test(fmt)) &#123;</span><br><span class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">'00'</span> + o[k]).substr((<span class="string">''</span> + o[k]).length)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm安装modules失败</title>
      <link href="/2015/02/18/npm%E5%AE%89%E8%A3%85modules%E5%A4%B1%E8%B4%A5/"/>
      <url>/2015/02/18/npm%E5%AE%89%E8%A3%85modules%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>npm安装modules失败解决方法,以及windows下无法删除modules解决办法<br><a id="more"></a></p><h1 id="npm安装modules失败"><a href="#npm安装modules失败" class="headerlink" title="npm安装modules失败"></a>npm安装modules失败</h1><h2 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h2><blockquote><p>设置GoAgent代理在我这里失败了……</p></blockquote><h3 id="用纯文本编辑器打开编辑"><a href="#用纯文本编辑器打开编辑" class="headerlink" title="用纯文本编辑器打开编辑"></a>用纯文本编辑器打开编辑</h3><h4 id="用户配置或者全局配置-2选1即可"><a href="#用户配置或者全局配置-2选1即可" class="headerlink" title="用户配置或者全局配置[2选1即可]"></a>用户配置或者全局配置[2选1即可]</h4><ul><li><p>获取用户配置文件路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get userconfig</span><br></pre></td></tr></table></figure></li><li><p>获取全局配置文件路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get globalconfig</span><br></pre></td></tr></table></figure></li><li><p>用文本编辑器打开后加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy = http:<span class="comment">//server:port</span></span><br><span class="line">https-proxy = http:<span class="comment">//server:port</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="用cmd编辑代理"><a href="#用cmd编辑代理" class="headerlink" title="用cmd编辑代理"></a>用cmd编辑代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy http:<span class="comment">//server:port</span></span><br><span class="line">npm config set https-proxy http:<span class="comment">//server:port</span></span><br></pre></td></tr></table></figure><h2 id="使用优秀的npm镜像资源-我正在使用的"><a href="#使用优秀的npm镜像资源-我正在使用的" class="headerlink" title="使用优秀的npm镜像资源 我正在使用的"></a>使用优秀的npm镜像资源 <em>我正在使用的</em></h2><blockquote><p><strong>淘宝npm镜像</strong><br>搜索地址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a><br>registry地址：<a href="http://registry.npm.taobao.org/" target="_blank" rel="noopener">http://registry.npm.taobao.org/</a></p><p><strong>cnpmjs镜像</strong><br>搜索地址：<a href="http://cnpmjs.org/" target="_blank" rel="noopener">http://cnpmjs.org/</a><br>registry地址：<a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></p></blockquote><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https:<span class="comment">//registry.npm.taobao.org install express</span></span><br></pre></td></tr></table></figure><h3 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"><span class="comment">// 配置后可通过下面方式来验证是否成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure><h1 id="windows下无法删除modules-提示找不到文件"><a href="#windows下无法删除modules-提示找不到文件" class="headerlink" title="windows下无法删除modules, 提示找不到文件"></a>windows下无法删除modules, 提示找不到文件</h1><blockquote><p>google了下,在 <a href="stackoverflow.com">stackoverflow.com</a>上找到了答案:<br><code>Windows下文件嵌套长度无法超过256字符,</code>所以就只能把文件名称改短了,有人给了 <code>.bat</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"><span class="keyword">if</span> not (%<span class="number">1</span>)==() cd %<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> /D %%i <span class="keyword">in</span> (*) <span class="keyword">do</span> <span class="keyword">if</span> not %%i==_ ren <span class="string">"%%i"</span> _</span><br><span class="line">pushd _ </span><br><span class="line">%<span class="number">0</span> </span><br><span class="line">popd</span><br></pre></td></tr></table></figure><blockquote><p>新建文本文件;复制上面的代码并保存, 重新命名文件为 <code>文件名过长.bat</code><br>将你要删除的modules 拖到这个 <code>文件名过长.bat</code>上;出现下面的截图内容关闭</p></blockquote><figure class="image-box">                <img src="/img/npm/1.png" alt="" title="" class="">                <p></p>            </figure><blockquote><p>接着再删除这个 文件夹; 如果还是删除不了;用下面的 bat;用法和上面一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEL /F /A /Q \\?\%<span class="number">1</span></span><br><span class="line">RD /S /Q \\?\%<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>还是无法删除?!! 手动进入文件夹;查看哪个文件夹的名称不是 <code>_</code> ,再使用第一个<code>bat</code>文件,尝试删除;如此循环….</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="stackoverflow.com">stackoverflow.com</a></li><li><a href="http://www.cnblogs.com/huang0925/archive/2013/05/07.html" target="_blank" rel="noopener">Npm的配置管理及设置代理</a></li><li><a href="http://riny.net/2014/cnpm/" target="_blank" rel="noopener">国内优秀npm镜像推荐及使用</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cordova_Intellij 配置</title>
      <link href="/2015/02/17/Cordova%E5%AF%BC%E5%85%A5IntelliJ-IDEA/"/>
      <url>/2015/02/17/Cordova%E5%AF%BC%E5%85%A5IntelliJ-IDEA/</url>
      
        <content type="html"><![CDATA[<p>使用Intellij 搭建第一个cordova 混合应用程序;以 windows 和 andorid 为例<br><a id="more"></a></p><h1 id="环境变量配置-Android"><a href="#环境变量配置-Android" class="headerlink" title="环境变量配置[Android]"></a>环境变量配置[Android]</h1><blockquote><p>ANT_HOME<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\ant</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ANDROID_HOME<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\adt-bundle-windows-x86_64<span class="number">-20140321</span>\sdk</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>JAVA_HOME<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1<span class="number">.7</span><span class="number">.0</span>_05</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>添加到PATH<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin;%ANT_HOME%\bin;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="nodejs下载安装"><a href="#nodejs下载安装" class="headerlink" title="nodejs下载安装"></a>nodejs下载安装</h1><blockquote><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">官网下载nodejs</a></li><li>安装直接下一步……安装完成</li><li>新的CMD 测试下 <code>node -v</code> 和 <code>npm -v</code>; 显示版本号则安装成功</li></ul></blockquote><h1 id="cordova-构建应用"><a href="#cordova-构建应用" class="headerlink" title="cordova 构建应用"></a>cordova 构建应用</h1><ol><li><p>安装cordova</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure></li><li><p>创建App</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">cd d:<span class="regexp">/android</span></span><br><span class="line"><span class="regexp">cordova create hello com.example.hello HelloWorld</span></span><br></pre></td></tr></table></figure></li><li><p>进入 hello 目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hello</span><br></pre></td></tr></table></figure></li><li><p>添加平台 <em>只配置了android环境;所以只需要第一条命令</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cordova platform add android</span><br><span class="line">cordova platform add ios</span><br><span class="line">cordova platform add amazon-fireos</span><br><span class="line">cordova platform add blackberry10</span><br><span class="line">cordova platform add firefoxos</span><br></pre></td></tr></table></figure></li><li><p>构造App</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build</span><br></pre></td></tr></table></figure></li></ol><h1 id="Intellij-IDEA导入项目"><a href="#Intellij-IDEA导入项目" class="headerlink" title="Intellij IDEA导入项目"></a>Intellij IDEA导入项目</h1><figure class="image-box">                <img src="/img/Intellij_cordova/2.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><blockquote><p><em>选择安装 hello 的根目录</em></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/3.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><blockquote><p><em>选择 create</em></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/4.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/5.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/6.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><blockquote><p><strong>注意!!!</strong></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/7.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/8.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/9.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/10.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><blockquote><p><strong>注意!!!</strong></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/11.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><h1 id="其他可能问题"><a href="#其他可能问题" class="headerlink" title="其他可能问题:"></a>其他可能问题:</h1><h3 id="usb调试"><a href="#usb调试" class="headerlink" title="usb调试"></a>usb调试</h3><figure class="image-box">                <img src="/img/Intellij_cordova/13.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><blockquote><p><em>如果没有图中所示的Android; 就先在右侧项目上右键 点击 run all test</em></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/12.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><h3 id="source-1-3-中不支持注释-请使用-source-5-或更高版本以…"><a href="#source-1-3-中不支持注释-请使用-source-5-或更高版本以…" class="headerlink" title="source 1.3 中不支持注释 (请使用 -source 5 或更高版本以…"></a>source 1.3 中不支持注释 (请使用 -source 5 或更高版本以…</h3><blockquote><p><a href="http://stackoverflow.com/questions/17714584/what-is-project-language-level-in-intellij-idea&quot;参考资料&quot;" target="_blank" rel="noopener">Set language level via File &gt; Project Structure &gt; Project &gt; Project language level</a></p></blockquote><figure class="image-box">                <img src="/img/Intellij_cordova/14.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><figure class="image-box">                <img src="/img/Intellij_cordova/15.png" alt="Intellij_cordova" title="" class="">                <p>Intellij_cordova</p>            </figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://www.it165.net/pro/html/201407/17784.html" target="_blank" rel="noopener">http://www.it165.net/pro/html/201407/17784.html</a><br><a href="http://www.cnblogs.com/or2-/p/3842158.html" target="_blank" rel="noopener">http://www.cnblogs.com/or2-/p/3842158.html</a><br><a href="http://cordova.apache.org/docs/zh/edge/_index.html" target="_blank" rel="noopener">官方插件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cordova </tag>
            
            <tag> Intellij </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
